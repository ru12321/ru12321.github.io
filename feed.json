{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Mr.Ru",
  "home_page_url": "https://mister-hope.github.io/",
  "feed_url": "https://mister-hope.github.io/feed.json",
  "description": "Mr.Ru的博客",
  "icon": "https://mister-hope.github.io/logo.svg",
  "authors": [
    {
      "name": "Mr.Ru",
      "url": "https://github.com/ru12321"
    }
  ],
  "items": [
    {
      "title": "Waline教程",
      "url": "https://mister-hope.github.io/about_me/%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html",
      "id": "https://mister-hope.github.io/about_me/%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html",
      "summary": "评论系统Waline 主要参考文档：https://plugin-comment2.vuejs.press/zh/guide/waline.html 问题：使用vercel部署评论服务，会导致国内dns污染，无法访问；; 解决：; 域名解析添加cname指向cname.vercel-dns.com; image-20240118155454330 这样...",
      "content_html": "<h2> 评论系统Waline</h2>\n<p>主要参考文档：<a href=\"https://plugin-comment2.vuejs.press/zh/guide/waline.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://plugin-comment2.vuejs.press/zh/guide/waline.html</a></p>\n<ul>\n<li>\n<p>问题：使用vercel部署评论服务，会导致国内dns污染，无法访问；</p>\n</li>\n<li>\n<p>解决：</p>\n<ul>\n<li>\n<p><a href=\"http://xn--cnamecname-t12q10lxb246fhy4btfpbxz9k5i.vercel-dns.com\" target=\"_blank\" rel=\"noopener noreferrer\">域名解析添加cname指向cname.vercel-dns.com</a></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202401181554500.png\" alt=\"image-20240118155454330\" loading=\"lazy\"></p>\n<p>这样就有了子域名<code>comment.我的域名</code></p>\n</li>\n<li>\n<p>vercel项目添加子域名</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202401181556045.png\" alt=\"image-20240118155616010\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>重启容器，出现上述设定的子域名</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202401181556686.png\" alt=\"image-20240118155653658\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>修改代码配置的serverURL为上述子域名即可</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202401181557693.png\" alt=\"image-20240118155732674\" loading=\"lazy\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202401181554500.png",
      "date_published": "2024-01-18T00:00:00.000Z",
      "date_modified": "2024-01-18T08:02:21.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "我"
      ]
    },
    {
      "title": "MongoDB",
      "url": "https://mister-hope.github.io/tech/database/mongoDB.html",
      "id": "https://mister-hope.github.io/tech/database/mongoDB.html",
      "summary": "MongoDB基础 文档地址: https://docs.mongodb.com/manual/ 简介 说明 百度百科 MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展高性能数据存储解决方案。 MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型 。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。",
      "content_html": "<h1> MongoDB基础</h1>\n<p>文档地址: <a href=\"https://docs.mongodb.com/manual/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.mongodb.com/manual/</a></p>\n<h2> 简介</h2>\n<h3> 说明</h3>\n<ul>\n<li>百度百科</li>\n</ul>\n<p>MongoDB是一个<code>基于分布式文件存储的数据库</code>。由C++语言编写。旨在<code>为WEB应用提供可扩展高性能数据存储解决方案</code>。</p>\n<p>MongoDB是一个<code>介于关系数据库和非关系数据库</code>之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型 。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，<code>几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引</code>。</p>\n<p>总结: mongoDB 是一个<mark>非关系型</mark> <mark>文档数据库</mark></p>\n<h3> 历史</h3>\n<ul>\n<li>2009年2月，MongoDB数据库首次在数据库领域亮相，打破了关系型数据库一统天下的局面；</li>\n<li>2010年8月, MongoDB 1.6发布。这个版本最大的一个功能就是Sharding，自动分片</li>\n<li>2014年12月, MongoDB 3.0发布。由于收购了WiredTiger 存储引擎，大幅提升了MongoDB的写入性能；</li>\n<li>2015年12月，3.2版本发布，开始支持了关系型数据库的核心功能：关联。你可以一次同时查询多个MongoDB的集合。</li>\n<li>2016年, MongoDB推出Atlas，在AWS、 Azure 和GCP上的MongoDB托管服务；</li>\n<li><strong>2017年10月，MongoDB成功在纳斯达克敲钟</strong>，成为26年来<strong>第一家以数据库产品为主要业务的上市公司。</strong></li>\n<li>2018年6月, MongoDB4.0 发布推出ACID事务支持，<strong>成为第一个支持强事务的NoSQL数据库；</strong></li>\n<li>2018年--至今，MongoDB已经从一个在数据库领域籍籍无名的“小透明”，变成了话题度和热度都很高的“流量”数据库。</li>\n</ul>\n<h2> 特点</h2>\n<h3> 特点</h3>\n<ul>\n<li>面向集合存储，<strong>易存储对象类型的数据</strong></li>\n<li>支持查询,以及动态查询</li>\n<li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言</li>\n<li><strong>文件存储格式为BSON</strong>（一种JSON的扩展）</li>\n<li>支持复制和故障恢复和分片</li>\n<li><strong>支持事务支持</strong></li>\n<li>索引 聚合 关联....</li>\n</ul>\n<h3> 应用场景</h3>\n<p>说明：<strong>事务一致性要求不高的可以放在mongodb中，一些重要是订单金额等数据放在关系型数据库中好点</strong></p>\n<ul>\n<li>游戏应用：使用云数据库MongoDB作为游戏服务器的数据库存储用户信息。用户的游戏装备、积分等直接以内嵌文档的形式存储，方便进行查询与更新。</li>\n<li>物流应用：使用云数据库MongoDB存储订单信息，订单状态在运送过程中会不断更新，以云数据库MongoDB内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来，方便快捷且一目了然。</li>\n<li>社交应用：使用云数据库MongoDB存储用户信息以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。并且，云数据库MongoDB非常适合用来存储聊天记录，因为它提供了非常丰富的查询，并在写入和读取方面都相对较快。</li>\n<li>视频直播：使用云数据库MongoDB存储用户信息、礼物信息等。</li>\n<li>大数据应用：使用云数据库MongoDB作为大数据的云存储系统，随时进行数据提取分析，掌握行业动态。</li>\n</ul>\n<h2> 安装</h2>\n<p>官网社区版，<mark>选择5.0版本的（6.0有Bug）</mark></p>\n<p>1.先启动服务：bin目录cmd然后输入<strong>mongod --dbpath=..\\data\\db</strong></p>\n<p>2.打开客户端 mongo.exe</p>\n<p>3.MongoDBCompass可视化查看工具</p>\n<h2> 核心概念</h2>\n<h3> 库&lt; DataBase&gt;</h3>\n<p>​\t<code>mongodb中的库就类似于传统关系型数据库中库的概念，用来通过不同库隔离不同应用数据</code>。mongodb中可以建立多个数据库。每一个库都有自己的集合和权限，不同的数据库也放置在不同的文件中。默认的数据库为\"test\"，数据库存储在启动指定的data目录中。</p>\n<h3> 集合&lt; Collection&gt;</h3>\n<p>​\t<code>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表的概念</code></p>\n<p>集合存在于数据库中，一个库中可以创建多个集合。每个集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<h3> 文档&lt; Document&gt;</h3>\n<p>文档集合中一条条记录，是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>一个简单的文档例子如下：</p>\n<h3> 关系总结</h3>\n<table>\n<thead>\n<tr>\n<th>RDBMS</th>\n<th>MongoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据库&lt; database&gt;</td>\n<td>数据库&lt; database&gt;</td>\n</tr>\n<tr>\n<td>表&lt; table&gt;</td>\n<td>集合&lt; collection&gt;</td>\n</tr>\n<tr>\n<td>行&lt; row&gt;</td>\n<td>文档&lt; document&gt;</td>\n</tr>\n<tr>\n<td>列&lt; colume&gt;</td>\n<td>字段&lt; field&gt;</td>\n</tr>\n</tbody>\n</table>\n<h2> 基本操作</h2>\n<h3> 库&lt; database&gt;</h3>\n<ul>\n<li>\n<p>查看所有库</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214114636572.png\" alt=\"image-20211214114636572\" loading=\"lazy\"></p>\n<p><code>注意:</code></p>\n<ul>\n<li><strong><code>admin</code></strong>： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li><strong><code>local</code></strong>: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li><strong><code>config</code></strong>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n</li>\n<li>\n<p>创建数据库</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>注意: use 代表创建并使用,<mark>当库中没有数据时默认不显示这个库</mark></p>\n<p>添加数据后，show databases才会显示</p>\n</li>\n<li>\n<p>删除数据库</p>\n<ul>\n<li><code>默认删除当前选中的库</code></li>\n</ul>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214115339513.png\" alt=\"image-20211214115339513\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>查看当前所在库</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h3> 集合&lt; Collection&gt;</h3>\n<p>就是mysql中表的概念！</p>\n<ul>\n<li>\n<p>查看库中所有集合</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>创建集合（表）</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>options可以是如下参数：</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">capped</td>\n<td style=\"text-align:left\">布尔</td>\n<td style=\"text-align:left\">（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。 <strong>当该值为 true 时，必须指定 size 参数。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">数值</td>\n<td style=\"text-align:left\">（可选）为固定集合指定一个最大值，即字节数。 <strong>如果 capped 为 true，也需要指定该字段。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">max</td>\n<td style=\"text-align:left\">数值</td>\n<td style=\"text-align:left\">（可选）指定固定集合中包含文档的最大数量。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>​\t\t<strong>注意:当集合不存在时,向集合中插入文档也会自动创建该集合。</strong></p>\n<ul>\n<li>\n<p>删除集合</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h3> 文档&lt; document&gt;</h3>\n<p><strong>注意：方法的参数的语法格式不要写错！</strong></p>\n<p>官方doc: <a href=\"https://docs.mongodb.com/manual/reference/method/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.mongodb.com/manual/reference/method/</a></p>\n<ul>\n<li>\n<p>插入文档</p>\n<ul>\n<li>\n<p>单条文档</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>多条文档</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>脚本方式</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p><code>注意:在 mongodb 中每个文档都会有一个_id作为唯一标识,_id默认会自动生成如果手动指定将使用手动指定的值作为_id 的值。</code></p>\n</li>\n<li>\n<p><strong>查询所有</strong></p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>删除文档</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>参数说明：</strong></p>\n<ul>\n<li><strong>query</strong> :<code>可选</code>删除的文档的条件。</li>\n<li><strong>justOne</strong> : <code>可选</code>如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li>\n<li><strong>writeConcern</strong> :<code>可选</code>抛出异常的级别。</li>\n</ul>\n</li>\n<li>\n<p>更新文档</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>参数说明：</strong></p>\n<ul>\n<li><strong>query</strong> : update的查询条件，类似sql update查询内where后面的。</li>\n<li><strong>update</strong> : update的对象和一些更新的操作符（如<span class=\"katex\"><span class=\"katex-mathml\"></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3em;vertical-align:-0.1944em;\"></span><span class=\"mpunct\">,</span></span></span></span>inc...）等，也可以理解为sql update查询内set后面的</li>\n<li><strong>upsert</strong> : <code>可选</code>，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>\n<li><strong>multi</strong> : <code>可选</code>，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n<li><strong>writeConcern</strong> :<code>可选</code>，抛出异常的级别。</li>\n</ul>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h2> 文档查询</h2>\n<p><strong>MongoDB 查询文档使用 find() 方法。find() 方法以非结构化的方式来显示所有文档。</strong></p>\n<h3> 语法</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li><strong>query</strong> ：可选，使用查询操作符指定查询条件</li>\n<li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>\n</ul>\n<p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>注意: pretty() 方法以格式化的方式来显示所有文档。</code></p>\n<h3> 对比语法</h3>\n<p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p>\n<p>注意：<mark>这里的命令行查询可以封装成JSON格式作为参数传递</mark></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214123631600.png\" alt=\"image-20211214123631600\" loading=\"lazy\"></p>\n<h3> AND</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> OR</h3>\n<p>MongoDB OR 条件语句使用了关键字 <strong>$or</strong>,语法格式如下：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>类似于 WHERE 语句：WHERE key1=value1 or key2=value2</code></p>\n<h3> AND 和 OR 联合</h3>\n<p><code>类似SQL语句为：'where age &gt;50 AND (name = 'ruyb1' OR name = 'ruyb2')'</code></p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 数组中查询</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 模糊查询</h3>\n<p><code>类似 SQL 中为 'where name like '%name%''</code></p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>注意:在 mongoDB 中使用正则表达式可以是实现近似模糊查询功能</code></p>\n<h3> 排序</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>类似 SQL 语句为: 'order by name,age'</code></p>\n<h3> 分页</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>类似于 SQL 语句为: 'limit start,rows'</code></p>\n<h3> 总条数</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>类似于 SQL 语句为: 'select count(id) from ....'</code></p>\n<h3> 去重</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>类似于 SQL 语句为: 'select distinct name from ....'</code></p>\n<h3> <mark>指定返回字段</mark></h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> $type</h2>\n<h3> 说明</h3>\n<p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。</p>\n<p>MongoDB 中可以使用的类型如下表所示：</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214125324193.png\" alt=\"image-20211214125324193\" loading=\"lazy\"></p>\n<ul>\n<li>如果想获取 \"col\" 集合中 title 为 String 的数据，你可以使用以下命令：</li>\n</ul>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>如果想获取 \"col\" 集合中 tags 为 Array 的数据，你可以使用以下命令：</li>\n</ul>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 索引&lt; index&gt;</h2>\n<p>官方doc：<a href=\"https://docs.mongodb.com/manual/indexes/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.mongodb.com/manual/indexes/</a></p>\n<h3> 说明</h3>\n<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，<strong>索引是对数据库表中一列或多列的值进行排序的一种结构。</strong></p>\n<h3> 原理</h3>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211220093934250.png\" alt=\"image-20211220093934250\" loading=\"lazy\"></p>\n<p>从根本上说，MongoDB中的索引与其他数据库系统中的索引类似。MongoDB在集合层面上定义了索引，并支持对MongoDB集合中的任何字段或文档的子字段进行索引。 <strong>非常类似mysql</strong></p>\n<h3> 操作</h3>\n<ul>\n<li><mark>每个集合一定有一个默认的索引  _id</mark></li>\n<li>注意参数的语法格式</li>\n</ul>\n<p>0、创建索引</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>说明: 语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。</code></p>\n<p>createIndex() 接收可选参数，可选参数列表如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Parameter</th>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>background</code></td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 \"background\" 可选参数。 \"background\" 默认值为<strong>false</strong>。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>unique</code></td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">建立的索引是否唯一。指定为true创建唯一索引。默认值为<strong>false</strong>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>name</code></td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sparse</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <strong>false</strong>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">expireAfterSeconds</td>\n<td style=\"text-align:left\">integer</td>\n<td style=\"text-align:left\">指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">v</td>\n<td style=\"text-align:left\">index version</td>\n<td style=\"text-align:left\">索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">weights</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">default_language</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">language_override</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td>\n</tr>\n</tbody>\n</table>\n<p>1、查看集合索引</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>2、查看集合索引大小</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>3、删除集合所有索引</p>\n<p><strong>_id不会被删除掉</strong></p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>4、删除集合指定索引</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 复合索引</h3>\n<p>​\t说明: 一个索引的值是由多个 key 进行维护的索引的称之为复合索引</p>\n<ul>\n<li>注意: mongoDB 中复合索引和传统关系型数据库一致都是左前缀原则</li>\n</ul>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211220122531182.png\" alt=\"image-20211220122531182\" loading=\"lazy\"></p>\n<h2> 聚合&lt; aggregate&gt;</h2>\n<h3> 说明</h3>\n<p>MongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。有点类似 <strong>SQL</strong> 语句中的 <strong>count(*)</strong>。</p>\n<h3> 常见聚合表达式</h3>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214131110733.png\" alt=\"\" loading=\"lazy\"></p>\n<h1> SpringData-MongoTemplate</h1>\n<p>参考文档：<a href=\"https://blog.csdn.net/dglsx123/article/details/103134976\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/dglsx123/article/details/103134976</a></p>\n<p><strong>说明: 这里主要以 springboot 应用为基础应用进行整合开发。</strong></p>\n<p>Spring Data : <code>Spring 数据框架 </code>：封装集成了大多数数据库的操作，如：</p>\n<ul>\n<li>\n<p><code>Spring data JPA </code>：提供了对mysql,orcale,sqlserver的操作；<code>JdbcTemplate</code>：封装了这个对象</p>\n</li>\n<li>\n<p>spring data Redis、spring data Elasticsearch、spring data AMQP；<code>RedisTemplate</code>，<code>ElasticTempalte</code>，<code>AmqpTemplate</code></p>\n</li>\n<li>\n<p><strong>spring data MongoDB；提供了<code>MongoTemplate</code>对象，对mongo进行增删改查</strong></p>\n</li>\n</ul>\n<p>在SpringBoot使用<mark>Spring Data</mark>操作MongoDB</p>\n<h3> 环境搭建</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-properties line-numbers-mode\" data-ext=\"properties\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>引入依赖后，MongoTemplate对象自动会注入到Spring工厂</p>\n<h3> 集合操作</h3>\n<ul>\n<li>\n<p>创建集合</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>注意:创建集合不能存在,存在报错</code></p>\n</li>\n<li>\n<p>删除集合</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h3> 相关注解</h3>\n<p>mongoTemplate面向对象设计，springframework.data.mongodb 提供了这些简单注解</p>\n<ul>\n<li>\n<p><code>@Document(collection = \"users\")</code></p>\n<ul>\n<li>修饰范围: \t用在类上</li>\n<li>作用:    用来映射这个类的一个对象为 mongo 中一条文档数据</li>\n<li>属性：注解的值有<code>value 、collection</code> ，用来<strong>指定操作的集合名称</strong></li>\n</ul>\n</li>\n<li>\n<p><code>@Id</code></p>\n<ul>\n<li>修饰范围:  用在成员变量、方法上</li>\n<li>作用：       用来将成员变量的值映射为<mark>文档的_id</mark> 的值</li>\n</ul>\n</li>\n<li>\n<p><code>@Field(value = \"username\")</code></p>\n<ul>\n<li>不添加注解的话，<strong>默认是成员变量名</strong>为文档的属性名</li>\n<li>修饰范围:  用在成员变量、方法上</li>\n<li>作用:          <mark>用来将成员变量以及值映射为文档中一个key、value对</mark></li>\n<li>属性:       注解的值有   <code>name,value </code>，用来<strong>指定在文档中 key 的名称</strong>，默认为成员变量名</li>\n</ul>\n</li>\n<li>\n<p><code>@Transient</code></p>\n<ul>\n<li>修饰范围: 用在成员变量、方法上</li>\n<li>作用: 用来指定改成员变量，表示该成员变量在<strong>对象转换文档时，不参与文档的序列化</strong></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3> 文档操作</h3>\n<h4> 查询</h4>\n<ul>\n<li>\n<p>Criteria</p>\n</li>\n<li>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211221201808467.png\" alt=\"image-20211221201808467\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>常见查询</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h4> 添加</h4>\n<blockquote>\n<p>文档添加--save</p>\n</blockquote>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220915093357930.png\" alt=\"\" loading=\"lazy\"></p>\n<p>再添加一条，但是对birthday加transent注解</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220915093705156.png\" alt=\"image-20220915093705156\" loading=\"lazy\"></p>\n<blockquote>\n<p>文档添加--insert</p>\n</blockquote>\n<p>尝试再insert一次user1对象时，报错！</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><hr>\n<p>批处理insert</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>总结</p>\n<ul>\n<li>批处理操作时（比如insert一个集合List）：\n<ul>\n<li><code>save</code>只能一条条放，需遍历整个数据，一次插入或更新，效率较低。</li>\n<li><code>insert</code>可以一次性插入整个数据，效率较高；<mark>批量处理推荐</mark></li>\n</ul>\n</li>\n<li>插入重复数据时：\n<ul>\n<li><code>save</code>对已存在的数据进行更新。</li>\n<li><code>insert</code>报错<code>DuplicateKeyException</code>提示主键重复；</li>\n</ul>\n</li>\n</ul>\n<h4> 更新</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 删除</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> SpringData-MongoRepository</h1>\n<p>MongoRepository能够满足一般的需求开发，而且拿来即用即可</p>\n<p><a href=\"https://blog.csdn.net/weixin_42806958/article/details/115768900\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/weixin_42806958/article/details/115768900</a></p>\n<h3> 环境搭建</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 测试mongorepository</h3>\n<p>在springboot环境下 测试了mongorepository的功能</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> API整理</h3>\n<p>关于这一类，比较麻烦的地方就是不知道有哪些方法是JPA自动生成的。除了通过idea的提示可以做一部分判断，另一个方法还是要通过查看源码来判断。通过查看代码，发现每个类的Repository类都会继承<strong>MongoRepository</strong>，而MongoRepository继承了<strong>PagingAndSortingRepository</strong>，PagingAndSortingRepository继承<strong>CrudRepository</strong>，CrudRepository继承<strong>Repository</strong>。所以这几个Repository中已经有的方法都是JPA可以自动生成的。<strong>使用某一具体方法时可以在这几个Repository中查找是否有对应方法</strong></p>\n<p>在这里我们需要区分两种情况：一种是<strong>本身的Repository类继承</strong>的那一些Repository提供的基本的数据操作方法，包含基本的增删改查、分页查询、排序查询等，对于这一种，在创建的Repository类中是不需要再申明方法的。另一种是我们可以自己写一些简单的方法，这些方法只需要<strong>符合Spring Data制定的那一类规范</strong>就能被其识别出来，对于这一种就需要在Repository类中声明方法。</p>\n<h3> <mark>Spring Data Repository接口</mark></h3>\n<p><a href=\"https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#repositories\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#repositories</a></p>\n<p><code>CrudRepository</code>  接口定义的通用的底层持久性CRUD方法</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919091640818.png\" alt=\"image-20220919091640818\" loading=\"lazy\"></p>\n<p><code>PagingAndSortingRepository</code>接口提供分页方法</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919092419021.png\" alt=\"image-20220919092419021\" loading=\"lazy\"></p>\n<p><code>派生计数查询、删除方法</code></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> <mark>MongoDB repository</mark></h3>\n<p>文档很详细！！</p>\n<p><a href=\"https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#mongo.repositories\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#mongo.repositories</a></p>\n<h4> <code>支持查询方法的关键字</code></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Keyword</th>\n<th style=\"text-align:left\">Sample</th>\n<th style=\"text-align:left\">Logical result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>After</code></td>\n<td style=\"text-align:left\"><code>findByBirthdateAfter(Date date)</code></td>\n<td style=\"text-align:left\"><code>{\"birthdate\" : {\"$gt\" : date}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>GreaterThan</code></td>\n<td style=\"text-align:left\"><code>findByAgeGreaterThan(int age)</code></td>\n<td style=\"text-align:left\"><code>{\"age\" : {\"$gt\" : age}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>GreaterThanEqual</code></td>\n<td style=\"text-align:left\"><code>findByAgeGreaterThanEqual(int age)</code></td>\n<td style=\"text-align:left\"><code>{\"age\" : {\"$gte\" : age}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Before</code></td>\n<td style=\"text-align:left\"><code>findByBirthdateBefore(Date date)</code></td>\n<td style=\"text-align:left\"><code>{\"birthdate\" : {\"$lt\" : date}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>LessThan</code></td>\n<td style=\"text-align:left\"><code>findByAgeLessThan(int age)</code></td>\n<td style=\"text-align:left\"><code>{\"age\" : {\"$lt\" : age}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>LessThanEqual</code></td>\n<td style=\"text-align:left\"><code>findByAgeLessThanEqual(int age)</code></td>\n<td style=\"text-align:left\"><code>{\"age\" : {\"$lte\" : age}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Between</code></td>\n<td style=\"text-align:left\"><code>findByAgeBetween(int from, int to)</code> <code>findByAgeBetween(Range&lt;Integer&gt; range)</code></td>\n<td style=\"text-align:left\"><code>{\"age\" : {\"$gt\" : from, \"$lt\" : to}}</code> lower / upper bounds (<code>$gt</code> / <code>$gte</code> &amp; <code>$lt</code> / <code>$lte</code>) according to <code>Range</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>In</code></td>\n<td style=\"text-align:left\"><code>findByAgeIn(Collection ages)</code></td>\n<td style=\"text-align:left\"><code>{\"age\" : {\"$in\" : [ages…]}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NotIn</code></td>\n<td style=\"text-align:left\"><code>findByAgeNotIn(Collection ages)</code></td>\n<td style=\"text-align:left\"><code>{\"age\" : {\"$nin\" : [ages…]}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IsNotNull</code>, <code>NotNull</code></td>\n<td style=\"text-align:left\"><code>findByFirstnameNotNull()</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : {\"$ne\" : null}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IsNull</code>, <code>Null</code></td>\n<td style=\"text-align:left\"><code>findByFirstnameNull()</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : null}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Like</code>, <code>StartingWith</code>, <code>EndingWith</code></td>\n<td style=\"text-align:left\"><code>findByFirstnameLike(String name)</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : name} (name as regex)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NotLike</code>, <code>IsNotLike</code></td>\n<td style=\"text-align:left\"><code>findByFirstnameNotLike(String name)</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : { \"$not\" : name }} (name as regex)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Containing</code> on String</td>\n<td style=\"text-align:left\"><code>findByFirstnameContaining(String name)</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : name} (name as regex)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NotContaining</code> on String</td>\n<td style=\"text-align:left\"><code>findByFirstnameNotContaining(String name)</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : { \"$not\" : name}} (name as regex)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Containing</code> on Collection</td>\n<td style=\"text-align:left\"><code>findByAddressesContaining(Address address)</code></td>\n<td style=\"text-align:left\"><code>{\"addresses\" : { \"$in\" : address}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NotContaining</code> on Collection</td>\n<td style=\"text-align:left\"><code>findByAddressesNotContaining(Address address)</code></td>\n<td style=\"text-align:left\"><code>{\"addresses\" : { \"$not\" : { \"$in\" : address}}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Regex</code></td>\n<td style=\"text-align:left\"><code>findByFirstnameRegex(String firstname)</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : {\"$regex\" : firstname }}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>(No keyword)</code></td>\n<td style=\"text-align:left\"><code>findByFirstname(String name)</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : name}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Not</code></td>\n<td style=\"text-align:left\"><code>findByFirstnameNot(String name)</code></td>\n<td style=\"text-align:left\"><code>{\"firstname\" : {\"$ne\" : name}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Near</code></td>\n<td style=\"text-align:left\"><code>findByLocationNear(Point point)</code></td>\n<td style=\"text-align:left\"><code>{\"location\" : {\"$near\" : [x,y]}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Near</code></td>\n<td style=\"text-align:left\"><code>findByLocationNear(Point point, Distance max)</code></td>\n<td style=\"text-align:left\"><code>{\"location\" : {\"$near\" : [x,y], \"$maxDistance\" : max}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Near</code></td>\n<td style=\"text-align:left\"><code>findByLocationNear(Point point, Distance min, Distance max)</code></td>\n<td style=\"text-align:left\"><code>{\"location\" : {\"$near\" : [x,y], \"$minDistance\" : min, \"$maxDistance\" : max}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Within</code></td>\n<td style=\"text-align:left\"><code>findByLocationWithin(Circle circle)</code></td>\n<td style=\"text-align:left\"><code>{\"location\" : {\"$geoWithin\" : {\"$center\" : [ [x, y], distance]}}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Within</code></td>\n<td style=\"text-align:left\"><code>findByLocationWithin(Box box)</code></td>\n<td style=\"text-align:left\"><code>{\"location\" : {\"$geoWithin\" : {\"$box\" : [ [x1, y1], x2, y2]}}}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IsTrue</code>, <code>True</code></td>\n<td style=\"text-align:left\"><code>findByActiveIsTrue()</code></td>\n<td style=\"text-align:left\"><code>{\"active\" : true}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IsFalse</code>, <code>False</code></td>\n<td style=\"text-align:left\"><code>findByActiveIsFalse()</code></td>\n<td style=\"text-align:left\"><code>{\"active\" : false}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Exists</code></td>\n<td style=\"text-align:left\"><code>findByLocationExists(boolean exists)</code></td>\n<td style=\"text-align:left\"><code>{\"location\" : {\"$exists\" : exists }}</code></td>\n</tr>\n</tbody>\n</table>\n<h4> 删除方法</h4>\n<p>可以返回列表或者删除的数</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919094333237.png\" alt=\"image-20220919094333237\" loading=\"lazy\"></p>\n<h3> <mark>Repository query keywords</mark></h3>\n<p>Spring data repository 查询派生机制通常支持的关键字</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Logical keyword</th>\n<th style=\"text-align:left\">Keyword expressions</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>AND</code></td>\n<td style=\"text-align:left\"><code>And</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>OR</code></td>\n<td style=\"text-align:left\"><code>Or</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>AFTER</code></td>\n<td style=\"text-align:left\"><code>After</code>, <code>IsAfter</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BEFORE</code></td>\n<td style=\"text-align:left\"><code>Before</code>, <code>IsBefore</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>CONTAINING</code></td>\n<td style=\"text-align:left\"><code>Containing</code>, <code>IsContaining</code>, <code>Contains</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BETWEEN</code></td>\n<td style=\"text-align:left\"><code>Between</code>, <code>IsBetween</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ENDING_WITH</code></td>\n<td style=\"text-align:left\"><code>EndingWith</code>, <code>IsEndingWith</code>, <code>EndsWith</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>EXISTS</code></td>\n<td style=\"text-align:left\"><code>Exists</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FALSE</code></td>\n<td style=\"text-align:left\"><code>False</code>, <code>IsFalse</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>GREATER_THAN</code></td>\n<td style=\"text-align:left\"><code>GreaterThan</code>, <code>IsGreaterThan</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>GREATER_THAN_EQUALS</code></td>\n<td style=\"text-align:left\"><code>GreaterThanEqual</code>, <code>IsGreaterThanEqual</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IN</code></td>\n<td style=\"text-align:left\"><code>In</code>, <code>IsIn</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IS</code></td>\n<td style=\"text-align:left\"><code>Is</code>, <code>Equals</code>, (or no keyword)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IS_EMPTY</code></td>\n<td style=\"text-align:left\"><code>IsEmpty</code>, <code>Empty</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IS_NOT_EMPTY</code></td>\n<td style=\"text-align:left\"><code>IsNotEmpty</code>, <code>NotEmpty</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IS_NOT_NULL</code></td>\n<td style=\"text-align:left\"><code>NotNull</code>, <code>IsNotNull</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>IS_NULL</code></td>\n<td style=\"text-align:left\"><code>Null</code>, <code>IsNull</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>LESS_THAN</code></td>\n<td style=\"text-align:left\"><code>LessThan</code>, <code>IsLessThan</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>LESS_THAN_EQUAL</code></td>\n<td style=\"text-align:left\"><code>LessThanEqual</code>, <code>IsLessThanEqual</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>LIKE</code></td>\n<td style=\"text-align:left\"><code>Like</code>, <code>IsLike</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NEAR</code></td>\n<td style=\"text-align:left\"><code>Near</code>, <code>IsNear</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NOT</code></td>\n<td style=\"text-align:left\"><code>Not</code>, <code>IsNot</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NOT_IN</code></td>\n<td style=\"text-align:left\"><code>NotIn</code>, <code>IsNotIn</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NOT_LIKE</code></td>\n<td style=\"text-align:left\"><code>NotLike</code>, <code>IsNotLike</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>REGEX</code></td>\n<td style=\"text-align:left\"><code>Regex</code>, <code>MatchesRegex</code>, <code>Matches</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>STARTING_WITH</code></td>\n<td style=\"text-align:left\"><code>StartingWith</code>, <code>IsStartingWith</code>, <code>StartsWith</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>TRUE</code></td>\n<td style=\"text-align:left\"><code>True</code>, <code>IsTrue</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>WITHIN</code></td>\n<td style=\"text-align:left\"><code>Within</code>, <code>IsWithin</code></td>\n</tr>\n</tbody>\n</table>\n<h3> Example类</h3>\n<p><a href=\"https://blog.csdn.net/weixin_41326813/article/details/108708712\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/weixin_41326813/article/details/108708712</a></p>\n<p>Example用来模糊搜索</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> 问题讨论</h1>\n<blockquote>\n<p>问题1：能否通过mongoTemplate只查询某个字段</p>\n</blockquote>\n<p>能。可以通过mongoTemplate的BasicQuery的构造方法封装查询条件、显示字段进行查询，构造函数API如下：</p>\n<p><strong>BasicQuery 类：自定义查询实现，从任意JSON查询字符串设置基本查询。</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>本质上是<mark>通过JSON查询</mark>，所以以下直接用<mark>JSON格式</mark>封装查询条件和显示字段</p>\n<blockquote>\n<p>问题2：当文档的某字段数据量大的情况下，只查询该字段和查询该文档的效率哪个高？</p>\n</blockquote>\n<h2> 查出一条文档指定字段 JSON</h2>\n<p>测试在SpringBoot 2.7.3 版本，引入spring-boot-starter-data-mongodb依赖进行</p>\n<p><strong>实体类User</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>测试类</strong>MongoTemplateTests通过构造注入mongoTemplate实例对象，测试方法如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>执行结果：</strong></p>\n<p>为避免控制台输出的影响，对比运行时注释掉第8行输出语句</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 查出一条文档指定字段 query.field</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 查出一条文档</h2>\n<p>对比同样查询条件、查出该条文档数据（不去筛选字段）</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>查询一条文档的指定字段  JSON格式\t\t \t\t\t耗时 <strong>667</strong> ms</p>\n<p>查询一条文档的指定字段  query.field格式\t\t 耗时 <strong>656</strong> ms</p>\n<p>查询一条文档 \t\t\t\t\t     \t\t\t\t\t\t\t \t\t\t耗时 <strong>571</strong> ms</p>\n<p>通过mongoTemplate只查询文档的某个字段的效率并不如查询整条数据高，查询指定字段的方法实际上只是控制了字段的显示和关闭</p>\n",
      "image": "https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214114636572.png",
      "date_published": "2022-08-08T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "database"
      ]
    },
    {
      "title": "Docker",
      "url": "https://mister-hope.github.io/tech/dev_ops/docker.html",
      "id": "https://mister-hope.github.io/tech/dev_ops/docker.html",
      "summary": "教程网址 命令大全 https://blog.csdn.net/anqixiang/article/details/114001509 Docker中文文档https://vuepress.mirror.docker-practice.com/basic_concept/container/",
      "content_html": "<h2> 教程网址</h2>\n<p>命令大全 <a href=\"https://blog.csdn.net/anqixiang/article/details/114001509\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/anqixiang/article/details/114001509</a></p>\n<p>Docker中文文档<a href=\"https://vuepress.mirror.docker-practice.com/basic_concept/container/\" target=\"_blank\" rel=\"noopener noreferrer\">https://vuepress.mirror.docker-practice.com/basic_concept/container/</a></p>\n<h2> 1.什么是docker</h2>\n<p>Docker 是使用最广泛的开源容器引擎，它彻底释放了计算虚拟化的威力，极大提高了应用的运行效率，降低了云计算资源供应的成本！ 使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！</p>\n<p>Docker 使用 <strong>Google 公司推出的 Go 语言</strong> 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。<strong>由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</strong></p>\n<p><mark>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</mark></p>\n<h2> 2.为什么用docker</h2>\n<p>① 更高效的利用系统资源：由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。</p>\n<p>② 更快速的启动时间：Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。</p>\n<p>③ 一致的运行环境：Docker 的镜像提供了除内核外完整的运行时环境，<strong>确保了应用运行环境一致性</strong>。</p>\n<p>④ 持续交付和部署：使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。一次创建或配置，可以在任意地方正常运行。</p>\n<p>⑤ 更轻松的迁移：Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。</p>\n<h2> 3.docker隔离原理</h2>\n<p><a href=\"https://zhuanlan.zhihu.com/p/519499603\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/519499603</a></p>\n<p><mark>容器是一种对进程进行隔离的运行环境</mark></p>\n<p>一个容器进程本质上是一个运行在沙盒中的隔离进程，由Linux系统本身负责隔离，Docker只是提供了一系列工具，帮助我们设置好隔离环境后，启动这个进程。</p>\n<h3> 1.进程隔离</h3>\n<p>最基本的隔离就是进程之间看不到彼此，这是由<strong>Linux的Cgroup机制</strong>实现的。进程隔离的结果就是<strong>以隔离方式启动的进程看到的自身进程ID总是1，且看不到系统的其他进程</strong>。</p>\n<h3> 2.文件系统隔离</h3>\n<p>Docker利用<strong>Linux的mount机制</strong>，<strong>给每个隔离进程挂载了一个虚拟的文件系统</strong>，使得一个隔离进程只能访问这个虚拟的文件系统，无法看到系统真实的文件系统。至于这个虚拟的文件系统应该长什么样，这就是制作Docker镜像要考虑的问题。比如我们的Python程序要正常运行，需要一个Python3解释器，需要把用到的第三方库如<code>psutil</code>引入进来，这些复杂的工作被简化为一个<code>Dockerfile</code>，再由Docker把这些运行时的依赖打包，就形成了Docker镜像。我们可以把一个Docker镜像看作一个zip包，每启动一个进程，Docker都会自动解压zip包，把它变成一个虚拟的文件系统。</p>\n<h3> 3.网络协议栈隔离</h3>\n<p>我们举个例子：在Docker中运行<code>docker run redis:latest</code>，然后在宿主机上写个程序连接<code>127.0.0.1:6379</code>，是无法连接到Redis的，因为Redis虽然监听<code>127.0.0.1:6379</code>这个端口，但Linux可以为进程隔离网络，Docker默认启动的Redis进程拥有自己的网络名字空间，与宿主机不同：</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201501619.webp\" alt=\"img\" loading=\"lazy\"></p>\n<p>要让宿主机访问到Redis，可以用<code>-p 6379:6379</code>把Redis进程的端口号映射到宿主机，从而在宿主机上访问Redis：</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201501660.webp\" alt=\"img\" loading=\"lazy\"></p>\n<p>因此，在Linux的网络名字空间隔离下，Redis进程和宿主机进程看到的IP地址<code>127.0.0.1</code>表面上一样，但实际上是不同的网络接口。</p>\n<p>我们再看一个更复杂的例子。如果我们要运行ZooKeeper和Kafka，先启动ZooKeeper：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>再启动Kafka，发现Kafka是无法连接ZooKeeper的，原因是，Kafka试图连接的<code>127.0.0.1:2181</code>在它自己的网络接口上并不存在：</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201501077.webp\" alt=\"img\" loading=\"lazy\"></p>\n<p>必须连接到ZooKeeper的<code>IP:2181</code>或者宿主机的<code>IP:2181</code>。直接指定IP并不是一个好的方式，我们应该利用Docker Compose，把ZooKeeper和Kafka运行在同一个网络名字空间里，并通过<code>zookeeper:2181</code>来访问ZooKeeper端口，让Docker自动把zookeeper名字解析为动态分配的IP地址。</p>\n<h2> 4.docker组成</h2>\n<h3> 镜像(Images)</h3>\n<p>Docker 镜像是一个特殊的文件系统，除了<strong>提供容器运行时所需的程序、库、资源、配置</strong>等文件外，还包含了一些<strong>为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）</strong>。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<p>Docker 设计时，充分利用 Union FS 的技术，将其设计为分层存储的架构，Docker 镜像由多层文件系统联合组成。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p>\n<hr>\n<h4> docker的镜像原理</h4>\n<h4> 镜像是什么？</h4>\n<blockquote>\n<p>镜像是一种轻量级的，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时所需的库、环境变量和配置文件。</p>\n</blockquote>\n<h4> 为什么一个镜像会那么大？</h4>\n<p><code>镜像就是花卷</code></p>\n<ul>\n<li>\n<p>UnionFS（联合文件系统）:</p>\n<p>Union文件系统是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。这种文件系统特性:就是一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 。</p>\n</li>\n</ul>\n<h4> Docker镜像原理</h4>\n<blockquote>\n<p><code>docker的镜像实际是由一层一层的文件系统组成。</code></p>\n</blockquote>\n<ul>\n<li>\n<p>bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统。在docker镜像的最底层就是bootfs。这一层与Linux/Unix 系统是一样的，包含boot加载器（bootloader）和内核（kernel）。当boot加载完,后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时会卸载bootfs。</p>\n</li>\n<li>\n<p>rootfs（root file system），在bootfs之上，包含的就是典型的linux系统中的/dev，/proc，/bin，/etc等标准的目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu/CentOS等等。</p>\n</li>\n<li>\n<p>我们平时安装进虚拟机的centos都有1到几个GB，为什么docker这里才200MB？对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令，工具，和程序库就可以了，因为底层直接使用Host的Kernal，自己只需要提供rootfs就行了。由此可见不同的linux发行版，他们的bootfs是一致的，rootfs会有差别。<strong>因此不同的发行版可以共用bootfs。</strong></p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201501323.png\" alt=\"image-20221228104808238\" loading=\"lazy\"></p>\n<h4> 为什么docker镜像要采用这种分层结构呢?</h4>\n<blockquote>\n<p><code>最大的一个好处就是资源共享</code></p>\n</blockquote>\n<p>比如：<strong>有多个镜像都是从相同的base镜像构建而来的，那么宿主机只需在磁盘中保存一份base镜像。同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享</strong>。Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为容器层，容器层之下都叫镜像层。</p>\n<h3> 容器(Container)</h3>\n<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，<strong>镜像是静态的定义，容器是镜像运行时的实体</strong>。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p><strong>容器的实质是进程</strong>，但与直接在宿主执行的进程不同，<strong>容器进程运行于属于自己的独立的 命名空间</strong>。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p>\n<p><mark>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层</mark>，我们可以称这个为容器运行时读写而准备的存储层为<mark>容器存储层</mark>。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n按照 Docker 最佳实践的要求，<strong>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化</strong>。所有的文件写入操作，都应该<mark>使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层</mark>，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>\n<p><strong>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</strong></p>\n<h3> 镜像仓库(Registry)</h3>\n<p>镜像仓库是一个集中的存储、分发镜像的服务。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。\n通常，<strong>一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本</strong>。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt; </code>的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p>\n<p>最常使用的 Registry 公开服务是官方的 Docker Hub，这也是默认的 Registry，并拥有大量的高质量的官方镜像。用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。</p>\n<h2> 5.全局命令</h2>\n<p><code>service docker start</code>：wsl2启动docker： （必须在root下！ sudo su -）</p>\n<p><code>docker -v</code> ：查看docker版本</p>\n<p><code>docker info</code> : 显示 Docker 系统信息，包括镜像和容器数</p>\n<p><code>docker login --username=zhangb-l@bimcop registry.cn-beijing.aliyuncs.com</code>  设置登录公司镜像</p>\n<p>密码  glodonUser123!@#</p>\n<h2> 6.镜像命令</h2>\n<p><code>docker image ls tomcat</code> 根据仓库名列出部分镜像</p>\n<p><code>docker images</code> 查看本地所有镜像</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>docker images -q</code> 查看本地镜像的所有镜像id</p>\n<p><code>docker load -i nginx.tar</code>\t      \t 导入nginx镜像，-i就是input</p>\n<p><code>docker load &lt; nginx.tar</code>\t      \t\t导入nginx镜像</p>\n<p><code>docker login -u 用户名 -p密码 镜像仓库地址</code>\t\t 登录镜像仓库</p>\n<p><code>docker push 镜像仓库地址/镜像名:Tag</code>   \t推送镜像到远程镜像仓库</p>\n<p><code>docker rmi 镜像名[:Tag]</code>\t删除镜像</p>\n<p><code>docker rmi 镜像ID</code>\t\t          删除镜像</p>\n<p><code>docker rmi -f 镜像ID</code>\t\t   强制删除镜像（如果容器已经启动则需先停止后方可删除）</p>\n<p><code>docker rmi -f $(docker images -aq)</code>\t\t批量删除所有镜像（$后作为参数传递）</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>docker save 镜像名:Tag &gt; 镜像名-tag.tar</code>\t\t\t把镜像打成一个tar包（推荐tar包命名为镜像名-tag），-o代表output</p>\n<p><code>docker save 镜像名:Tag -o 镜像名-tag.tar</code>\t\t\t把镜像打成一个tar包</p>\n<p><code>docker search 镜像名[:Tag]</code>  搜索镜像，默认从dockerhub搜索</p>\n<p><code>docker system df</code>查看镜像、容器、数据卷所占用的空间</p>\n<p><code>docker system prune -a</code>\t\t               \t\t\t删除没有任何容器使用的镜像、构建缓存</p>\n<p><code>docker pull 镜像名[:Tag]</code> 下载镜像；不指定Tag，默认为latest</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>docker tag 镜像名:Tag</code> \t                        \t\t给镜像打Tag</p>\n<h2> 7.容器命令</h2>\n<ul>\n<li>每一个容器都是一个精简版的linux系统，里面运行着一个服务</li>\n</ul>\n<hr>\n<p><code>docker ps</code> 查看正在运行的容器</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>docker ps -a</code> 查看所有容器</p>\n<p><code>docker ps -q</code> 返回正在运行容器id</p>\n<p><code>docker ps -aq</code> 返回所有容器id</p>\n<p><code>docker run -d -p 8081:8080 --name=tomcat_ruyb tomcat:8.0</code> 启动容器</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>docker stop 容器名或容器id</code> 正常停止容器运行</p>\n<p><code>docker kill 容器名或容器id</code> 立即停止容器运行</p>\n<p><code>docker rm 容器名或容器id</code>\t\t      删除容器</p>\n<p><code>docker rm -f 容器名</code>\t\t\t\t\t      强制删除容器，可以删除运行中的容器</p>\n<p><code>docker exec -it 容器ID bash</code>\t进入容器，并分配一个新的终端</p>\n<p><code>docker top 容器名或容器id</code>          查看容器内的进程</p>\n<p><code>docker inspect 容器名或容器id</code>  查看容器细节（WorkingDir工作目录、ip地址）</p>\n<p><code>exit</code>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      退出容器</p>\n<p><code>docker cp /etc/hosts 容器名或容器id:/opt</code>\t 拷贝宿主机的hosts文件到容器的/opt目录下</p>\n<p><code>docker cp 容器名或容器id:/opt/a.sh /tmp</code>\t\t拷贝容器的a.sh文件到宿主机的/tmp路径下</p>\n<p><code>docker logs 容器名</code>          查看容器日志</p>\n<p><code>docker logs -f 容器名</code>   实时查看容器日志</p>\n<p><code>docker commit 容器名或容器id 镜像名:版本</code> 将当前容器打包成一个新的镜像</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 8.数据卷</h2>\n<h3> 基础</h3>\n<p>作用：同来实现<code>容器中数据</code> 和 <code>宿主机中数据</code>进行<mark>文件或目录</mark>的**映射（同步）**的；<strong>持久化容器数据到宿主机上</strong></p>\n<p>注意：数据卷使用必须在<strong>容器首次启动时设置</strong></p>\n<p>应用场景：容器中的服务需要存储数据的，就要使用到数据卷；这样即使docker容器被删除了，那么它里面的<strong>数据还存在于数据卷</strong>中，这样再启动一个容器将数据卷中的数据映射到新容器中，数据也就恢复了。推荐生产一定要使用数据卷！</p>\n<blockquote>\n<p>1.使用绝对路径设置数据卷</p>\n</blockquote>\n<ul>\n<li>\n<p>docker run -v 宿主机绝对路径1:容器内路径1  -v <code>宿主机绝对路径2:容器内路径2</code>  镜像</p>\n<p>注意: 这种方式会<strong>将容器路径的原始内容全部清空,始终以宿主机路径为主</strong></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>ro选项 只能用在容器的路径后面，ro表示宿主机的目录改变只能影响到容器，容器不能影响到宿主机</p>\n</li>\n</ul>\n<blockquote>\n<p>2.使用别名创建</p>\n</blockquote>\n<ul>\n<li>注意：这种创建数据卷的方式会<strong>保留原有容器路径下的内容</strong></li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>aaaa是docker在宿主机自建的目录，docker自己会创建这个别名并维护</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h3> 高级</h3>\n<p>别名代表一个docker自身维护的数据卷</p>\n<p><code>docker volume ls</code>：查看所有docker维护数据卷</p>\n<p><code>docker inspect 数据卷别名</code> 查看数据卷详细内容</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>docker volume rm 数据卷别名</code>删除一个数据卷</p>\n<p><code>docker volume create 数据卷别名</code>创建一个数据卷</p>\n<h2> 9.网络配置</h2>\n<h3> 默认网桥</h3>\n<p>容器间通信：容器之间不可避免存在网络相互通信。</p>\n<p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> <strong>虚拟网桥</strong>，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201502692.png\" alt=\"image-20221228145803100\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>通过宿主机<code>ip a</code>可以查看到</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201502704.png\" alt=\"image-20221228145136509\" loading=\"lazy\"></p>\n</li>\n</ul>\n<p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href=\"https://tools.ietf.org/html/rfc1918\" target=\"_blank\" rel=\"noopener noreferrer\">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>\n<p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络（<strong>不需要做额外的处理</strong>）</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201502019.png\" alt=\"image-20221228144427212\" loading=\"lazy\"></p>\n<blockquote>\n<p>总结</p>\n</blockquote>\n<p>1.默认docker在创建容器时将所有容器都连接到docker0网桥上，默认在docker0网桥的容器都可以使用<strong>容器内ip地址</strong>进行通信</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.默认docker创建容器时将所有容器都连接到docker0网桥上，默认在docker0网桥的容器都可以使用<strong>容器名称作为容器ip</strong>进行通信，但是注意：使用容器名称<strong>必须自定义网桥</strong>不能使用默认dockero</p>\n<hr>\n<h3> 自定义网桥</h3>\n<p>1.docker网桥类型，有三种bridge、host、none</p>\n<ul>\n<li>允许连接到同一网桥网络的容器进行通信，同时提供与未连接到该网桥网络的容器的隔离</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.查看网络 <code>docker network ls</code></p>\n<p>3.查看某网络细节<code>docker network inspect 网络名称</code></p>\n<ul>\n<li>在自定义网络创建容器前</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>在自定义网络创建容器两个容器后：</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>4.删除一个网络</p>\n<p><code>docker network rm 网络名称</code></p>\n<p><code>docker network prune</code> 删除所有未被用到网络</p>\n<p><strong>5.创建自定义网桥</strong></p>\n<p><code>docker network create 网络名称</code></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>自定义网桥后就可以通过名称来访问容器</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>6.运行多个容器在指定网络中</strong></p>\n<p>a.启动容器时明确指定容器使用那个网络</p>\n<p><code>docker run -d --network 网络名称</code></p>\n<p>b.启动之后容器加入到某个网络中</p>\n<p><code>docker network connect 网络名 容器id(name)</code></p>\n<h2> 10.Dockerfile</h2>\n<blockquote>\n<p>注意D大写f小写，是Dockerfile而不是dockerFile</p>\n</blockquote>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201502003.png\" alt=\"image-20230108154217367\" loading=\"lazy\"></p>\n<p>1.概念：Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。</p>\n<p>2.作用：<strong>用来构建docker镜像的构建文件</strong>。</p>\n<p>3.如何构建自己的镜像</p>\n<p>​\ta.在指定位置创建Dockerfile文件。编写dockerfile相关语法</p>\n<p>​\tb.通过Dockerfile构建镜像。<code>docker build -t aa:1.0 . </code>(.用来指定Dockerfile文件所在位置)</p>\n<h3> 构建镜像流程</h3>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201502335.png\" alt=\"image-20230108154417283\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>执行build命令时，会将<strong>Dockerfile的上下文</strong>目录中<code>所有文件</code>都发给Server引擎；也可以写<code>.dockerIgnore</code>文件去选择发送哪些文件；</p>\n</li>\n<li>\n<p>Dockerfile要求一行只有存在一条完整命令；</p>\n</li>\n<li>\n<p>Server引擎会根据第一行命令，构建出一个临时镜像；第二天指令，在第一个临时镜像再构建一个临时镜像，最终生成一个最终镜像（这个镜像Id就是通过docker images看到的）；</p>\n</li>\n<li>\n<p>Docker使用缓存存下这些临时镜像，方便后续相同命令直接获取；</p>\n</li>\n</ul>\n<h3> Dockerfile指令</h3>\n<p>官方说明:<a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/reference/builder/</a></p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>保留字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>FROM</strong></td>\n<td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td>\n</tr>\n<tr>\n<td>MAINTAINER</td>\n<td>镜像维护者的姓名和邮箱地址</td>\n</tr>\n<tr>\n<td><strong>RUN</strong></td>\n<td><strong>构建镜像时需要运行的指令</strong></td>\n</tr>\n<tr>\n<td><strong>EXPOSE</strong></td>\n<td><strong>当前容器对外暴露出的端口号</strong></td>\n</tr>\n<tr>\n<td><strong>WORKDIR</strong></td>\n<td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td>\n</tr>\n<tr>\n<td><strong>ENV</strong></td>\n<td><strong>用来在构建镜像过程中设置环境变量</strong></td>\n</tr>\n<tr>\n<td><strong>ADD</strong></td>\n<td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td>\n</tr>\n<tr>\n<td><strong>COPY</strong></td>\n<td><strong>类似于ADD，拷贝文件和目录到镜像中<br>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td>\n</tr>\n<tr>\n<td><strong>VOLUME</strong></td>\n<td><strong>容器数据卷，用于数据保存和持久化工作</strong></td>\n</tr>\n<tr>\n<td><strong>CMD</strong></td>\n<td><strong>指定一个容器启动时要运行的命令<br>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td>\n</tr>\n<tr>\n<td><strong>ENTRYPOINT</strong></td>\n<td><strong>指定一个容器启动时要运行的命令<br>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td>\n</tr>\n</tbody>\n</table>\n<h3> 构建过程</h3>\n<p><code>docker build -t 镜像名称:Tag .</code>  构建镜像，指定名称和Tag</p>\n<h4> 1.创建Dockerfile文件</h4>\n<p>建议创建一个单独文件夹，创建一个<code>Dockerfile</code>文件，去编写指令</p>\n<p><code>mkdir docker</code></p>\n<p><code>cd docker</code></p>\n<p><code>mv Dockerfile docker/</code></p>\n<p><code>vim Dockerfile</code></p>\n<p>添加指令<code>FROM centos:latest</code>，保存退出</p>\n<h4> 2.构建自己的镜像</h4>\n<p><code>docker build -t ruybos:01 .</code>  注意一定要加上最后的.；</p>\n<p>可以看到，因为Dockerfile中只有一个FROM指令，所以它的最终镜像id和centos一样；</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.给镜像安装vim</h4>\n<p>RUN命令 在上一步的镜像上执行一些操作</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>添加指令<code>RUN yum install -y vim</code></p>\n<p>构建镜像<code>docker build -t ruybos:02 .</code></p>\n<p>创建容器，验证</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 4.Expose</h4>\n<p>注意：<strong>仅仅是声明</strong></p>\n<p>用来指定构建的镜像在运行为容器时对外暴露的端口</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 5.WORKDIR</h4>\n<p>用来指定构建的镜像在运行为容器时，进入的目录</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 6.ADD、COPY</h4>\n<ul>\n<li>\n<p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p>\n</li>\n<li>\n<p>语法:</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<ul>\n<li>ADD比COPY多的功能是 可以通过<code>ADD url</code>自动下载文件，添加到镜像的<code>WORKDIR</code>目录下</li>\n</ul>\n<h4> 7.ENV</h4>\n<p>设置环境变量，方便维护</p>\n<ul>\n<li>指定BASE_PATH常量</li>\n<li>倒数第二个 <code>WORKDIR tomcat-9.0.48</code> 是进入tomcat-9.04.48目录，创建了aa.txt文件</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201502584.png\" alt=\"image-20230116151253167\" loading=\"lazy\"></p>\n<h4> 8.VOLUME</h4>\n<p>注意：<strong>仅仅是声明</strong></p>\n<p>定义容器运行时可以挂在到宿主机的目录</p>\n<h4> 9.CMD和ENTRYPOINT</h4>\n<p>语法1：直接命令方式</p>\n<p><code>java -jar ems.jar</code></p>\n<p>语法2：json数组方式 <strong>推荐</strong></p>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201501619.webp",
      "date_published": "2023-03-27T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "devops"
      ]
    },
    {
      "title": "React",
      "url": "https://mister-hope.github.io/tech/web_framework/react.html",
      "id": "https://mister-hope.github.io/tech/web_framework/react.html",
      "summary": "Hooks 1.useEffect是每次组件render完后判断依赖并执行 依赖项为[]，仅第一次render后执行 依赖项数组有值，第一次render后以及之后的render完依赖项发生变化了才执行 补充知识 1.解构写法 const {key1} = this.refs；key1.value 等同于 this.refs.key1.value ；使用简便，写法简单",
      "content_html": "<h1> Hooks</h1>\n<p>1.useEffect是每次组件<strong>render完后</strong><mark>判断依赖</mark>并执行</p>\n<ul>\n<li>依赖项为[]，仅第一次render后执行</li>\n<li>依赖项数组有值，第一次render后以及之后的render完依赖项发生变化了才执行</li>\n</ul>\n<ol start=\"2\">\n<li></li>\n</ol>\n<h1> 补充知识</h1>\n<p>1.解构写法  const {key1} = this.refs；key1.value   等同于  this.refs.key1.value ；使用简便，写法简单</p>\n<p>2.回调函数没有this，里面如果用到了this要去函数外层函数中找；</p>\n<p>3.模板字符串：</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>4.event传递</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>5.回调函数调用</p>\n<p><strong>saveFormData是一个函数时，</strong></p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>saveFormData返回的值是一个函数时，</strong></p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>本质上就是要给onClick事件的回调 给到一个<strong>函数</strong>！！</p>\n<p>6.如果A类继承了B类，且A类中写了构造器，那么A类构造器中的<strong>super是必须要调用</strong>的</p>\n<p>7.类中所定义的方法，都放在了类的原型对象上，供实例去使用</p>\n<p>8.展开运算符</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> React视频学习</h1>\n<h2> jsx语法</h2>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 组件定义</h2>\n<h3> 函数式组件</h3>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 类式组件</h3>\n<p>render中的this是组件的实例对象</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> state</h2>\n<h3> 理解</h3>\n<ol>\n<li>\n<p>state是<strong>组件对象</strong>最重要的属性, 值是对象(可以包含多个key-value的组合)</p>\n</li>\n<li>\n<p><mark>组件被称为\"状态机\",，通过更新组件的state来更新对应的页面显示(重新渲染组件)</mark></p>\n</li>\n</ol>\n<p><strong>注意点</strong></p>\n<ol>\n<li>组件中render方法中的this为组件实例对象</li>\n<li>组件自定义的方法中this为undefined，如何解决？\na) 强制绑定this: 通过函数对象的bind()\nb) 箭头函数</li>\n<li>状态数据，不能直接修改或更新</li>\n</ol>\n<h3> 写法</h3>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 简洁写法</h3>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> props</h2>\n<h3> 理解</h3>\n<ol>\n<li>\n<p>每个<strong>组件对象</strong>都会有props(properties的简写)属性</p>\n</li>\n<li>\n<p>组件标签的所有属性都保存在props中</p>\n</li>\n</ol>\n<p><strong>注意点</strong></p>\n<ol>\n<li>\n<p>通过标签属性从组件外向组件内传递变化的数据</p>\n</li>\n<li>\n<p>注意: 组件内部不要修改props数据（prop）</p>\n</li>\n</ol>\n<h3> 写法</h3>\n<p>props基本使用、对props限制</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 简洁写法</h3>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> refs</h2>\n<h3> 理解</h3>\n<ul>\n<li>\n<p>refs理解为打标识，组件内的标签可以定义ref属性来标识自己，<strong>方便别人拿到该ref所在的节点或节点相关值</strong></p>\n</li>\n<li>\n<p>refs为React组件实例对象的主属性，用来收集ref</p>\n</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>key：value 形式，key是自定义的ref名称，value是DOM节点</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201347852.png\" alt=\"image-20230306101554822\" loading=\"lazy\"></p>\n<h3> 写法</h3>\n<h4> 字符串类型</h4>\n<p>字符串类型  refs 存在效率问题，react不推荐使用</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 回调函数类型</h4>\n<p>直接将ref所在的<code>标签节点</code>作为回调函数的参数</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>refs回调函数类型调用次数，小注意点：<a href=\"https://react.docschina.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://react.docschina.org/docs/refs-and-the-dom.html</a></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> createRef类型 React推荐</h4>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>key是current，value是ref所在的节点</strong></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201122386.png\" alt=\"image-20230320112208176\" loading=\"lazy\"></p>\n<h2> 事件处理</h2>\n<p>(1).通过onXxx属性指定事件处理函数(注意大小写)</p>\n<p>​    a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 —————— 为了更好的兼容性</p>\n<p>​    b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ————————为了的高效</p>\n<p>(2).通过event.target得到发生事件的DOM元素对象 ——————————不要过度使用ref</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 非受控组件</h2>\n<p>概念：所有输入类（单选，多选，输入框）的DOM，在组件内都是现用现取</p>\n<p>理解：通过ref将节点存储，然后使用的时候通过.value取到值</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 受控组件  推荐</h2>\n<p>理解：所有输入类（单选，多选，输入框）的DOM，随着输入，将数据维护到状态state中，等需要用的时候直接从状态中取出来。  一句话，<strong>随着输入要维护状态就是受控</strong></p>\n<p>因为这种写法没有ref，所以推荐受控组件的写法</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 高阶函数</h2>\n<p>一句话：<strong>接收一个函数或者返回一个函数</strong></p>\n<p>高阶函数：如果一个函数符合下面2个规范中的<code>任何一个</code>，那该函数就是高阶函数。</p>\n\n<p>常见的高阶函数有：Promise、setTimeout、arr.map()等等</p>\n<h2> 函数柯里化</h2>\n<p>函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p>\n<p>一句话，<strong>应用</strong>了高阶函数（返回值是函数）的方式</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 生命周期</h2>\n<p>挂载 mount，卸载 unmount</p>\n<h3> 生命周期流程图--旧</h3>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201125661.png\" alt=\"image-20230320112542601\" loading=\"lazy\"></p>\n<p><strong>1.</strong> <strong>初始化阶段:</strong> 由ReactDOM.render()触发---初次渲染  组件初次挂载</p>\n<ol>\n<li>\n<p><code>constructor()</code></p>\n</li>\n<li>\n<p>componentWillMount()</p>\n</li>\n<li>\n<p>render()</p>\n</li>\n<li>\n<p>componentDidMount()              <strong>常用</strong>，一般做些初始化事，开启定时器、发送网络请求、订阅请求</p>\n</li>\n</ol>\n<p><strong>2.</strong> <strong>更新阶段:</strong> 由组件内部this.setSate()或父组件重新render触发</p>\n<ol>\n<li>\n<p>shouldComponentUpdate()   默认返回true，<strong>当返回false时，更新阶段在此终止</strong>    //控制组件更新的“阀门”</p>\n</li>\n<li>\n<p>componentWillUpdate()         //组件将要更新的钩子</p>\n</li>\n<li>\n<p>render()</p>\n</li>\n<li>\n<p>componentDidUpdate()          //组件更新完毕的钩子</p>\n</li>\n</ol>\n<p><strong>3.</strong> <strong>卸载组件:</strong> 由ReactDOM.unmountComponentAtNode()触发</p>\n<ol>\n<li>componentWillUnmount()       <strong>常用</strong>，一般做些收尾事，关闭定时器、取消订阅消息</li>\n</ol>\n<h3> 生命周期流程图--新</h3>\n<ol>\n<li>\n<p>初始化阶段: 由ReactDOM.render()触发---初次渲染\n1. constructor()\n2. getDerivedStateFromProps\n3. render()\n4. componentDidMount() ====&gt; 常用\n一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</p>\n</li>\n<li>\n<p>更新阶段: 由组件内部this.setSate()或父组件重新render触发\n1. getDerivedStateFromProps  //若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n\n</li>\n<li>\n<p>卸载组件: 由ReactDOM.unmountComponentAtNode()触发\n1. componentWillUnmount()  ====&gt; 常用\n一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</p>\n</li>\n</ol>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202310251037078.png\" alt=\"image-20230320112626982\" loading=\"lazy\"></p>\n<h1> React中文官网</h1>\n<h2> 1.描述UI</h2>\n<h3> 1.1 第一个组件</h3>\n<ul>\n<li>\n<p>组件定义：React 允许你将标签、CSS 和 JavaScript 组合成自定义“组件”，即 <strong>应用程序中可复用的 UI 元素</strong></p>\n</li>\n<li>\n<p><strong>React 组件是常规的 JavaScript 函数</strong>，但 <strong>组件的名称必须以大写字母开头</strong></p>\n</li>\n</ul>\n<h3> 1.3 使用JSX书写标签语言</h3>\n<ul>\n<li>\n<p>JSX：将标签引入 JavaScript。<strong>在 React 中，渲染逻辑和标签共同存在于同一个地方——组件</strong></p>\n</li>\n<li>\n<p>每个 React 组件都是一个 JavaScript <strong>函数，它会返回一些标签</strong>，React 会将这些标签渲染到浏览器上。React 组件使用一种被称为 JSX 的语法扩展来描述这些标签</p>\n</li>\n</ul>\n<blockquote>\n<p>JSX规则</p>\n</blockquote>\n<p>规则1：只能返回一个根元素。如果想要在一个组件中包含多个元素，需要用<strong>一个父标签</strong>把它们包裹起来</p>\n<p>规则2：所有标签必须闭合。</p>\n<p>规则3：使用驼峰式命名法给属性命名。如<strong>className</strong></p>\n<h3> 1.4 JSX中通过大括号使用javascript</h3>\n<ul>\n<li>使用引号传递字符串</li>\n</ul>\n<p>当你想把一个字符串属性传递给 JSX 时，把它放到单引号或双引号中；</p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>请注意 <code>className=\"avatar\"</code> 和 <code>src={avatar}</code> 之间的区别，<code>className=\"avatar\"</code> 指定了一个就叫 <code>\"avatar\"</code> 的使图片在样式上变圆的 CSS 类名，而 <code>src={avatar}</code> 这种写法会去读取 JavaScript 中 <code>avatar</code> 这个变量的值。这是因为大括号可以使你直接在标签中使用 JavaScript！</p>\n<ul>\n<li>\n<p><mark>大括号内的任何 JavaScript 表达式都能正常运行</mark>；调用函数、引用变量、表达式计算</p>\n</li>\n<li>\n<p>在 JSX 中，只能在以下两种场景中使用大括号：</p>\n<ol>\n<li>用作 JSX 标签内的<strong>文本</strong>：<code>&lt;h1&gt;{name}'s To Do List&lt;/h1&gt;</code> 是有效的，但是 <code>&lt;{tag}&gt;Gregorio Y. Zara's To Do List&lt;/{tag}&gt;</code> 无效。</li>\n<li>用作紧跟在 <code>=</code> 符号后的 <strong>属性</strong>：<code>src={avatar}</code> 会读取 <code>avatar</code> 变量，但是 <code>src=\"{avatar}\"</code> 只会传一个字符串 <code>{avatar}</code>。</li>\n</ol>\n</li>\n<li>\n<p>JSX 中传递对象。对象用{}表示，外面再包一个{}，就是双括号{</p>\n</li>\n</ul>\n<h3> 1.8 保持组件纯粹</h3>\n<ul>\n<li>一个组件必须是纯粹的，就意味着：\n<ul>\n<li><strong>只负责自己的任务。</strong> 它不会更改在该函数调用前就已存在的对象或变量。</li>\n<li><strong>输入相同，则输出相同。</strong> 给定相同的输入，组件应该总是返回相同的 JSX。</li>\n</ul>\n</li>\n<li>渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。</li>\n<li>你不应该改变组件用于渲染的任何输入。这包括 props、state 和 context。通过 “设置” state 来更新界面，而不要改变预先存在的对象。</li>\n<li>努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 <code>useEffect</code></li>\n<li>编写纯函数需要一些练习，但它充分释放了 React 范式的能力</li>\n</ul>\n<hr>\n<blockquote>\n<p>副作用定义：React 的渲染过程必须自始至终是纯粹的。组件应该只 <strong>返回</strong> 它们的 JSX，而不 <strong>改变</strong> 在渲染前，就已存在的任何对象或变量 — 这将会使它们变得不纯粹！</p>\n</blockquote>\n<ul>\n<li>反例：<strong>多次调用这个组件会产生不同的 JSX</strong>！</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>\n<p>纯函数<strong>不会改变</strong>函数作用域外的变量、或在函数调用前创建的对象——这会使函数变得不纯粹</p>\n</li>\n<li>\n<p>React 为何侧重于<strong>纯函数</strong>？</p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<hr>\n<p>反例1 ：渲染前<strong>产生了副作用（修改 DOM）</strong>，第4行都没有className这个玩意~</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>正例1：传递的是className，没有修改DOM</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>反例2：通过在接收到的 <code>stories</code> 数组（一个 prop！）上调用 <code>push</code> 方法，它正改变着一个在 <code>StoryTray</code> 渲染 <strong>之前</strong> 创建的对象；多次渲染后，stories都会不断增加元素，最后渲染的li标签越来越多</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>正例2： push 之前创建一个 <strong>新</strong> 数组（通过复制现有数组）：</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>记住数组上的哪些操作会修改原始数组、哪些不会，这非常有帮助。例如，<code>push</code>、<code>pop</code>、<code>reverse</code> 和 <code>sort</code> 会改变原始数组，但 <code>slice</code>、<code>filter</code> 和 <code>map</code> 则会创建一个新数组。</p>\n<h2> 2.添加交互</h2>\n<ul>\n<li>随时间变化的数据被称为状态（state）</li>\n</ul>\n<h3> 2.1 响应事件</h3>\n<ul>\n<li>\n<p>可以通过将函数作为 prop 传递给元素如 <code>&lt;button&gt;</code> 来处理事件</p>\n</li>\n<li>\n<p>事件处理函数在组件内部定义，所以它们<strong>可以访问 props</strong></p>\n</li>\n<li>\n<p>从<strong>子组件显式调用事件处理函数</strong> prop 是事件传播的另一种优秀替代方案</p>\n</li>\n<li>\n<p>事件处理函数接收一个 <strong>事件对象</strong> 作为唯一的参数。按照惯例，它通常被称为 <code>e</code> ，代表 “event”（事件）;</p>\n<p>这个事件对象还允许你阻止传播。<strong>如果你想阻止一个事件到达父组件</strong>，调用 <code>e.stopPropagation()</code></p>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h3> 2.2 State：组件的记忆</h3>\n<ul>\n<li>更改局部变量不会触发渲染，一个函数中定义的变量就是局部变量了</li>\n</ul>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>\n<p>在 React 中，<code>useState</code> 以及任何其他以“<code>use</code>”开头的函数都被称为 <strong>Hook</strong></p>\n</li>\n<li>\n<p><mark>Hook 是特殊的函数，只在 React[渲染时有效</mark></p>\n</li>\n<li>\n<p>Hooks ——以 <code>use</code> 开头的函数——只能在组件或自定义 Hook的<mark>最顶层调用</mark></p>\n</li>\n<li>\n<p>useState 的唯一参数是 state 变量的初始值</p>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>每次你的组件渲染时，<code>useState</code> 都会给你一个包含两个值的数组：</p>\n<ol>\n<li><strong>state 变量</strong> (<code>index</code>) 会保存上次渲染的值。</li>\n<li><strong>state setter 函数</strong> (<code>setIndex</code>) 可以更新 state 变量并触发 React 重新渲染组件</li>\n</ol>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol>\n<li><strong>组件进行第一次渲染。</strong> 因为你将 <code>0</code> 作为 <code>index</code> 的初始值传递给 <code>useState</code>，它将返回 <code>[0, setIndex]</code>。 React 记住 <code>0</code> 是最新的 state 值。</li>\n<li><strong>你更新了 state</strong>。当用户点击按钮时，它会调用 <code>setIndex(index + 1)</code>。 <code>index</code> 是 <code>0</code>，所以它是 <code>setIndex(1)</code>。这告诉 <mark>React 现在记住 index 是 1 并触发下一次渲染</mark>。</li>\n<li><strong>组件进行第二次渲染</strong>。React 仍然看到 <code>useState(0)</code>，但是因为 React <em>记住</em> 了你将 <code>index</code> 设置为了 <code>1</code>，它将返回 <code>[1, setIndex]</code></li>\n</ol>\n<hr>\n<blockquote>\n<p>React 如何知道返回哪个 state？</p>\n<p>你可能已经注意到，<code>useState</code> 在调用时没有任何关于它引用的是<em>哪个</em> state 变量的信息。没有传递给 <code>useState</code> 的“标识符”，它是如何知道要返回哪个 state 变量呢?</p>\n</blockquote>\n<blockquote>\n<p>术语统一：useState(0)——&gt;这个就叫做Hook的一次调用</p>\n</blockquote>\n<p>1.在同一组件的每次渲染中，Hooks 都依托于一个稳定的调用顺序。<mark>只在顶层调用 Hooks的话，Hooks 将始终以相同的顺序被调用</mark></p>\n<p>2.这两个变量都是闭包产生的，都可以被外部访问到</p>\n<ul>\n<li>\n<p>componentHooks：数组，每一项是当前组件内部的state变量的值，按照useState()调用的上下顺序依次写入变量值</p>\n</li>\n<li>\n<p>currentHookIndex：每一次渲染开始都是0，<strong>调用一次useState()，+1</strong>。<strong>记录的是每个state变量在componentHooks数组的索引位置</strong></p>\n</li>\n<li>\n<p>setState：React会收集需要更新的变量值，一次性更新数组中的对应state变量值，并将currentHookIndex再次置为0。这样，下一次再调用useState()时，<strong>currentHookIndex又从0开始依次读取到新的变量值</strong>。</p>\n</li>\n</ul>\n<div class=\"language-react line-numbers-mode\" data-ext=\"react\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>更简洁理解的代码 <a href=\"https://blog.csdn.net/qq_30632003/article/details/124940407\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/qq_30632003/article/details/124940407</a></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>state 完全私有于声明它的组件</strong>。如果你在两个地方渲染它，则每个副本都有独属于自己的 state</li>\n</ul>\n<h3> <mark>2.3 渲染和提交</mark></h3>\n<p>React 是服务员，负责提出顾客的要求，并给顾客上菜。这个<strong>获取请求和服务 UI</strong> 的过程有三个步骤：</p>\n<ol>\n<li><strong>触发</strong>渲染（将食客的订单送到厨房）</li>\n<li><strong>渲染</strong>组件（在厨房准备订单）</li>\n<li><strong>提交</strong>到 DOM（将订单送到桌前）</li>\n</ol>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202310251120818.png\" alt=\"image-20231025112055772\" loading=\"lazy\"></p>\n<h4> 步骤1 触发一次渲染</h4>\n<p>有两种原因会导致组件的渲染：</p>\n<ol>\n<li>组件的 <strong>初次渲染。</strong></li>\n<li>组件（或者其祖先之一）的 **状态发生了改变。**更新组件的状态会自动将一次渲染送入队列</li>\n</ol>\n<p><strong>初次渲染</strong>：当应用启动时，会触发初次渲染。框架和沙箱有时会隐藏这部分代码，但它是通过调用目标 DOM 节点的 <a href=\"https://zh-hans.react.dev/reference/react-dom/client/createRoot\" target=\"_blank\" rel=\"noopener noreferrer\"><code>createRoot</code></a>，然后用你的组件调用 <code>render</code> 函数完成的</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>状态更新时重新渲染</strong>：一旦组件被初次渲染，你就可以通过使用 <code>set</code> 函数更新其状态来触发之后的渲染。更新组件的状态会自动将一次渲染送入队列</p>\n<h4> 步骤 2: React 渲染你的组件，渲染中</h4>\n<ul>\n<li><strong>在进行初次渲染时,</strong> React 会调用根组件。<code>document.getElementById('root')</code></li>\n<li><strong>对于后续的渲染,</strong> React 会调用内部状态更新触发了渲染的函数组件</li>\n</ul>\n<hr>\n<ul>\n<li><strong>在初次渲染中，</strong> React 将会为<code>&lt;section&gt;</code>、<code>&lt;h1&gt;</code> 和三个 <code>&lt;img&gt;</code> 标签 <mark>创建 DOM 节点</mark>。</li>\n<li><strong>在一次重渲染过程中,</strong> React 将<mark>计算</mark>它们的哪些属性（如果有的话）自上次渲染以来已更改。在下一步（提交阶段）之前，它不会对这些信息执行任何操作。</li>\n</ul>\n<h4> 步骤 3: React 把更改提交到 DOM 上</h4>\n<p>在渲染（调用）你的组件之后，React 将会修改 DOM</p>\n<ul>\n<li><strong>对于初次渲染，</strong> React 会使用 <a href=\"https://developer.mozilla.org/docs/Web/API/Node/appendChild\" target=\"_blank\" rel=\"noopener noreferrer\"><code>appendChild()</code></a> DOM API 将其创建的所有 DOM 节点放在屏幕上。</li>\n<li><strong>对于重渲染，</strong> React 将应用<mark>最少的必要操作</mark>（在渲染时计算！），以使得 DOM 与最新的渲染输出相互匹配</li>\n</ul>\n<h3> 2.4 作为快照的状态</h3>\n<p>与普通 JavaScript 变量不同，<mark>React 状态</mark>的行为更像一个<mark>快照</mark>。<strong>设置它并不改变你已有的状态变量，而是触发一次重新渲染</strong></p>\n<h4> 设置 state 会触发渲染</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 渲染会及时生成一张快照 （拷贝）</h4>\n<p>当 React 重新渲染一个组件时：</p>\n<ol>\n<li>React 会再次调用你的函数</li>\n<li>函数会返回新的 JSX 快照</li>\n<li>React 会更新界面以匹配返回的快照</li>\n</ol>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202311221510322.png\" alt=\"image-20231122151020227\" loading=\"lazy\"></p>\n<ul>\n<li><strong>设置 state 只会为下一次渲染变更 state 的值</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但在 <strong>这次渲染</strong> 的 事件处理函数中 number 会一直是 0，所以你会三次将 state 设置成 1。这就是为什么在你的事件处理函数执行完以后，React 重新渲染的组件中的 number 等于 1 而不是 3。\n你还可以通过在心里把 state 变量<mark>替换成</mark>（<mark>替代法</mark>）它们在你代码中的值来想象这个过程。由于 这次渲染 中的 state 变量 number 是 0，其事件处理函数看起来会像这样</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 随时间变化的 state</h4>\n<ul>\n<li>\n<p><strong>一个 state 变量的值永远不会在一次渲染的内部发生变化</strong> ，即使其事件处理函数的代码是异步的。在 <strong>那次渲染的</strong> <code>onClick</code> 内部，<code>number</code> 的值即使在调用 <code>setNumber(number + 5)</code> 之后也还是 <code>0</code>。它的值在 React 通过调用你的组件“获取 UI 的快照”时就被“固定”了。</p>\n</li>\n<li>\n<p><strong>React 会使 state 的值始终”固定“在一次渲染的各个事件处理函数内部。</strong> 你无需担心代码运行时 state 是否发生了变化。</p>\n</li>\n</ul>\n<h4> <mark>摘要</mark></h4>\n<ul>\n<li>设置组件 state 会把一次重新渲染加入队列</li>\n<li>React 将 state 存储在组件之外，就像在架子上一样。</li>\n<li>当你调用 <code>useState</code> 时，React 会为你提供<strong>该次渲染</strong> 的一张 state 快照。</li>\n<li>变量和事件处理函数不会在重渲染中“存活”。每个渲染都有自己的事件处理函数。</li>\n<li>每个渲染（以及其中的函数）始终“看到”的是 React 提供给<strong>这个</strong> 渲染的 state 快照。</li>\n<li>你可以在心中替换事件处理函数中的 state，类似于替换渲染的 JSX。</li>\n<li>过去创建的事件处理函数拥有的是创建它们的那次渲染中的 state 值</li>\n</ul>\n<h3> 2.5 把一系列state更新加入队列</h3>\n<h4> React 会对 state 更新进行批处理</h4>\n<ul>\n<li>\n<p><strong>React 会等到事件处理函数中的</strong> 所有 <strong>代码都运行完毕再处理你的 state 更新。</strong> 这就是为什么重新渲染只会发生在所有这些 <code>setNumber()</code> 调用 <strong>之后</strong> 的原因</p>\n</li>\n<li>\n<p>但这也意味着只有在你的事件处理函数及其中任何代码执行完成 <strong>之后</strong>，UI 才会更新。这种特性也就是 <strong>批处理</strong>，它会使你的 React 应用运行得更快。它还会帮你避免处理只更新了一部分 state 变量的令人困惑的“半成品”渲染。</p>\n</li>\n</ul>\n<h4> 在下次渲染前多次更新同一个 state</h4>\n<p>这是一个不常见的用例，但是如果你想在下次渲染之前多次更新同一个 state，你可以像 <code>setNumber(n =&gt; n + 1)</code> 这样传入一个根据队列中的前一个 state 计算下一个 state 的 <strong>函数</strong>，而不是像 <code>setNumber(number + 1)</code> 这样传入 <strong>下一个 state 值</strong>。这是一种告诉 React “<strong>用 state 值做某事</strong>”而不是仅仅替换它的方法</p>\n<ul>\n<li>点击一次按钮，number直接+3</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.6 更新状态中的对象</h3>\n<h3> 2.7 更新状态中的数组</h3>\n<h2> 3.状态管理</h2>\n<h2> 4.应急方案</h2>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201347852.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "javascript & react"
      ]
    },
    {
      "title": "Vue",
      "url": "https://mister-hope.github.io/tech/web_framework/vue.html",
      "id": "https://mister-hope.github.io/tech/web_framework/vue.html",
      "summary": "小知识 Vue标配 //定义局部组件对象 const login = { template:`&lt;div&gt; xxx + {{msg}}&lt;/div&gt;`, data(){ return{ msg:\"局部组件msg\", } }, methods:{}, computed:{}, created(){}, } //定义Vue实例 根组件对象 const app = new Vue({ el: \"#app\", \t//定义vue实例的作用范围 data: {\t\t\t//定义vue的数据、变量 msg:\"Vue实例根组件msg\" }, methods: {\t\t//定义一系列方法 \t }, computed:{\t\t//定义计算属性 login,\t\t//注册局部组件 }, created(){}, \t//定义生命周期函数 components:{},\t//定义局部组件 }) js的加载是从代码上面一直到代码下面的，vue实例部分建议写在最下面！ js中 字符串 null 和 \"\" 和布尔值false相等 &lt; a &gt;标签中href=\"javascript:;\"表示什么都不执行 vue data中的数组lists[] 方法 push(元素) 添加元素到lists中 splice(start,delCount)，从start开始，删除数组delCount个元素 v-model 代替了标签的value属性，常见于 input 或表单等标签 总价格： totalPrice().toFixed(2) {{ }}里面可以调用方法，显示的是vue实例方法的返回值，toFixed(2)保留两位小数的意思 &lt;a href=\"baidu.com\" @click=\"test\" 点击a标签会先触发@click，再触发href @CrossOrigin解决跨域问题 加在Controller类上 @RequestBody的作用其实是将json格式的数据转为java对象，在axios发送post请求时，传过来的就是json数据，要在Controller的方法参数上加上@requestbody html中 创建表格 &lt;table border=\"1\" width=\"100%\"&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;工资&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;tr style=\"text-align: center\"&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;老王&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;12345&lt;/td&gt; &lt;td&gt;&lt;a href=\"\"&gt;删除&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=\"\"&gt;修改&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; easy code插件 直接从数据库生成一系列entity dao mapper service serviceimpl controller 生成后==在dao类上面添加@mapper注释（不是@service那一类的）==或者在启动类上添加MapperScan(\"com.mrru.dao\") @Mapper注解是Mybatis框架的注解，使用这个注解我们的接口就可以被Mybatis框架加载，然后动态代理生成实体类，然后就将实体类放到了spring容器中。 可以修改模板 中 dao类添加注释@Mapper，mapper.xml存放目录改为com/mrru/mapper , Controller类添加注释@CrossOrigin, 在axios中，==不能直接用this代表vue实例，==可以在外部声明一个var变量_this代表this，在axios中使用 _this代替即可 删除前提示框 if (window.confirm(\"您确定要删除吗？\") “./”：代表目前所在的目录 “../”：代表上一层目录 vue中 style标签加入scoped的话 会影响全局的样式，不加scoped只影响自己的样式，因此所有公共的样式加在App.Vue中 Vue-cli前端开发 src下 新建views目录，在里面构建组件。components里面放公共组件 vue router切换到同一个页面会报错 const VueRouterPush = VueRouter.prototype.push VueRouter.prototype.push = function push (to) { return VueRouterPush.call(this, to).catch(err =&gt; err) }",
      "content_html": "<h1> 小知识</h1>\n<ul>\n<li>\n<p>Vue标配</p>\n<ul>\n<li>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p><mark>js的加载是从代码上面一直到代码下面的，vue实例部分建议写在最下面！</mark></p>\n</li>\n<li>\n<p><mark>js中 字符串 null 和 \"\"  和布尔值false相等</mark></p>\n</li>\n<li>\n<p>&lt; a &gt;标签中href=\"javascript:;\"表示什么都不执行</p>\n</li>\n<li>\n<p>vue data中的数组lists[] 方法</p>\n<ul>\n<li>push(元素)  添加元素到lists中</li>\n<li>splice(start,delCount)，从start开始，删除数组delCount个元素</li>\n</ul>\n</li>\n<li>\n<p>v-model   代替了标签的value属性，常见于 input 或表单等标签</p>\n</li>\n<li>\n<p>总价格： totalPrice().toFixed(2)     {{ }}里面可以调用方法，显示的是vue实例方法的返回值，toFixed(2)保留两位小数的意思</p>\n</li>\n<li>\n<p>&lt;a  href=\"<a href=\"http://baidu.com\" target=\"_blank\" rel=\"noopener noreferrer\">baidu.com</a>\" @click=\"test\"  点击a标签会先触发@click，再触发href</p>\n</li>\n<li>\n<p>@CrossOrigin解决跨域问题  加在Controller类上</p>\n</li>\n<li>\n<p><mark>@RequestBody的作用其实是将json格式的数据转为java对象</mark>，在axios发送post请求时，传过来的就是json数据，要在Controller的方法参数上加上@requestbody</p>\n</li>\n<li>\n<p>html中 创建表格</p>\n</li>\n<li>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>easy code插件 直接从数据库生成一系列entity dao mapper  service serviceimpl controller 生成后==在dao类上面添加@mapper注释（不是@service那一类的）==或者在启动类上添加MapperScan(\"com.mrru.dao\")</p>\n<ul>\n<li>@Mapper注解是<mark>Mybatis框架的注解</mark>，使用这个注解我们的接口就可以被Mybatis框架加载，然后<mark>动态代理生成实体类，然后就将实体类放到了spring容器中。</mark></li>\n<li>可以修改模板 中 dao类添加注释@Mapper，mapper.xml存放目录改为com/mrru/mapper   ,  Controller类添加注释@CrossOrigin,</li>\n</ul>\n</li>\n<li>\n<p><mark>在axios中</mark>，==不能直接用this代表vue实例，==可以在外部声明一个var变量_this代表this，在axios中使用 _this代替即可</p>\n</li>\n<li 点击确定后要执行的东西=\"\">\n<p>删除前提示框 if (window.confirm(\"您确定要删除吗？\")</p>\n</li>\n<li>\n<p>“./”：代表目前所在的目录</p>\n</li>\n<li>\n<p>“../”：代表上一层目录</p>\n</li>\n<li>\n<p>vue中 style标签加入scoped的话 会影响全局的样式，不加scoped只影响自己的样式，因此所有公共的样式加在App.Vue中</p>\n</li>\n<li>\n<p>Vue-cli前端开发</p>\n</li>\n<li>\n<p>src下 新建views目录，在里面构建组件。components里面放公共组件</p>\n</li>\n<li>\n<p>vue router切换到同一个页面会报错</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h1> Vue2</h1>\n<h2> 1. Vue 引言</h2>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209142158464.png\" alt=\"image-20210129104929487\" loading=\"lazy\"></p>\n<blockquote>\n<p><code>渐进式</code> JavaScript 框架   --摘自官网</p>\n</blockquote>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 2. Vue入门</h2>\n<ul>\n<li><mark>Vue就是个js的框架</mark></li>\n</ul>\n<h3> 2.1\t下载Vuejs</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 Vue第一个入门应用</h3>\n<ul>\n<li><mark>js的加载是从代码上面一直到代码下面的，vue实例部分建议写在最下面！</mark></li>\n<li><mark>作用域通常组织在一个div上面！而不能是body</mark></li>\n</ul>\n<p>总结：</p>\n<ul>\n<li><mark>一个页面中只能存在一个Vue实例，不能创建多个vue实例</mark></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 总结:</h4>\n\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209142158969.png\" alt=\"image-20220414190035114\" loading=\"lazy\"></p>\n<p>​\t4.el属性中可以书写任意的CSS选择器[jquery选择器],但是在使用Vue开发是<strong>推荐使用id选择器</strong>  注意: el属性值不能指定body或html标签，一个vue实例只能作用在一个具体作用范围</p>\n<h2> 3. v-text和v-html</h2>\n<ul>\n<li>v-text直接显示数据</li>\n<li>v-html先渲染，再显示数据</li>\n</ul>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209142159891.png\" alt=\"image-20220414201612826\" loading=\"lazy\"></p>\n<h3> 3.1 v-text</h3>\n<blockquote>\n<p><code>v-text</code>:用来获取data中数据将数据以文本的形式渲染到指定标签内部             类似于javascript 中 innerText</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 总结</h3>\n<ul>\n<li>插值表达式 即{{}} 这样的方式不会覆盖原数据</li>\n<li>v-text <mark>会将标签中原有的数据覆盖</mark>，能避免插值闪烁</li>\n</ul>\n<ol>\n<li>{{}}(插值表达式) 和 v-text获取数据 的区别在于\na.使用v-text取值<mark>会将标签中原有的数据覆盖</mark> 使用插值表达式的形式不会覆盖标签原有的数据\nb.使用v-text可以避免在网络环境较差的情况下出现插值闪烁</li>\n</ol>\n<h3> 3.2 v-html</h3>\n<blockquote>\n<p><code>v-html</code>:用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似于javascript中 innerHTML</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 4.vue中事件绑定(v-on)</h2>\n<ul>\n<li>事件！</li>\n</ul>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209142159939.png\" alt=\"image-20220414203807472\" loading=\"lazy\"></p>\n<ul>\n<li>MVVM  双向绑定机制  model数据改变会影响view\n<ul>\n<li>model 就是vue中的data属性</li>\n<li>view 就是显示的{{ msg }}</li>\n</ul>\n</li>\n</ul>\n<h3> 4.1 绑定事件基本语法</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> <strong>总结:</strong></h3>\n<p>事件三要素  事件源:发生事件dom元素  事件: 发生特定的动作  click....  监听器  发生特定动作之后的事件处理程序 通常是js中函数</p>\n<p>1.在vue中绑定事件是通过v-on指令来完成的 v-on:事件名 如  v-on:click</p>\n<p>2.在v-on:事件名的赋值语句中是<mark>当前事件触发调用的函数名</mark></p>\n<p>3.在vue中事件的函数统一定义在Vue实例的<mark>methods属性</mark>中</p>\n<p>4.在vue定义的事件中this指的就是当前的Vue实例,<mark>日后可以在事件中通过使用this获取Vue实例中相关数据</mark>以及<mark>调用methods中相关方法aa</mark>\n<code>而且不用this.data.count，直接this.count就可以了</code></p>\n<h3> 4.2 Vue中事件的简化语法</h3>\n<ul>\n<li><mark>@代表v-on</mark>  语法： @事件名=事件函数名</li>\n<li><mark>函数省去 :function</mark>  test(参数){}</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>总结:</p>\n<p>1.日后在vue中绑定事件时可以<mark>通过@符号形式</mark> 简化  v-on 的事件绑定</p>\n<h3> 4.3 Vue方法的简化写法</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 4.4 Vue事件参数传递</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 5.v-show v-if v-bind</h2>\n<ul>\n<li>vi-if v-show里面可以写逻辑表达式，还可以<mark>获取vue实例data的值</mark>  <mark>v-if = \"ishow\"  用双引号引起！</mark></li>\n<li>这样就可以动态修改vue上的值 来控制 是否展示</li>\n<li>两者区别\n<ul>\n<li>1.v-if 底层通过控制<strong>dom树上元素节点</strong>实现页面标签展示和隐藏</li>\n<li>2.v-show底层通过控制标签<strong>css中display</strong>属性实现标签展示和隐藏，不修改dom树</li>\n<li><mark>变化快用v-show，变化慢用v-if</mark></li>\n</ul>\n</li>\n<li><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204151039713.png\" alt=\"image-20220415103911365\" loading=\"lazy\"></li>\n</ul>\n<h3> 5.1 v-show</h3>\n<blockquote>\n<p><code>v-show</code>:用来控制页面中某个标签元素是否展示</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5.2 v-if</h3>\n<blockquote>\n<p><code>v-if</code>: 用来控制页面元素是否展示</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5.3 v-bind</h3>\n<ul>\n<li>v-bind可以绑定所有html标签的属性</li>\n<li>作用:用来绑定html标签中<mark>某个属性</mark>交给vue实例进行管理</li>\n<li>好处:一旦属性交给vue实例进行管理之后，日后可以通过修改vue实例中绑定属性达到动态修改标签属性的效果</li>\n<li>语法:对应标签上 <mark>v-bind:属性名</mark>，<mark>加上v-bind后代表这个属性交给vue去管理了</mark></li>\n<li>v-bind:title=“msg”  这里可以直接赋值为与Vue中data的变量</li>\n</ul>\n<blockquote>\n<p><code>v-bind</code>: 用来绑定标签的属性从而通过vue实例动态修改标签的属性</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5.4 v-bind 简化写法</h3>\n<blockquote>\n<p>vue为了方便我们日后绑定标签的属性提供了对属性绑定的简化写法如 <code>v-bind:属性名</code> 简化之后 <code>:属性名</code></p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 6.v-for的使用</h2>\n<ul>\n<li>作用:用来在页面中实现vue中定义数据的遍历语法:直接在对应标签上加入v-for指令</li>\n<li>语法\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/list.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://cn.vuejs.org/v2/guide/list.html</a></li>\n<li>a.遍历对象:v-for=\"<mark>(value ,key ,index)</mark>  in  <mark>data中变量</mark>”,也可以<strong>单个取value</strong>  v-for=\"value in user\"   {{ value }}</li>\n<li>b.<mark>value,name,index这三个参数是有顺序的！！！</mark></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code>v-for</code>: 作用就是用来对对象进行遍历的(数组也是对象的一种)</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 7 .v-model 双向绑定</h2>\n<ul>\n<li><mark>v-model的实际使用！！强大之处</mark></li>\n<li><a href=\"http://bilibili.com/video/BV1Lo4y1R7hc?p=7&amp;spm_id_from=pageDriver\" target=\"_blank\" rel=\"noopener noreferrer\">bilibili.com/video/BV1Lo4y1R7hc?p=7&amp;spm_id_from=pageDriver</a> 第48分钟</li>\n<li>页面的值变，影响model数据值</li>\n<li>model数据值变了，影响页面的值</li>\n</ul>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204161107858.png\" alt=\"image-20220416110746656\" loading=\"lazy\"></p>\n<ul>\n<li>v-bind:绑定作用:用来将<mark>html标签的属性</mark>进行绑定，交给vue实例管理,<strong>除了value属性的所有属性</strong>都可以绑定</li>\n<li>v-model:模型﹑作用:用来将<mark>html标签的value属性</mark>进行绑定，,交给vue实例管理，主要用在表单元素上，最能体现双向绑定机制\n<ul>\n<li>语法：在表单元素标签上，直接加入v-model=\"vue变量\"，就相当于给value赋值了，不用再单独写value属性了</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code>v-model</code>: 作用用来绑定标签元素的值与vue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> vue基本内容回顾</h2>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204172003787.png\" alt=\"image-20220417200352468\" loading=\"lazy\"></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204172007557.png\" alt=\"image-20220417200743416\" loading=\"lazy\"></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204172008151.png\" alt=\"image-20220417200842983\" loading=\"lazy\"></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204172009166.png\" alt=\"image-20220417200954021\" loading=\"lazy\"></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204172010486.png\" alt=\"image-20220417201050305\" loading=\"lazy\"></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204172012435.png\" alt=\"image-20220417201208238\" loading=\"lazy\"></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204172013346.png\" alt=\"image-20220417201307169\" loading=\"lazy\"></p>\n<h2> vue实例的computed计算属性</h2>\n<ul>\n<li>\n<p><strong>惰性计算，只有依赖的值改变，才会触发computed</strong>，<strong>但是不能传参数</strong></p>\n</li>\n<li>\n<p>相比用methods里面的方法，computed计算属性只计算一次，就可以缓存到vue中了，不需要进行多次计算</p>\n</li>\n<li>\n<p><mark>只要数据不想直接渲染到页面，想进行额外的处理，就用compted</mark></p>\n</li>\n<li>\n<p>作用：用来在vue实例中完成相关业务计算工作，日后在将某个数据渲染页面时 如果该数据<mark>需要经过业务处理</mark>之后再<mark>渲染到页面多处</mark>就可以使用computed</p>\n</li>\n<li>\n<p>好处：提升vue运行性能，主要使用computed进行计算相关处理会将第一次计算结果进行缓存，,便于日后页面多次使用</p>\n</li>\n<li>\n<p>使用：{{ 属性名 }}   这个属性名就是computed计算属性中的方法名，<mark>但是不能加()</mark>，不然和methods里面的方法一样了，</p>\n</li>\n<li>\n<p>注意：<strong>computed里的方法名和methods方法名不要重名！</strong></p>\n</li>\n</ul>\n<h2> 8. 事件修饰符</h2>\n<ul>\n<li>语法：@事件名.事件修饰符 = \"事件处理函数\"  ===&gt; @click.stop = \"test\"</li>\n<li>事件修饰符可以连用，@click.stop.self</li>\n</ul>\n<blockquote>\n<p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p>\n</blockquote>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 8.1 stop事件修饰符</h3>\n<ul>\n<li>js存在事件冒泡，比如大的div块套个小的div块，都有click事件，点击小的div，两个div同时响应了click事件！ 这是因为<mark>js的冒泡机制，层级小的标签中的事件，会将这个事件同时向父节点，父父节点传递...</mark>,所以<strong>大的div块也会响应小div块上的click事件</strong></li>\n</ul>\n<blockquote>\n<p>用来阻止事件冒泡，.stop意味着事件不会向后传递了</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 8.2 prevent 事件修饰符</h3>\n<blockquote>\n<p>用来阻止标签的默认行为</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 8.3 self 事件修饰符</h3>\n<blockquote>\n<p>用来针对于当前标签的事件触发     ===========&gt; 只触发自己标签的上特定动作的事件     只关心自己标签上触发的事件 <mark>不监听事件冒泡</mark></p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 8.4 once 事件修饰符</h3>\n<blockquote>\n<p>once 一次作用:  就是让指定事件只触发一次</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 9. 按键修饰符</h2>\n<ul>\n<li>按键修饰符也可连用</li>\n<li>@keyup.enter.tab.space.delete</li>\n</ul>\n<blockquote>\n<p>作用: 用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p>\n</blockquote>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 9.1 enter 回车键</h3>\n<blockquote>\n<p>用来在触发回车按键之后触发的事件</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 9.2 tab 键</h3>\n<blockquote>\n<p>用来捕获到tab键执行到当前标签是才会触发</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><hr>\n<h2> 10. Axios 基本使用</h2>\n<blockquote>\n<p>axios 简介</p>\n</blockquote>\n<ul>\n<li>axios 前端异步请求库类似 jQuery ajax 技术</li>\n<li>ajax用来在页面发起异步请求到后端服务,并将后端服务响应数据渲染到页面上</li>\n<li>jouery推荐ajax技术，vue里面并不推荐再使用jquery框架，vue推荐使用axios 异步请求库</li>\n<li>axios 总结:<mark>用来在前端页面发起一个异步请求,请求之后页面不动,响应回来刷新页面局部</mark></li>\n<li>官方定义:\n<ul>\n<li>axios 异步请求库并不是vue官方库   <strong>第三方异步库</strong>﹑</li>\n<li>在vue中摧荐axios易用、简洁且高效的http库---&gt;<mark>发送http异步请求库</mark></li>\n<li>官方网站: http : //vavaa . axios-js . com/</li>\n</ul>\n</li>\n<li>特性:\n<ul>\n<li>从浏览器中创建XLHttpReguests</li>\n<li>从node.js创建http请求</li>\n<li>支持Promise AP1</li>\n<li><mark>拦截请求和响应</mark></li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li><mark>自动转换Json数据</mark></li>\n<li>客户端支持防御xSRF</li>\n</ul>\n</li>\n</ul>\n<h3> 10.1 引言</h3>\n<blockquote>\n<p><code>Axios</code> 是一个异步请求技术,核心作用就是用来在页面中发送异步请求,并获取对应数据在页面中渲染       页面局部更新技术  Ajax</p>\n</blockquote>\n<h3> 10.2 Axios 第一个程序</h3>\n<p>中文网站:<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.kancloud.cn/yunye/axios/234845</a></p>\n<p>安装: <a href=\"https://unpkg.com/axios/dist/axios.min.js\" target=\"_blank\" rel=\"noopener noreferrer\">https://unpkg.com/axios/dist/axios.min.js</a></p>\n<h4> 10.2.1 GET方式的请求</h4>\n<p><mark>axios.get(\"url?id=21\").then(function(res){res.data}).catch(function(err){});</mark></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 10.2.2 POST方式请求</h4>\n<ul>\n<li>将数据以json格式发送给后端</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204181655478.png\" alt=\"image-20220418165529958\" loading=\"lazy\"></p>\n<blockquote>\n<p>创建实例</p>\n</blockquote>\n<p>可以使用自定义配置新建一个 axios 实例</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>请求配置</p>\n</blockquote>\n<p><a href=\"http://www.axios-js.com/zh-cn/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.axios-js.com/zh-cn/docs/</a>  搜索请求配置</p>\n<h4> 10.2.3 axios并发请求</h4>\n<blockquote>\n<p><code>并发请求</code>:  将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 10.3 axios中的拦截器 intercept</h3>\n<ul>\n<li>\n<p>作用:用来将axios中共有参数,响应公共处理交给拦截器处理，减少axios发送请求时代码元余</p>\n</li>\n<li>\n<p>请求拦截器：在发送请求时 <strong>给axios实例</strong> 做一些事情   比如发送的所有请求都加上token</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>响应拦截器：给<strong>返回的response对象</strong>做一些公共的错误处理</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意</p>\n</blockquote>\n<p>在axios中，==不能直接用this代表vue实例，==可以在外部声明一个var变量_this代表this，在axios中使用 _this代替即可</p>\n<hr>\n<h2> 11. Vue 生命周期</h2>\n<blockquote>\n<p>Vue 实例生命周期 ===&gt; java 对象生命周期(初始化阶段 运行阶段  销毁阶段)    <code>生命周期钩子</code>   ====&gt;  <code>生命周期函数</code></p>\n<p>Vue实例从创建到销毁过程中<mark>自动触发</mark>一系列函数   ====&gt; Vue生命周期函数(钩子)</p>\n</blockquote>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209142200579.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>Vue生命周期总结</p>\n<ul>\n<li>1.初始化阶段\n<ul>\n<li>beforeCreate(){ <a href=\"//1.xn--4gqvdh020bltduds43kn2css7bywm\" target=\"_blank\" rel=\"noopener noreferrer\">//1.生命周期中第一个函数</a>,该函数在执行时Vue实例仅仅完成了自身事件的绑定和生命周期函数的初始化工作,<strong>Vue实例中还没有 Data el methods相关属性</strong></li>\n<li>created(){ <a href=\"//2.xn--ciqf9zq5jlwduds43kn2css7bywm\" target=\"_blank\" rel=\"noopener noreferrer\">//2.生命周期中第二个函数</a>,该函数在执行时<mark>Vue实例已经初始化了data属性和methods中相关方法</mark></li>\n<li>beforeMount(){<a href=\"//3.xn--ehqych020bltduds43kn2css7bywm\" target=\"_blank\" rel=\"noopener noreferrer\">//3.生命周期中第三个函数</a>,该函数在执行时<strong>Vue将El中指定作用范围作为模板编译</strong></li>\n<li>mounted(){<a href=\"//4.xn--ciqf340ax2c8c48nxu7an6css7bywm\" target=\"_blank\" rel=\"noopener noreferrer\">//4.生命周期中第四个函数</a>,该函数在执行过程中,<mark>已经将数据渲染到界面中并且已经更新页面</mark></li>\n</ul>\n</li>\n<li>2.运行阶段\n<ul>\n<li>beforeUpdate(){<a href=\"//5.xn--ciqf32an0jlwduds43kn2css7bywm\" target=\"_blank\" rel=\"noopener noreferrer\">//5.生命周期中第五个函数</a>,该函数是data中数据发生变化时执行 这个事件执行时仅仅是<strong>Vue实例中data数据变化</strong>，<strong>页面显示的依然是原始数据</strong></li>\n<li>updated(){    <a href=\"//6.xn--ciqf01wrqt0huds43kn2css7bywm\" target=\"_blank\" rel=\"noopener noreferrer\">//6.生命周期中第六个函数</a>,该函数执行时data中数据发生变化,<mark>页面中数据也发生了变化</mark>  页面中数据已经和data中数据一致</li>\n</ul>\n</li>\n<li>3.销毁阶段\n<ul>\n<li>beforeDestory()<a href=\"//7.xn--7gqpds3lx2c8c869iducet4bonl\" target=\"_blank\" rel=\"noopener noreferrer\">//7.生命周期第七个函数</a>,该函数执行时,Vue中所有数据 methods componet 都没销毁,</li>\n<li>destoryed() <a href=\"//8.xn--ciq12ftmy3f8c869iducet4b5vcuuq\" target=\"_blank\" rel=\"noopener noreferrer\">//8.生命周期的第八个函数</a>,该函数执行时,Vue实例彻底销毁</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2> ES6基本用法</h2>\n<p>ECMAScript 和 JavaScript 的关系是，<mark>前者是后者的规格，后者是前者的一种实现</mark>（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</p>\n<ul>\n<li>\n<p>let :用来声明局部变量   好处: 作用范围严谨 从代码声明出开始 到代码块结束  一般在声明基本变量使用推荐使用let</p>\n</li>\n<li>\n<p>const :用来声明js中<mark>常量</mark>   好处: 一旦被赋值不能被修改   推荐使用这两个关键字声明变量 声明js中<mark>对象和数组</mark>时推荐使用const</p>\n</li>\n<li>\n<p>前提：在使用<strong>匿名函数</strong>时<strong>作为参数</strong>时候 function(){}   推荐使用es6中<mark>箭头函数</mark>  <mark>(参数,参数)=&gt;{函数体}</mark>   <mark>在axios中.then .catch中很常见</mark>  类似java8的lambda表达式</p>\n</li>\n<li>\n<p>当箭头函数没有参数时或者参数大于1个 必须加入()</p>\n</li>\n<li>\n<p>当箭头函数只有一个参数时 () 可以省略不写</p>\n</li>\n<li>\n<p>当函数体中只有一行代码时 函数体{} 可以省略不写</p>\n</li>\n<li>\n<p>箭头函数和匿名函数最大区别  <mark>箭头函数没有自己this</mark>   匿名函数存在自己的this         =&gt; 这样的写法的话就不用外部定义_this=this</p>\n</li>\n<li>\n<p><mark>模板字符串</mark> 方便ES6中在==``==中写标签，解决ES6中写标签的问题</p>\n</li>\n<li>\n<p><mark>对象定义</mark>  便利: 在定义对象时如果对象属性名和变量名一致,写一个即可</p>\n<ul>\n<li>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n</ul>\n<h2> 12. Vue中组件(component)</h2>\n<ul>\n<li>Vue一切皆组件</li>\n</ul>\n<h3> 12.1 组件作用</h3>\n<p>组件作用: 用来减少Vue实例对象中代码量,日后在使用Vue开发过程中,可以根据 不同业务功能将页面中划分不同的多个组件,然后由多个组件去完成整个页面的布局,便于日后使用Vue进行开发时页面管理,方便开发人员维护。</p>\n<h3> 12.2 组件使用</h3>\n<ul>\n<li>注意:<mark>无论使用全局组件还是局部组件都必须在组件template中加入唯一根元素  建议div 包裹</mark></li>\n</ul>\n<h4> 12.2.1 全局组件注册</h4>\n<blockquote>\n<p>说明:全局组件注册给Vue实例,日后可以在任意Vue实例的范围内使用该组件</p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意:</p>\n</blockquote>\n<ul>\n<li>1.Vue.component用来开发全局组件 参数1: <mark>组件的名称</mark>  参数2: <mark>组件配置{}</mark>  template:''用来书写组件的html代码  template中必须有且只有一个root元素 <mark>建议templent中都用一个div标签包裹起来</mark></li>\n<li>2.使用时需要在Vue的作用范围内根据组件名使用全局组件</li>\n<li>3.如果在注册组件过程中使用 驼峰命名组件的方式 在使用组件时 必须将驼峰的所有单词小写加入-线进行使用</li>\n</ul>\n<h4> 12.2.2 局部组件注册</h4>\n<ul>\n<li>\n<p>项目中主要使用局部组件，全局组件使用较少</p>\n</li>\n<li>\n<p><strong>建议templent中都用一个div标签包裹起来</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>说明:通过将组件注册给对应Vue实例中一个components属性来完成组件注册,这种方式不会对Vue实例造成累加</p>\n</blockquote>\n<ul>\n<li>第一种开发方式</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>第二种开发方式</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 12.2 组件中定义data、methods、computed、生命周期函数</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1Lo4y1R7hc?p=23&amp;spm_id_from=pageDriver\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.bilibili.com/video/BV1Lo4y1R7hc?p=23&amp;spm_id_from=pageDriver</a></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204201120884.png\" alt=\"image-20220420112044255\" loading=\"lazy\"></p>\n<h3> 12.3 Prop机制的使用</h3>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204210924838.png\" alt=\"image-20220421092452589\" loading=\"lazy\"></p>\n<p>Props 机制:</p>\n<ul>\n<li>定义: vue中提供一个特有数据传递机制，<mark>用来接收传递数据用的数组</mark></li>\n<li>作用:在使用vue组件时如果需要通过<strong>父组件给子组件</strong>传递数据可以通过props进行实现</li>\n<li>new Vue()这个就是根组件</li>\n</ul>\n<p><code>作用:props用来给组件传递相应静态数据或者是动态数据的</code></p>\n<h4> 12.3.1 在组件上声明【静态数据】传递给组件内部</h4>\n<ul>\n<li>\n<p>父组件向子组件传递数据</p>\n<ul>\n<li>传递静态数据：在组件使用标签上，声明<mark>静态数据 key = value</mark>形式，然后在组件内部使用props进行接收数据才可以</li>\n</ul>\n</li>\n<li>\n<p>props 用来接收<mark>父组件给当前组件</mark>传递的数据，注意，props机制接收数据就相当于<mark>自己组件的data</mark>中声明这样一个数据了</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 12.3.2 在组件上声明【动态数据】传递给组件内部</h4>\n<ul>\n<li>组件标签上声明 <mark>: key=\"value\"</mark> 组件内部使用props数组进行声明对应接收key</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 12.3.3 prop的单向数据流</h4>\n<blockquote>\n<p>单向数据流:所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</p>\n</blockquote>\n<ul>\n<li>\n<p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>\n</li>\n<li>\n<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。---摘自官网</p>\n</li>\n</ul>\n<h3> 12.4 组件中定义数据和事件使用</h3>\n<h5> 1. 组件中定义属于组件的数据</h5>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2.组件中事件定义</h5>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 12.5 向子组件中传递事件并在子组件中调用该事件</h3>\n<ul>\n<li>在使用组件时向组件传递事件，直接在对应组件标签上定义传递事件即可 @key=value           <mark>@传递事件名=\"父组件中传递事件名“</mark></li>\n</ul>\n<p><code>在子组件中调用传递过来的相关事件必须使用 this.$emit('函数名') 方式调用</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h3> 12.6 组件插槽slot</h3>\n<ul>\n<li>\n<p>&lt; slot &gt; 标签用来占位</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h2> 13.Vue中路由 (Vue Router)</h2>\n<h4> 13.1 路由</h4>\n<p><code>路由:根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一请求的管理</code></p>\n<ul>\n<li>定义: Vne Router 是Vue js 官方路由管理器,它和Vue.js 的核心深度集成，让构建单页面应用变得易如反掌</li>\n<li>通俗定义:通过使用 vue Router 可以将现有vue开发变得更加灵活,他可以根据<mark>前端请求url</mark>对应在页面中<mark>展示不同组件</mark></li>\n<li>将url路径和组件内容的展示 关联了起来！</li>\n</ul>\n<h4> 13.2 作用</h4>\n<blockquote>\n<p>用来在vue中实现组件之间的动态切换</p>\n</blockquote>\n<h4> 13.3 使用路由</h4>\n<ol>\n<li>\n<h5> 引入路由</h5>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<h5> 创建组件对象</h5>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<h5> 定义路由规则对象</h5>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<p>});</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li>\n<h5> 在页面中显示路由的组件</h5>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<h5> 根据连接切换路由</h5>\n<ul>\n<li>用a标签的话<mark>必须加#</mark>  这样vue才知道这是哈希路由</li>\n</ul>\n</li>\n</ol>\n<h4> 13.4 router-link标签切换路由</h4>\n<ul>\n<li>\n<p>路径切换路由</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><mark>名称切换 命名切换！ 推荐使用</mark></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p><code>作用:用来替换我们在切换路由时使用a标签切换路由</code></p>\n<p><code>好处:就是可以自动给路由路径加入#不需要手动加入</code></p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 13.4 在Js代码中切换路由</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>以上可以实现js切换路由，但是多次点击会报错，添加下列配置可以拟制错误</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>总结：</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202204241508428.png\" alt=\"image-20220424150804100\" loading=\"lazy\"></p>\n<h4> 13.5 默认路由</h4>\n<p><code>作用:用来在第一次进入界面是显示一个默认的组件</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 13.6 路由中参数传递</h4>\n<ul>\n<li><mark>第一种方式传递参数 传统方式</mark></li>\n</ul>\n<ol>\n<li>\n<p>通过?号形式拼接参数</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>组件中获取参数  <mark>this.$route.query.name</mark></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<ul>\n<li><mark>第二种方式传递参数 restful</mark></li>\n</ul>\n<ol>\n<li>\n<p><mark>通过使用路径方式传递参数</mark></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>组件中获取参数   <mark>this.$route.params.id</mark></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><mark>JS代码传递参数</mark></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n</ol>\n<h4> 13.7 嵌套路由</h4>\n<p><strong><mark>建议看vue-day04-10.vue router 的基本使用之嵌套路由中的代码</mark></strong></p>\n<ol>\n<li>\n<h5> 声明最外层和内层路由</h5>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<h5> 创建路由对象含有嵌套路由</h5>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<h5> 注册路由对象</h5>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>测试路由</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<hr>\n<h2> 14. Vue CLI 脚手架</h2>\n<h3> 14.1 什么是CLI</h3>\n<p>命令行界面（英语：command-line interface，缩写：<em>CLI</em>）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）</p>\n<h3> 14.2 什么是Vue CLI  &lt;====&gt;  (maven 项目构建工具)</h3>\n<p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。 使用Vue 脚手架之后我们开发的页面将是一个完整系统(项目)。 前端系统</p>\n<h3> 14.3 Vue CLI优势</h3>\n<ul>\n<li>通过 <code>vue-cli</code> 搭建交互式的项目脚手架。</li>\n<li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 快速开始零配置原型开发</li>\n<li>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：\n<ul>\n<li>可升级;</li>\n<li>基于 webpack 构建，并带有合理的默认配置；   webpack 前端打包工具  index.html   vue组件  用户组件   学生组件  ..... 路由   dist目录</li>\n<li>可以通过项目内的配置文件进行配置；      cli 项目配置文件  添加</li>\n<li>可以通过插件进行扩展。                            cli 项目里</li>\n</ul>\n</li>\n<li><mark>一个丰富的官方插件集合，集成了前端生态中最好的工具</mark>。\n<ul>\n<li>webpack可以es6语法 转为 es5语法</li>\n<li>nodejs 服务器(tomcat java) -天生支持热部署插件</li>\n</ul>\n</li>\n<li>一套完全图形化的创建和管理 Vue.js 项目的用户界面 <strong>vue cli 3.x支持</strong></li>\n</ul>\n<h3> 14.4 Vue CLI安装</h3>\n<h5> 1. 环境准备</h5>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2.安装脚手架</h5>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3.第一个vue脚手架项目</h5>\n<ul>\n<li>\n<p><mark>看着资料的图片 上的步骤 更好一些</mark></p>\n</li>\n<li>\n<p>node_modules不用提交 里面都是js文件！  直接进入项目目录执行<mark>npm install</mark><mark>就可以通过package.json进行安装</mark></p>\n</li>\n<li>\n<p>一个组件就包含template模板、script js代码、style css样式</p>\n</li>\n<li>\n<p>以后就是开发一个个的组件，然后改路由，在App.vue添加router-link</p>\n</li>\n</ul>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4.如何开发Vue脚手架</h5>\n<p><code>注意:在Vue cli 中一切皆组件</code></p>\n<hr>\n<h2> 15.在脚手架中使用axios</h2>\n<ul>\n<li>当执行命令npm install axios 会联网将axios.js下载到node_modules文件夹中，而且会将依赖写入到package.json中</li>\n<li></li>\n</ul>\n<h3> 15.1 安装axios</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 16.Vue Cli脚手架项目部署</h2>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 17.VueX 状态管理</h2>\n<h3> 17.1 简介&amp;安装</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209142200277.png\" alt=\"image-20201226214407298\" loading=\"lazy\"></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 17.2 state属性</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 17.3 mutations 属性</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 17.4 getters 属性</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h1> Vue3</h1>\n<p>官网学习：<a href=\"https://cn.vuejs.org/guide/introduction.html#what-is-vue\" target=\"_blank\" rel=\"noopener noreferrer\">https://cn.vuejs.org/guide/introduction.html#what-is-vue</a></p>\n<p>​</p>\n",
      "image": "https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209142158464.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T06:09:27.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "javascript & vue"
      ]
    },
    {
      "title": "MyBatis-plus",
      "url": "https://mister-hope.github.io/tech/database/mybatis-plus.html",
      "id": "https://mister-hope.github.io/tech/database/mybatis-plus.html",
      "content_html": "",
      "date_published": "2022-08-08T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "database"
      ]
    },
    {
      "title": "MyBatis",
      "url": "https://mister-hope.github.io/tech/database/mybatis.html",
      "id": "https://mister-hope.github.io/tech/database/mybatis.html",
      "summary": "1.Mybatis介绍 MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。 MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。 2.关于JDBC JDBC编程：http://www.mybatis.cn/archives/765.html",
      "content_html": "<h2> 1.Mybatis介绍</h2>\n<p>MyBatis 是一款优秀的持久层框架，它支持<code>自定义 SQL、存储过程以及高级映射</code>。</p>\n<p>MyBatis <code>免除了几乎所有的 JDBC 代码</code>以及<code>设置参数和获取结果集</code>的工作。</p>\n<h2> 2.关于JDBC</h2>\n<blockquote>\n<p>JDBC编程：<a href=\"http://www.mybatis.cn/archives/765.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.mybatis.cn/archives/765.html</a></p>\n</blockquote>\n<h3> 2.1 什么是JDBC</h3>\n<p>Java数据库连接 <code>Java Database Connectivity</code>，简称JDBC。</p>\n<p>JDBC是一类标准接口，<strong>制定了统一访问各类关系数据库的标准接口</strong>。</p>\n<p>JDBC是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。</p>\n<h3> 2.2 什么是驱动</h3>\n<p>JDBC是接口，<strong>驱动是接口的实现类</strong>，没有驱动将无法完成数据库连接，从而不能操作数据库！</p>\n<p><strong>每个数据库厂商都需要提供自己的驱动，用来连接自己公司的数据库</strong>，也就是说驱动一般都由数据库生成厂商提供。</p>\n<h3> 2.3 JDBC开发步骤</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3.Mybatis原理</h2>\n<h3> 3.1 改变</h3>\n<p>Mybatis核心流程其实与JDBC一脉相承，但是做出了改变：</p>\n<ul>\n<li>\n<p>避免了JDBC代码和手动设置参数、获取结果集</p>\n</li>\n<li>\n<p>封装了JDBC，简化了加载驱动、创建连接、创建<code>Statement</code>等繁杂的过程，开发者只需关注SQL语句本身</p>\n</li>\n<li>\n<p>MyBatis将程序中大量的SQL语句剥离出来，<code>使用XML文件或注解的方式实现SQL的灵活配置</code>，<code>将SQL语句与程序代码分离</code>，在不修改程序代码的情况下，直接在配置文件中修改SQL语句</p>\n</li>\n</ul>\n<hr>\n<h3> 3.2 基本工作原理</h3>\n<blockquote>\n<p>mybatis原理：<a href=\"http://www.mybatis.cn/archives/706.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.mybatis.cn/archives/706.html</a></p>\n</blockquote>\n<p>先封装SQL，接着调用JDBC操作数据库，最后把数据库返回的表结果封装成Java类</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>JDBC</th>\n<th>Mybatis</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>注册数据库连接</td>\n<td>DriverManager</td>\n<td></td>\n</tr>\n<tr>\n<td>数据库连接对象</td>\n<td>Connection</td>\n<td>SqlSession对象</td>\n</tr>\n<tr>\n<td>操作数据库SQL语句的对象</td>\n<td>Statement/PrepareStatement</td>\n<td>Executor接口</td>\n</tr>\n<tr>\n<td>结果集或一张虚拟表</td>\n<td>ResultSet</td>\n<td>ResultHandler</td>\n</tr>\n<tr>\n<td>封装映射信息</td>\n<td></td>\n<td>MappedStatement</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304181446542.png\" alt=\"1\" loading=\"lazy\"></p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4.Mybatis使用</h2>\n<h3> 4.1 构建SqlSessionFactory</h3>\n<p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p>\n<p><code>mybatis-config.xml</code></p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>mybatis配置文件详解：<a href=\"http://www.mybatis.cn/mybatis/32.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.mybatis.cn/mybatis/32.html</a></p>\n</blockquote>\n<h3> 4.2 获取 SqlSession</h3>\n<p>SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304181446542.png",
      "date_published": "2022-08-08T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "database"
      ]
    },
    {
      "title": "Maven",
      "url": "https://mister-hope.github.io/tech/dev_ops/maven.html",
      "id": "https://mister-hope.github.io/tech/dev_ops/maven.html",
      "summary": "课程：尚硅谷maven deploy发布：https://ld246.com/article/1581425726499 https://blog.csdn.net/wolfking1414/article/details/125789754",
      "content_html": "<blockquote>\n<p>课程：尚硅谷maven</p>\n<p>deploy发布：<a href=\"https://ld246.com/article/1581425726499\" target=\"_blank\" rel=\"noopener noreferrer\">https://ld246.com/article/1581425726499</a></p>\n<p><a href=\"https://blog.csdn.net/wolfking1414/article/details/125789754\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/wolfking1414/article/details/125789754</a></p>\n</blockquote>\n<h1> 收获点</h1>\n<p>1.<code>artifactId</code>是每个模块的名称</p>\n<p>2.<code>pom</code>是项目对象模型，管理项目用</p>\n<p>3.一个工程只能有一个父工程；父工程项目的打包方式必须是pom</p>\n<p>4.<code>dependencyManagement</code>用于父工程指定依赖版本，标签只是指定，并没有真正引入任何依赖到项目。子项目哪里用到了才真正引入相关依赖的jar包</p>\n<p>5.<code>scope</code>默认值就是compile，</p>\n<p>6<code>.plugin</code>插件<code>spring-boot-maven-plugin</code>帮助将模块打包为可执行的jar包（含有代码、当前服务所依赖的 jar 包、tomcat等）</p>\n<p>7.maven仓库有<code>release</code>（稳定）和<code>snapshot</code>（不稳定）两种，具体pom中以版本号有无<code>-SNAPSHOT</code>区分，快照版本在编译时会从远程快照仓库拉取下最新的</p>\n<p>8.<code>distributionManagement</code>用于发布依赖版本到远程仓库</p>\n<p>9.maven模块约定的src\\main等目录是在超级POM中指定好的</p>\n<p>10.子工程</p>\n<ul>\n<li>\n<p>如果子工程坐标中的groupId和version与父工程一致，那么可以省略</p>\n</li>\n<li>\n<p>在 POM 的继承关系中，子 POM 可以覆盖父 POM 中的配置；如果子 POM 没有覆盖，那么父 POM 中的配置将会被继承</p>\n</li>\n</ul>\n<p>11.在任何一个<strong>生命周期内部</strong>，执行任何一个具体环节的操作，都是<strong>从本周期最初的位置开始执行，直到指定的地方</strong></p>\n<p>12.一个插件可以对应多个目标，而<strong>每一个目标都和生命周期中的某一个环节对应</strong>。</p>\n<p>13.IDEA操作时，右击父工程，即可直接创建其子工程，父pom的打包方式变为pom</p>\n<p>14.项目架构设计时，需要提前建立工程间依赖关系</p>\n<p>15.Linux命令</p>\n<ul>\n<li><code>nohup</code>   不挂断运行：就是指客户端断开连接后，命令启动的进程仍然运行</li>\n<li><code>&amp;</code>     以后台方式运行命令，不阻塞前台命令的继续输入</li>\n</ul>\n<p>16.maven构件的理解</p>\n<p><code>构件关系定义</code>：Maven 定义了构件之间的三种基本关系，让大型应用系统可以使用 Maven 来进行管理</p>\n<ul>\n<li>继承关系：通过从上到下的继承关系，将各个子构件中的重复信息提取到父构件中统一管理</li>\n<li>聚合关系：将多个构件聚合为一个整体，便于统一操作</li>\n<li>依赖关系：Maven 定义了依赖的范围、依赖的传递、依赖的排除、版本仲裁机制等一系列规范和标准，让大型项目可以有序容纳数百甚至更多依赖</li>\n</ul>\n<p>17.maven配置优先级从高到低：pom.xml&gt; user settings &gt; global settings，<code>但settings.xml的profile会覆盖掉同id的pom.xml的profile</code>，setting.xml的profile优先级比pom中同名的profile高</p>\n<p>18.profile标签</p>\n<ul>\n<li>可以在profile中的activation元素中指定激活条件，当没有指定条件，然后指定activeByDefault为true的时候就表示当没有指定其他profile为激活状态时，该profile就默认会被激活。</li>\n</ul>\n<h1> 一、maven概述</h1>\n<h2> 1.1 为什么</h2>\n<ul>\n<li>\n<p>依赖管理工具</p>\n<ul>\n<li>\n<p>jar包也越来越多，不好管理</p>\n</li>\n<li>\n<p>jar包的来源多、第三方不规范，不好查找</p>\n</li>\n<li>\n<p>jar包的依赖关系，手动管理不可能</p>\n</li>\n</ul>\n</li>\n<li>\n<p>构建管理工具</p>\n</li>\n</ul>\n<p>运行一个web工程：编译.java源文件--&gt;打成war包--&gt;放到tomcat运行</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305120940815.png\" alt=\"image-20230512094055736\" loading=\"lazy\"></p>\n<h2> 1.2 是什么</h2>\n<h3> 1 构建</h3>\n<p>构建过程包含的主要的环节：</p>\n<ul>\n<li>清理<code>clean</code>：删除上一次构建的结果，为下一次构建做好准备    <code>target目录清空再创建</code></li>\n<li>编译<code>compile</code>：Java 源程序编译成 *.class 字节码文件</li>\n<li>测试<code>test</code>：运行提前准备好的测试程序     <code>juint自动运行测试</code></li>\n<li>报告：针对刚才测试的结果生成一个全面的信息</li>\n<li>打包<code>package</code>\n<ul>\n<li>Java工程：jar包</li>\n<li>Web工程：war包  war包下面会有很多jar包依赖</li>\n</ul>\n</li>\n<li>安装<code>install</code>：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库</li>\n<li>部署<code>deploy</code>\n<ul>\n<li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li>\n<li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li>\n</ul>\n</li>\n</ul>\n<h3> 2 依赖</h3>\n<p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说<code> A 依赖 B</code></p>\n<p>依赖管理中要解决的具体问题：</p>\n<ul>\n<li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li>\n<li>jar 包之间的依赖：通过依赖的传递性自动完成</li>\n<li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li>\n</ul>\n<h3> 3 工作机制</h3>\n<p>maven本地仓库的jar包有三类</p>\n<p>1.自己开发的maven工程的jar包</p>\n<p>2.依赖的框架第三方的jar包</p>\n<p>3.maven的插件</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305121009557.png\" alt=\"image-20230512100957503\" loading=\"lazy\"></p>\n<h2> 1.3 安装及配置</h2>\n<p>下载链接 <a href=\"https://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener noreferrer\">https://maven.apache.org/download.cgi</a></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305121023098.png\" alt=\"image-20230512102352028\" loading=\"lazy\"></p>\n<ul>\n<li>maven核心配置文件  conf/settings.xml</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305121023829.png\" alt=\"image-20230512102325781\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>指定本地仓库</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>注意</strong>：本地仓库本身也需要使用一个<strong>非中文、没有空格</strong>的目录</p>\n</li>\n</ul>\n<h1> 二、maven核心概念</h1>\n<h2> 2.1 gav坐标</h2>\n<h3> 向量说明</h3>\n<p>使用三个**『向量』<strong>在</strong>『Maven的仓库』<strong>中</strong>唯一<strong>的定位到一个</strong>『jar』**包</p>\n<p><mark>项目会包含很多个工程（模块），所以注意artifactId</mark></p>\n<ul>\n<li>groupId：公司或组织域名的倒序，<strong>通常也会加上项目名称</strong>\n<ul>\n<li>例如：com.atguigu.maven  <code>倒序看过来就是maven.atguigu.com</code></li>\n</ul>\n</li>\n<li>artifactId：<strong>模块的名称，将来作为 Maven 工程的工程名</strong></li>\n<li>version：模块的版本号，根据自己的需要设定\n<ul>\n<li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li>\n<li>例如：RELEASE 表示正式版本</li>\n</ul>\n</li>\n</ul>\n<p>举例：</p>\n<ul>\n<li>groupId：com.atguigu.maven</li>\n<li>artifactId：pro01-atguigu-maven</li>\n<li>version：1.0-SNAPSHOT</li>\n</ul>\n<h3> 坐标和仓库中 jar 包的存储路径</h3>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 2.2 创建工程</h2>\n<p>创建maven工程的命令，输入完，根据命令行提示操作</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305121057615.png\" alt=\"image-20230512105709552\" loading=\"lazy\"></p>\n<p>自动生成的POM文件</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <mark>2.3 pom.xml</mark></h2>\n<p>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现</p>\n<p>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用</p>\n<h3> parent</h3>\n<p>一个工程只能有一个父工程；父工程项目的打包方式必须是pom</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> modelVersion</h4>\n<p>指定了当前Maven模型的版本号，maven3都是4.0.0</p>\n<h3> groupId</h3>\n<p>子工程不写，默认使用父工程的</p>\n<h3> artifactId</h3>\n<h3> version</h3>\n<p>子工程不写，默认使用父工程的</p>\n<h3> properties</h3>\n<p>定义配置属性，可以直接<code>${}</code>引用</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> packaging</h3>\n<p>项目打包的类型</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> modules/module</h3>\n<p>组合多模块或聚合项目</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> dependencyManagement</h3>\n<p>用于父工程指定依赖版本，标签只是指定，并没有真正引入任何依赖到项目。子项目哪里用到了才真正引入相关依赖的jar包；</p>\n<h3> dependencies/dependency/scope</h3>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> exclusions/exclusion</h3>\n<h3> build/plugins/plugin</h3>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> profiles/profile</h3>\n<p>profile：轮廓，侧面的意思</p>\n<p>把适用于各种不同环境的配置信息分别准备好，部署哪个环境就激活哪个配置</p>\n<p>由于 profile 标签覆盖了 pom.xml 中的默认配置，所以 profiles 标签通常是 <code>pom.xml 中的最后一个标签</code></p>\n<ul>\n<li>\n<p>配置在当前pom.xml，当前POM生效</p>\n</li>\n<li>\n<p>配置在settings.xml，全局生效</p>\n</li>\n</ul>\n<hr>\n<p><strong>一个 profile 可以覆盖项目的最终名称、项目依赖、插件配置等各个方面以影响构建行为</strong>。</p>\n<ul>\n<li>id</li>\n</ul>\n<ul>\n<li>build\n<ul>\n<li>defaultGoal</li>\n<li>finalName</li>\n<li>resources</li>\n<li>testResources</li>\n<li>plugins</li>\n</ul>\n</li>\n<li>reporting</li>\n<li>modules</li>\n<li>dependencies</li>\n<li>dependencyManagement</li>\n<li>repositories</li>\n<li>pluginRepositories</li>\n<li>properties</li>\n</ul>\n<hr>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> distributionManagement</h3>\n<p>mvn deploy 用来将项目生成的构件分发到远程Maven仓库</p>\n<ul>\n<li>\n<p>maven仓库分为两种 <strong>release发布仓库</strong>(&lt; repository&gt;) 和 <strong>snapshot快照仓库</strong>(&lt; snapshotsrepository&gt;)</p>\n</li>\n<li>\n<p>snapshot快照仓库用于保存开发过程中的<strong>不稳定</strong>版本</p>\n</li>\n<li>\n<p>release正式仓库用来保存<strong>稳定</strong>的发行版本</p>\n</li>\n<li>\n<p>定义一个组件/模块为快照版本  只需要在pom文件中的该模板的<strong>版本号后面加上 -SNAPSHOT</strong>就可以了.  注意:<strong>必须是大写</strong></p>\n</li>\n<li>\n<p>maven会根据模块的版本号(pom文件中的)中<strong>是否带有SNAPSHOT来判断这个是</strong>快照版本还是正式版本</p>\n<ul>\n<li>如果是快照版本:\n<ul>\n<li>在mvn deploy时会自动发布到<code>快照版本库</code>中</li>\n<li>而使用快照版本的模块,在不更改版本号的情况下,直接编译打包时,maven会<strong>自动从镜像服务器上下载最新的快照版本</strong></li>\n</ul>\n</li>\n<li>如果是正式发布版本:\n<ul>\n<li>那么在mvn deploy时会自动发布到<code>正式版本库</code>中,</li>\n<li>而使用正式版本的模块,在不更改版本号的情况下,编译打包时,<strong>如果本地已经存在该版本的模块则使用本地的而不是主动去镜像服务器上下载</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171034598.png\" alt=\"image-20230517103455516\" loading=\"lazy\"></p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.4 目录</h2>\n<p>在超级POM（所有POM的父POM）中约定的目录层级</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305121104772.png\" alt=\"image-20230512110429701\" loading=\"lazy\"></p>\n<ul>\n<li>为什么约定？</li>\n</ul>\n<p>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录</p>\n<p>目前开发领域的技术发展趋势就是：<code>约定大于配置，配置大于编码</code></p>\n<h2> 2.5 mvn命令</h2>\n<p>运行 Maven 中和构建操作相关的命令时，必须进入到 pom.xml 所在的目录</p>\n<h3> mvn clean</h3>\n<p>删除 target 目录</p>\n<h3> mvn compile</h3>\n<p>主程序编译</p>\n<p>主体程序编译结果存放的目录：<code>target/classes</code></p>\n<h3> mvn test-compile</h3>\n<p>测试程序编译</p>\n<p>测试程序编译结果存放的目录：<code>target/test-classes</code></p>\n<h3> mvn test</h3>\n<p>运行junit测试用例，并生成测试报告，目录为：target/surefire-reports</p>\n<h3> mvn package</h3>\n<p>构建当前工程，生成jar包，目录为：target</p>\n<ul>\n<li>生成名称为<code>artifactId</code>-<code>version</code>.jar文件</li>\n</ul>\n<h3> mvn install</h3>\n<p>将本地构建过程中生成的 jar 包存入 Maven 本地仓库，目录：gav坐标+jar包名称</p>\n<p>另外，安装操作还会将 pom.xml 文件转换为 XXX.pom 文件一起存入本地仓库</p>\n<h3> mvn dependency:list</h3>\n<p>查看当前 Web 工程所依赖的 jar 包的列表</p>\n<h3> mvn dependency:tree</h3>\n<p>以树形结构查看当前web工程依赖</p>\n<h2> 2.6 web工程、java工程</h2>\n<ul>\n<li>\n<p>web工程中可以依赖java工程，最终部署的都是整个war包到tomcat服务器</p>\n</li>\n<li>\n<p>web工程打包后，所依赖的java工程变成 Web 工程的 WEB-INF/lib 目录下的 jar 包</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305150941081.png\" alt=\"image-20230515094159042\" loading=\"lazy\"></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305150942104.png\" alt=\"image-20230515094206070\" loading=\"lazy\"></p>\n<h2> 2.7 依赖的范围</h2>\n<h3> 1、依赖范围</h3>\n<p>标签的位置：dependencies/dependency/<strong>scope</strong></p>\n<p>标签的可选值：<strong>compile</strong>/<strong>test</strong>/<strong>provided</strong>/system/runtime/<strong>import</strong></p>\n<p>①compile 和 test 对比</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>main目录（空间）</th>\n<th>test目录（空间）</th>\n<th>开发过程（时间）</th>\n<th>部署到服务器（时间）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compile</td>\n<td>有效</td>\n<td>有效</td>\n<td>有效</td>\n<td>有效</td>\n</tr>\n<tr>\n<td>test</td>\n<td>无效</td>\n<td>有效</td>\n<td>有效</td>\n<td>无效</td>\n</tr>\n</tbody>\n</table>\n<p>②compile 和 provided 对比</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>main目录（空间）</th>\n<th>test目录（空间）</th>\n<th>开发过程（时间）</th>\n<th>部署到服务器（时间）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compile</td>\n<td>有效</td>\n<td>有效</td>\n<td>有效</td>\n<td>有效</td>\n</tr>\n<tr>\n<td>provided</td>\n<td>有效</td>\n<td>有效</td>\n<td>有效</td>\n<td>无效</td>\n</tr>\n</tbody>\n</table>\n<p>③结论</p>\n<p>compile：<code>通常使用的第三方框架的 jar 包</code>这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包</p>\n<p>test：<code>测试过程中使用的 jar 包</code>，以 test 范围依赖进来。比如 junit</p>\n<p>provided：<code>在开发过程中需要用到的“服务器上的 jar 包”</code>通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。说白了就是：“<strong>服务器上已经有了，你就别带啦！</strong></p>\n<h3> 2、依赖传递</h3>\n<p>A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？</p>\n<p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p>\n<ul>\n<li><code>B 依赖 C 时使用 compile 范围：可以传递</code></li>\n<li>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以</li>\n</ul>\n<h3> 3、依赖排除</h3>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.8 继承</h2>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305151353562.png\" alt=\"image-20230515135321508\" loading=\"lazy\"></p>\n<h3> 父POM</h3>\n<ul>\n<li><code>统一管理</code>各依赖的<code>版本号</code></li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程</p>\n<h3> 子POM</h3>\n<ul>\n<li>在 POM 的继承关系中，子 POM 可以覆盖父 POM 中的配置；如果子 POM 没有覆盖，那么父 POM 中的配置将会被继承</li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.9 生命周期</h2>\n<p>maven设定了三个生命周期环节</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305151542571.png\" alt=\"image-20230515154203513\" loading=\"lazy\"></p>\n<p>特点</p>\n<ul>\n<li>前面三个生命周期<code>彼此是独立</code>的。</li>\n<li>在任何一个<strong>生命周期内部</strong>，执行任何一个具体环节的操作，都是<strong>从本周期最初的位置开始执行，直到指定的地方</strong>。（本节记住这句话就行了，其他的都不需要记）</li>\n</ul>\n<p>Maven 之所以这么设计其实就是为了提高构建过程的自动化程度：让使用者<strong>只关心最终要干的</strong>即可，过程中的各个环节是自动执行的</p>\n<h2> 2.10 插件</h2>\n<blockquote>\n<p>生命周期定义了抽象的标准，从逻辑上该干什么事情；</p>\n<p>插件是具体实现</p>\n<p>插件目标是具体的一个功能</p>\n</blockquote>\n<h3> 插件</h3>\n<p>Maven 的核心程序仅仅负责宏观调度，不做具体工作。<strong>具体工作都是由 Maven 插件完成的</strong></p>\n<p><strong>一个插件就是具体的jar包</strong></p>\n<p>例如：编译就是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p>\n<h3> 目标（理解为插件的功能）</h3>\n<p>一个插件可以对应多个目标，而<strong>每一个目标都和生命周期中的某一个环节对应</strong>。</p>\n<p>Default 生命周期中有 compile 和 test-compile 两个和编译相关的环节，这两个环节对应 compile 和 test-compile 两个目标，而这两个目标都是由 maven-compiler-plugin-3.1.jar 插件来执行的</p>\n<h2> 2.11 仓库</h2>\n<ul>\n<li>本地仓库：在当前电脑上，为电脑上所有 Maven 工程服务</li>\n<li>远程仓库：需要联网\n<ul>\n<li>局域网：我们自己搭建的 Maven 私服，例如使用 Nexus 技术（<code>公司搭建自己的私服，其它人从上面下载依赖</code>）</li>\n<li>Internet\n<ul>\n<li>中央仓库</li>\n<li>镜像仓库：内容和中央仓库保持一致，但是能够分担中央仓库的负载，同时让用户能够就近访问提高下载速度，例如：Nexus aliyun</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>建议：不要中央仓库和阿里云镜像混用，否则 jar 包来源不纯，彼此冲突。</p>\n<p>专门搜索 Maven 依赖信息的网站：<a href=\"https://mvnrepository.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://mvnrepository.com/</a></p>\n<h1> 三、IDEA操作</h1>\n<h2> 3.1 创建父工程</h2>\n<p>一个工程只能有一个父工程</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305151431062.png\" alt=\"image-20230515143131006\" loading=\"lazy\"></p>\n<h2> 3.2 创建子工程</h2>\n<p>右击父工程，即可创建其子工程，父pom的打包方式变为pom</p>\n<h2> 3.3 创建web工程</h2>\n<p>步骤1：创建普通工程，修改打包方式为war 修改后，下图就会识别出该module</p>\n<p>步骤2：按下图点击添加web.xml</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305151504602.png\" alt=\"image-20230515150419543\" loading=\"lazy\"></p>\n<p>部署到tomcat服务端</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305151535275.png\" alt=\"image-20230515153537215\" loading=\"lazy\"></p>\n<h1> 四、微服务案例实操</h1>\n<h2> 4.1 创建工程，建立工程间依赖关系</h2>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305161005027.png\" alt=\"image-20230516100504968\" loading=\"lazy\"></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305161004013.png\" alt=\"image-20230516100414960\" loading=\"lazy\"></p>\n<h2> 4.2 生成微服务可运行 jar 包</h2>\n<p>可以以 SpringBoot 微服务形式直接运行的 jar 包包括：</p>\n<ul>\n<li>当前微服务本身代码</li>\n<li>当前微服务所依赖的 jar 包</li>\n<li>内置 Tomcat（Servlet 容器）</li>\n<li>与 jar 包可以通过 java -jar 方式直接启动相关的配置</li>\n</ul>\n<p>要加入额外的资源、相关配置等等，仅靠 Maven 自身的构建能力是不够的，所以要通过 build 标签引入下面的插件。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305161635330.png\" alt=\"image-20230516163548259\" loading=\"lazy\"></p>\n<p><strong>执行插件目标</strong></p>\n<p>对 demo02-user-auth-center 和 demo06-mysql-data-provider 都执行下面的命令：</p>\n<ul>\n<li>clean 子命令：清理之前构建的结果</li>\n<li>package 子命令：我们真正要调用的 spring-boot:repackage 要求必须将当前微服务本身的 jar 包提前准备好，所以必须在它之前执行 package 子命令。</li>\n<li>spring-boot:repackage 子命令：调用 spring-boot 插件的 repackage 目标</li>\n<li>-Dmaven.test.skip=true 参数：跳过测试</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><hr>\n<p>这样打出的jar包大小为40M左右，而直接使用maven的package命令，jar包只有7kb</p>\n<h2> 4.3 部署</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><a href=\"http://heavy_code_industry.gitee.io/code_heavy_industry/pro006-Linux/lecture/chapter03/verse04-07-nohup.html\" target=\"_blank\" rel=\"noopener noreferrer\">命令解释</a></p>\n<ul>\n<li>nohup   不挂断运行：就是指客户端断开连接后，命令启动的进程仍然运行</li>\n<li>&amp;     以后台方式运行命令，不阻塞前台命令的继续输入</li>\n</ul>\n<h1> 五、再知识</h1>\n<h2> 5.1 maven认识</h2>\n<p>Maven 本身的产品定位是一款『<strong>项目</strong>管理工具』</p>\n<p>所以从『项目管理』的角度来看，Maven 提供了如下这些功能：</p>\n<ul>\n<li>项目对象模型（POM）：将<code>整个项目本身抽象、封装为应用程序中的一个对象</code>，以便于管理和操作。</li>\n<li>全局性构建逻辑重用：Maven 对整个构建过程进行封装之后，程序员只需要指定配置信息即可完成构建。让构建过程从 Ant 的『编程式』升级到了 Maven 的『声明式』。</li>\n<li>构件的标准集合：在 Maven 提供的标准框架体系内，所有的构件都可以按照统一的规范生成和使用。</li>\n<li><code>构件关系定义</code>：Maven 定义了构件之间的三种基本关系，让大型应用系统可以使用 Maven 来进行管理\n<ul>\n<li>继承关系：通过从上到下的继承关系，将各个子构件中的重复信息提取到父构件中统一管理</li>\n<li>聚合关系：将多个构件聚合为一个整体，便于统一操作</li>\n<li>依赖关系：Maven 定义了依赖的范围、依赖的传递、依赖的排除、版本仲裁机制等一系列规范和标准，让大型项目可以有序容纳数百甚至更多依赖</li>\n</ul>\n</li>\n<li><code>插件目标系统</code>：Maven 核心程序定义抽象的生命周期，然后将插件的目标绑定到生命周期中的特定阶段，实现了标准和具体实现解耦合，让 Maven 程序极具扩展性</li>\n<li><code>项目描述信息</code>的维护：我们不仅可以在 POM 中声明项目描述信息，更可以将整个项目相关信息收集起来生成 HTML 页面组成的一个可以直接访问的站点。这些项目描述信息包括：\n<ul>\n<li>公司或组织信息</li>\n<li>项目许可证</li>\n<li>开发成员信息</li>\n<li>issue 管理信息</li>\n<li>SCM 信息</li>\n</ul>\n</li>\n</ul>\n<h2> 5.2 超级 POM</h2>\n<p>类似java的Object类，是所有类的父类</p>\n<p>Maven 在构建过程中有很多默认的设定。例如：源文件存放的目录、测试源文件存放的目录、构建输出的目录……等等。但是其实这些要素也都是被 Maven 定义过的。定义的位置就是：<strong>超级 POM</strong></p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>综上所述，平时我们使用和配置的 POM 其实大致是由四个层次组成的：</p>\n<ul>\n<li>超级 POM：所有 POM 默认继承，只是有直接和间接之分。</li>\n<li>父 POM：这一层可能没有，可能有一层，也可能有很多层。</li>\n<li>当前 pom.xml 配置的 POM：我们最多关注和最多使用的一层。</li>\n<li>有效 POM：隐含的一层，但是实际上真正生效的一层。继承关系中的所有 POM 叠加到一起，就得到了一个最终生效的 POM</li>\n</ul>\n<h2> <mark>5.3 settings.xml</mark></h2>\n<p>其中settings.xml是maven的全局配置文件，pom.xml则是文件所在项目的局部配置</p>\n<ul>\n<li>\n<p><strong>局部配置优先于全局配置</strong></p>\n</li>\n<li>\n<p>配置优先级从高到低：pom.xml&gt; user settings &gt; global settings</p>\n</li>\n<li>\n<p><mark>Profile标签可以覆盖当前文件的其它标签配置，所以以后<code>先看profile标签</code></mark></p>\n</li>\n</ul>\n<hr>\n<h3> localRepository</h3>\n<h3> repositories</h3>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> servers</h3>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> mirrors</h3>\n<p>id的值为central，表示该配置为中央仓库的镜像，任何对于中央仓库的请求都会转至该镜像</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> profiles</h3>\n<p><strong>如果一个settings.xml中的profile被激活，它的值会覆盖任何其它定义在pom.xml中带有相同id的profile</strong></p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> activeProfiles</h3>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305120940815.png",
      "date_published": "2023-03-27T00:00:00.000Z",
      "date_modified": "2024-01-17T05:56:28.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "devops"
      ]
    },
    {
      "title": "Nginx",
      "url": "https://mister-hope.github.io/tech/dev_ops/nginx.html",
      "id": "https://mister-hope.github.io/tech/dev_ops/nginx.html",
      "summary": "收获 0.文件颜色 蓝色是目录 绿色是可执行文件 红色是压缩文件 1.init 0 关机 2.tar zxvf xxx.tar.gz解压压缩包 3.yum intall -y xxx centos安装包 -y默认就是选了提示的yes 4.防火墙 关闭防火墙 systemctl stop firewalld.service 禁止防火墙开机启动 systemctl disable firewalld.service 放行端口 firewall-cmd --zone=public --add-port=80/tcp --permanent 重启防火墙 firewall-cmd --reload",
      "content_html": "<h1> 收获</h1>\n<p>0.文件颜色</p>\n<ul>\n<li>蓝色是目录</li>\n<li>绿色是可执行文件</li>\n<li>红色是压缩文件</li>\n</ul>\n<p>1.<code>init 0</code> 关机</p>\n<p>2.<code>tar zxvf xxx.tar.gz</code>解压压缩包</p>\n<p>3.<code>yum intall -y xxx</code> centos安装包 -y默认就是选了提示的yes</p>\n<p>4.防火墙</p>\n<ul>\n<li>关闭防火墙 <code>systemctl stop firewalld.service</code></li>\n<li>禁止防火墙开机启动 <code>systemctl disable firewalld.service</code></li>\n<li>放行端口 <code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></li>\n<li>重启防火墙 <code>firewall-cmd --reload</code></li>\n</ul>\n<p>5.<code>ps -ef | grep nginx</code> 过滤出nginx进程</p>\n<p>6.linux一般安装应用到<code>/usr/local</code></p>\n<p>7.<code>telnet ip 端口</code> 验证<strong>端口</strong>是否开通，必须加上端口号 eg: <code>telnet 192.168.10.101 80</code></p>\n<p>8.服务器可以上网，配置静态ip后，使用Xshell连接使用更方便；使用xftp查看服务器目录层级，可以直接右键记事本打开编辑文件；</p>\n<p>9.nginx.conf.default是默认的配置文件，搞坏了.conf可以使用默认的玩，<strong>编辑时一定注意<code>;</code>分号</strong></p>\n<p>10.vmware开的虚拟机中的nginx，如果给内网其它人访问到</p>\n<ul>\n<li>\n<p>vmware是nat网络模式下</p>\n</li>\n<li>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181512360.png\" alt=\"image-20230518151207302\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>访问<a href=\"http://10.8.52.38:2201/%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%BD%AC%E5%8F%91%E5%88%B0192.168.10.101:80%E7%AB%AF%E5%8F%A3%E5%8E%BB\" target=\"_blank\" rel=\"noopener noreferrer\">http://10.8.52.38:2201/，请求就可以转发到192.168.10.101:80端口去</a></p>\n</li>\n</ul>\n<p>11.命令curl</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>12.date 查看机器时间</p>\n<h1> 一、Nginx安装</h1>\n<p>vmware中安装cenos7</p>\n<blockquote>\n<p>报错：VMware Workstation与Credential Guard不兼容。在禁用 Device/Credential Guard后，可以运行VMware Workstation</p>\n<p>解决：<a href=\"http://681314.com/A/EioXEKQ48e\" target=\"_blank\" rel=\"noopener noreferrer\">http://681314.com/A/EioXEKQ48e</a> 注意解决后影响了wsl的使用</p>\n</blockquote>\n<h2> 1.1 配置上网</h2>\n<ul>\n<li>\n<p>安装后配置网卡文件；重启网络；测试</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171426774.png\" alt=\"image-20230517142615754\" loading=\"lazy\"></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>此时的网卡是<code>dhcp方式分配ip地址</code>，这种方式会在系统<strong>每次联网的时候分配一个ip</strong>给我们用，也就是说有可能系统下次启动的时候ip会变，这样非常不方便我们管理；</p>\n<p>此时的ip是<code>192.168.10.128</code>，能访问外网（<a href=\"http://xn--pingqq-6e8ix095b.com\" target=\"_blank\" rel=\"noopener noreferrer\">ping通了qq.com</a>），所以可以使用Xshell连接这个ip</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171425338.png\" alt=\"image-20230517142517272\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2> 1.2 配置静态ip</h2>\n<ul>\n<li>通常xxx.xxx.xxx.1是网关，但也不一定</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171435662.png\" alt=\"image-20230517143503639\" loading=\"lazy\"></p>\n<h2> 1.3 过程排错</h2>\n<p>1.先<code>ping qq.com</code>，没有数据包返回，说明不能上网</p>\n<p>2.再ping DNS如<code>ping 8.8.8.8 </code>，没有数据包返回，说明该机器没有上到互联网</p>\n<p>3.再排查网关配置是否正确，去看vmware的网关是多少</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171445170.png\" alt=\"image-20230517144525116\" loading=\"lazy\"></p>\n<p>4.所以修改centos7的网关为.2即可</p>\n<h2> 1.4 nginx版本</h2>\n<p>Nginx开源版  \t\t\t<a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener noreferrer\">http://nginx.org/</a>                         很干净的版本\nNginx plus 商业版\t<a href=\"https://www.nginx.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.nginx.com</a>             商业版，全家桶\nopenresty\t\t\t\t\t<a href=\"http://openresty.org/cn/\" target=\"_blank\" rel=\"noopener noreferrer\">http://openresty.org/cn/</a>             lua脚本扩展，免费，\nTengine\t\t\t\t\t\t<a href=\"http://tengine.taobao.org/\" target=\"_blank\" rel=\"noopener noreferrer\">http://tengine.taobao.org/</a>\t\t\tc语言扩展，免费，淘宝网发起</p>\n<ul>\n<li>\n<p>下载开源版本nginx-1.21.6.tar.gz</p>\n</li>\n<li>\n<p>xftp上传到服务器中，然后tar zxvf xxx解压</p>\n</li>\n<li>\n<p>然后进入文件夹，直接编译安装</p>\n<ul>\n<li>\n<p><code>./configure --prefix=/usr/local/nginx</code></p>\n</li>\n<li>\n<p>报错则依次安装以下</p>\n<ul>\n<li>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p>再依次编译执行</p>\n<ul>\n<li>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2> 1.5 启动nginx</h2>\n<p>进入安装好的目录/usr/local/nginx/sbin</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>\n<p>启动后，在宿主机访问服务器的nginx（本机ip即可），发现无法访问，需要关闭防火墙</p>\n</li>\n<li>\n<p>关闭后再访问，显示正常</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171516644.png\" alt=\"image-20230517151646600\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h3> 防火墙</h3>\n<p>关闭防火墙 <code>systemctl stop firewalld.service</code></p>\n<p>禁止防火墙开机启动 <code>systemctl disable firewalld.service</code></p>\n<p>放行端口 <code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p>\n<p>重启防火墙 <code>firewall-cmd --reload</code></p>\n<h3> 编写nginx启动脚本</h3>\n<p>创建服务脚本：将nginx启动命令作为服务器的一个服务，实现开机自己启动</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>服务脚本内容</p>\n<ul>\n<li>注意下面的路径要和安装nginx的路径一样</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>重新加载系统服务</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>启动服务</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>查看服务状态</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>开机自启动服务</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>修改完配置文件重新加载一下</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h1> 二、Nginx使用</h1>\n<h2> 2.1 目录</h2>\n<p>conf目录</p>\n<p><code>用来存放配置文件相关</code>，主要是<code>nginx.conf</code></p>\n<p>html目录</p>\n<p><code>用来存放静态文件的默认目录 html、css等，默认访问的就是index.html页面</code></p>\n<p>logs目录</p>\n<p><code>记录访问日志 access.log，日志文件大小可以配置；</code></p>\n<p><code>nginx.pid记录nginx程序的pid为887</code></p>\n<p>sbin目录</p>\n<p><code>nginx的主程序</code></p>\n<h2> 2.2 运行原理</h2>\n<p>1.运行时分为主进程，加载和校验配置文件，协调子进程；</p>\n<p>2.再forks启动子进程，去接收请求；读取到nginx.conf的站点配置，解析请求要访问的站点页面</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171545684.png\" alt=\"image-20230517154517629\" loading=\"lazy\"></p>\n<h2> 2.3 nginx.conf</h2>\n<ul>\n<li>编辑完配置后，重新加载一下<code>systemctl reload nginx</code></li>\n</ul>\n<p>去掉注释后的精简文件</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 关于sendFiile</h3>\n<p>linxu内核直接复制文件的技术</p>\n<p><strong>未使用：</strong></p>\n<ul>\n<li>nginx软件通过linux内核的网络接口接收请求，假如该请求要访问xxx.mp3文件</li>\n<li>nginx会将该文件读取到自己的应用程序内存，再通过linux网络接口缓存发送出去</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171602325.png\" alt=\"image-20230517160254270\" loading=\"lazy\"></p>\n<p><strong>启用sendFile后</strong></p>\n<ul>\n<li>nginx对于文件请求，直接发送给linux内核一个信号</li>\n<li>linux内核直接读取发送出去该文件</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305171605869.png\" alt=\"image-20230517160521822\" loading=\"lazy\"></p>\n<h2> 2.4 虚拟主机和域名解析</h2>\n<p>这里的虚拟主机可以理解为nginx配置中的不同的server，每个server代表一个主机</p>\n<p>参考文档：<a href=\"https://blog.csdn.net/weixin_41490593/article/details/94612784\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/weixin_41490593/article/details/94612784</a></p>\n<ul>\n<li>\n<p>当客户端发送一个请求后，通常是http协议，而<code>http1.1包含了host字段，即请求头带着域名的信息--默认url</code></p>\n</li>\n<li>\n<p>先通过DNS域名解析，得到ip，然后建立tcp连接，当服务器（以nginx为例）收到请求时，就会<code>解析http请求host字段</code>来判断你是访问的<code>那个server配置</code>下的代码。nginx配置多个server。这样就可以实现在一个服务器上通过http的host字段实现虚拟服务器</p>\n</li>\n<li>\n<p>虚拟主机（virtual hosting）即共享主机（shared web hosting），可以利用虚拟技术把一台完整的服务器分成若干个主机，因此可以在单一主机上运行多个网站或服务。</p>\n</li>\n<li>\n<p>举个栗子，有一台 ip 地址为 61.135.169.125 的服务器，在这台服务器上部署着谷歌、百度、淘宝的网站。为什么我们访问 <a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.google.com</a> 时，看到的是 Google 的首页而不是百度或者淘宝的首页？原因就是 <code>Host 请求头决定着访问哪个虚拟主机</code></p>\n</li>\n<li>\n<p>hosts文件配置  <code>ip   ---&gt;  域名</code>的映射</p>\n</li>\n</ul>\n<p>阿里云域名解析</p>\n<ul>\n<li>将实际购买的域名解析到具体的机器（虚拟机服务器也可以）上~</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305180928260.png\" alt=\"image-20230518092813199\" loading=\"lazy\"></p>\n<ul>\n<li>多用户/租户的二级用户，使用通配符 * 进行解析</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305180931945.png\" alt=\"image-20230518093150889\" loading=\"lazy\"></p>\n<p>域名解析实战</p>\n<ol>\n<li>多用户的二级域名</li>\n</ol>\n<p>nginx拿到完整的url（<a href=\"http://ruyb.glodon.com\" target=\"_blank\" rel=\"noopener noreferrer\">ruyb.glodon.com</a>），拆分得到二级域名的值（ruyb），nginx反向代理去数据库查到ruyb的个人信息，再转给nginx，nginx再返回给页面</p>\n<ol start=\"2\">\n<li>短网址</li>\n</ol>\n<p>短网址DB用key-value形式存储<code>uuid:真实网址</code>，url拆分得到uuid，拿到真实网址去redirect</p>\n<h2> 2.5 nginx虚拟主机配置</h2>\n<p>1.配置<strong>不同的端口号</strong>进行测试，注意配置中的分号不能省略<code>;</code></p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.配置<strong>不同的server_name</strong>域名</p>\n<p>宿主机的hosts文件配置了域名解析</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>nginx.conf</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.6 server_name匹配规则</h2>\n<ul>\n<li>\n<p><mark>重要</mark>：如果域名解析后打到服务器上了（即<strong>匹配到了nginx所监听的server端口</strong>），但是该请求带的域名<strong>匹配不上</strong>任何一个server_name，那么<strong>nginx默认就会返回该server端口下的第一个（按照书写的先后顺序）location对应的页面</strong></p>\n</li>\n<li>\n<p><strong>所有请求都是从上到下匹配server，匹配到就不往下走了</strong></p>\n</li>\n<li>\n<p><strong>在一个server中的同一servername中可以配置多个域名</strong></p>\n</li>\n</ul>\n<hr>\n<p>完整匹配</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>通配符匹配</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>通配符结束匹配</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>正则匹配</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>举例</p>\n<ul>\n<li><a href=\"http://xn--www-0h9di15grge85do97dz44albdv5s.r.com\" target=\"_blank\" rel=\"noopener noreferrer\">这样配置是指除了www.r.com</a>，其它的以<code>.r.com</code>结尾的请求都打到下面的server上</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.7 反向代理</h2>\n<blockquote>\n<p>好文推荐，讲代理的 <a href=\"https://zhuanlan.zhihu.com/p/464965616\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/464965616</a></p>\n<p>为什么有这东西，不能直接访问吗？利用反向代理可以作为内部 <strong>负载均衡(load balance)</strong> 的手段</p>\n</blockquote>\n<ol>\n<li>网关、代理与反向代理</li>\n</ol>\n<p>网关：转发数据包，访问网络的入口</p>\n<p>代理：即正向代理，是指用户主动配置代理服务器，用户和代理服务器是整体；是客户端视角</p>\n<p>反向代理：代理服务器和后台应用服务器是整体；是服务端视角</p>\n<p><code>正反代理都是一个数据传输中转站，代理服务器可以理解为一个网关</code></p>\n<ol start=\"2\">\n<li>反向代理在系统架构中的应用场景\n<ul>\n<li>传统公司系统架构，nginx做反向代理</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181358696.png\" alt=\"image-20230518135818640\" loading=\"lazy\"></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181358393.png\" alt=\"image-20230518135836335\" loading=\"lazy\"></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181359588.png\" alt=\"image-20230518135905537\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>中小型互联网，nginx可以改变请求的url，<code>url拼接形式可以转为100.html</code></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181403047.png\" alt=\"image-20230518140356977\" loading=\"lazy\"></p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181407869.png\" alt=\"image-20230518140751802\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>Nginx的反向代理配置</li>\n</ol>\n<p><code>proxy_pass</code>让http请求直接302</p>\n<ul>\n<li>\n<p>不支持https的proxy_pass，会直接配置文件报错</p>\n</li>\n<li>\n<p>location是/，说明访问站点的根目录会进来，把请求转发到<code>http://www.baidu.com\t</code>这个地址</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>基于反向代理的负载均衡器</li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.8 负载均衡</h2>\n<p><strong>轮询</strong>（使用多，但不能维持会话）</p>\n<ul>\n<li>\n<p>逐一转发，这种方式适用于无状态请求</p>\n</li>\n<li>\n<p>不能保存session信息，本次会话在机器A上，下次请求不一定到机器B了，拿不到会话信息</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>权重</strong>（不能维持会话）</p>\n<ul>\n<li>\n<p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况</p>\n</li>\n<li>\n<p>weight默认为1</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>ip_hash</p>\n<ul>\n<li>\n<p>根据客户端的ip地址转发同一台服务器，可以保持会话</p>\n</li>\n<li>\n<p>但是ip也可以变化，当信号不好时/手机切换基站时，ip发生变化，会话无法保持了</p>\n</li>\n</ul>\n<p>url_hash（适用固定资源，这些资源都不在同一服务器）</p>\n<ul>\n<li>根据用户访问的url定向流量转发请求</li>\n</ul>\n<p>least_conn</p>\n<ul>\n<li>最少连接访问</li>\n</ul>\n<p>fair</p>\n<ul>\n<li>根据后端服务器响应时间转发请求</li>\n</ul>\n<hr>\n<p>企业更多的是<code>轮询方式 + token方式</code>做负载均衡和维持会话（身份验证）</p>\n<blockquote>\n<p>token</p>\n<p><a href=\"https://cloud.tencent.com/developer/article/2062159\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.tencent.com/developer/article/2062159</a></p>\n<p><a href=\"https://www.jianshu.com/p/3b5e7293bf95\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.jianshu.com/p/3b5e7293bf95</a></p>\n</blockquote>\n<h2> 2.9 动静分离</h2>\n<p>将静态资源前置到nginx服务器上，减轻了应用服务器的压力，提高并发；而且即使动态服务不可用，但静态资源不会受到影响</p>\n<p>配置反向代理</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>同一个server下增加location</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.10 location匹配</h2>\n<p>location 前缀</p>\n<p><code>/</code> 通用匹配，任何请求都会匹配到</p>\n<p><code>= </code>精准匹配，不是以指定模式开头</p>\n<p><code>~ </code>正则匹配，区分大小写</p>\n<p><code>~*</code> 正则匹配，不区分大小写</p>\n<p><code>^~</code></p>\n<hr>\n<p>举例正则匹配</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>location匹配顺序</p>\n<ul>\n<li>\n<p>普通（非正则）location会一直往下，直到找到<mark>匹配度最高</mark>的（最大前缀匹配）</p>\n</li>\n<li>\n<p>多个正则location直接按书写顺序匹配，成功后就不会继续往后面匹配</p>\n</li>\n<li>\n<p>当普通location与正则location同时存在，如果正则匹配成功,则不会再执行普通匹配</p>\n</li>\n<li>\n<p><mark>所有类型location存在时，“=”匹配 &gt; “^~”匹配 &gt; 正则匹配 &gt; 普通（最大前缀匹配）</mark></p>\n</li>\n</ul>\n<h2> 2.11 URL rewrite</h2>\n<p>将含参数的那些URL地址，隐藏一下，应用场景有</p>\n<ul>\n<li>地址跳转，用户访问www.linux.com这个URL是，<a href=\"http://xn--www-p18dohn1qxmf3a288f0uj57an88eez9byp7a.baidu.com\" target=\"_blank\" rel=\"noopener noreferrer\">将其定向至一个新的域名www.baidu.com</a>。</li>\n<li>协议跳转，用户通过http协议请求网站时，将其重新跳转至https协议方式。</li>\n<li><strong>伪静态</strong>，将动态页面显示为静态页面方式的一种技术，便于搜索引擎的录入，同时建上动态URL地址对外暴露过多的参数，提升更高的安全性。</li>\n<li><strong>搜索引擎</strong>，SEO优化依赖于url路径，好记的url便于搜索引擎录入</li>\n</ul>\n<hr>\n<ul>\n<li>静态的写法：以^开头，$结尾，将uri<code>/2.html</code>重转到<code>/index.jsp?pageNum=2</code></li>\n<li>break不会改变原有的url<code>www.xxxx.com/2.html</code>；redirect会改变原有的url<code>www.xxxx.com/index.jsp?pageNum=2</code></li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181650286.png\" alt=\"image-20230518165058225\" loading=\"lazy\"></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>正则写法：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.12 网关服务器</h2>\n<p><strong>nginx更准确的叫法是网关服务器，包含反向代理、负载均衡、动静分离、URL WRITEd等功能</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.13 防盗链</h2>\n<p>网页的加载顺序是先加载HTML相关的内容，然后解析HTML的内容，那些需要加载图片，那些需要加载文件，是逐步加载的。</p>\n<p>背景：当发起一个请求xxx.html文件时，xxx.html文件引用到了zz.img，这时会再发请求去拿到zz.img，此时的请求头<code>Header</code>上就会带着<code>Referer</code>字段。通俗理解就是referer<strong>代表你从哪个url跳转过来的</strong></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181718284.png\" alt=\"image-20230518171852214\" loading=\"lazy\"></p>\n<p>这样就可以做防盗链配置，即不想让别人（爬虫）等使用你的静态资源，即<strong>指定从www.xxx.com跳转过来才可以访问静态资源</strong>；</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>none， 检测 Referer 头域不存在的情况，没有referer也可以访问；但带错了referer就不行</li>\n<li>blocked，检测 Referer 头域的值被防火墙或者代理服务器删除或伪装的情况。这种情况该头域的值不以\n“http://” 或 “https://” 开头</li>\n<li>server_names ，设置一个或多个 URL ，检测 Referer 头域的值是否是这些 URL 中的某一个</li>\n</ul>\n<h2> 2.14 高可用配置</h2>\n<p>为什么要有高可用？因为nginx万一挂掉了呢...</p>\n<ul>\n<li>keepalived是一个小软件，运行在nginx上，可以检测nginx之间有没有挂掉</li>\n<li>对外暴露出一个虚拟ip即可</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305190951045.png\" alt=\"image-20230519095138951\" loading=\"lazy\"></p>\n<ul>\n<li>安装keepalived</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>\n<p>修改配置，删除多余配置</p>\n<ul>\n<li>第一台机器</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305191000417.png\" alt=\"image-20230519100021352\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>第二台机器，优先级可以调低一点</p>\n<p>注意instance、virual_router_id、auth要对得上第一台机器</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305191002842.png\" alt=\"image-20230519100225774\" loading=\"lazy\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>启动服务</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>测试</p>\n<p>第一台机器使用ip addr可以看到有<code>ip200</code>，宿主机使用<code>ping 192.168.44.200</code>，可以ping通，但是第一台机器挂掉后（即这台机器的keepalived进程挂了），ping 命令会超时一次，但很快第二台机器上有了ip200，请求又恢复了正常。这里看起来就是<strong>ip200实现了漂移</strong></p>\n</li>\n<li>\n<p>以后访问统一出口<code>ip200</code>即可</p>\n</li>\n</ul>\n<h2> 2.15 https证书配置</h2>\n<blockquote>\n<p>如何通俗易懂的给你讲明白HTTPS？傻子都能看懂~ 墙裂推荐看多次</p>\n<p><a href=\"https://juejin.cn/post/6955767063524671524\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/6955767063524671524</a></p>\n</blockquote>\n<ul>\n<li>第一次请求先下载公钥</li>\n<li>整个过程私钥是保证绝对安全的</li>\n<li>公钥加密的公钥是解不开的</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305191048951.png\" alt=\"image-20230519104849875\" loading=\"lazy\"></p>\n<hr>\n<p>但这个过程还是存在问题：</p>\n<ul>\n<li>第一次下载公钥时可能被拦截，返回了一个假公钥，然后之后的请求都是用假公钥，有对应的假私钥进行解密，数据就不安全了</li>\n</ul>\n<hr>\n<p>P43---P50实战讲解买域名、买服务器、配置证书</p>\n<ul>\n<li>\n<p>网站<a href=\"https://oneinstack.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://oneinstack.com/</a>  在Linux上组合安装软件</p>\n</li>\n<li>\n<p>在Nginx上配置证书</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305191616563.png\" alt=\"image-20230519161638489\" loading=\"lazy\"></p>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305181512360.png",
      "date_published": "2023-03-27T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "devops"
      ]
    },
    {
      "title": "前端tips",
      "url": "https://mister-hope.github.io/tech/glodon_records/00-%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98.html",
      "id": "https://mister-hope.github.io/tech/glodon_records/00-%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98.html",
      "summary": "4月 填报组件 1.本地启动前后端 spring.cloud.config.label=estate;spring.profiles.active=dev;spring.cloud.config.uri=http://10.20.1.55:7001/;spring.application.name=estate-fill-ruyb;server.servlet.context-path=/estate-fill",
      "content_html": "<h1> 4月  填报组件</h1>\n<h2> 1.本地启动前后端</h2>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>webpack.module.js</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以再module.js文件修改路由，这样请求会打到自己在本地启动后端的服务</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304101714023.png\" alt=\"image-20230410171402961\" loading=\"lazy\"></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304101714364.png\" alt=\"image-20230410171455337\" loading=\"lazy\"></p>\n<h2> 2.前端配置模块的整体路由</h2>\n<p>写好某个模块的代码后，如fill_web</p>\n<h3> 1.超级后台配置模块</h3>\n<ul>\n<li><code>moduleCode</code>就是模块编码</li>\n<li><code>fill_web/FillFormPreview</code>  去匹配boot.js</li>\n<li>扩展数据中可以放一些需要用到的数据，这里是预置了<code>fillTemplateCode</code></li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061044127.png\" alt=\"image-20230406104436083\" loading=\"lazy\"></p>\n<h3> 2.配置内测服务器的boot.js</h3>\n<ul>\n<li><code>key</code>对应的就是上面配置的路径</li>\n<li><code>baseUrl</code>对应的是fill_web服务打包后的根路径</li>\n<li>路由转发到 <code>域名 + fill_web/daily + FillFormPreview</code></li>\n</ul>\n<p><a href=\"https://geek.glodon.com/projects/ESTATEPRODUCTPLATFORM/repos/coral-bootstrap/browse/config/dev/boot.js\" target=\"_blank\" rel=\"noopener noreferrer\">https://geek.glodon.com/projects/ESTATEPRODUCTPLATFORM/repos/coral-bootstrap/browse/config/dev/boot.js</a></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061047181.png\" alt=\"image-20230406104750157\" loading=\"lazy\"></p>\n<ul>\n<li><code>FillFormPreview</code>对应到fill_web服务的入口类</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061059385.png\" alt=\"image-20230406105920345\" loading=\"lazy\"></p>\n<h3> 3.加载newMain.js文件</h3>\n<h3> 4.拿到模块管理预置的扩展数据</h3>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061102011.png\" alt=\"image-20230406110241967\" loading=\"lazy\"></p>\n<h2> 3.hooks用法汇总</h2>\n<p>初步理解：hooks让函数式组件(Function)更高效，代码更加简洁</p>\n<h3> 3.0 视图更新</h3>\n<p>state发生了变化，就重新渲染视图；实际上通过<code>虚拟DOM 配合 Diff 算法</code>达到部分更新</p>\n<p>执行过程</p>\n<ol>\n<li>初次渲染时，React会根据初始化的state（model），创建一个<code>虚拟DOM对象（树）</code></li>\n<li>根据虚拟DOM生成真正的DOM，渲染到页面</li>\n<li>当数据变化后(setState())，会重新根据新的数据，创建新的虚拟DOM对象（树）</li>\n<li>与上一次得到的虚拟DOM对象，使用<code>Diff算法</code>比对（找不同），得到需要更新的内容</li>\n<li>最终，React只将<code>变化的内容</code>更新（patch）到DOM中，重新渲染到页面</li>\n</ol>\n<h3> 3.1 useState 状态管理</h3>\n<p><code>useState</code>使普通函数组件也有了状态管理的能力</p>\n<ul>\n<li>使用时建议<strong>只存储跟组件渲染相关的数据</strong></li>\n<li>setState是一个函数，它接收一个新的 state 值并将组件的一次重新渲染加入队列</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<ul>\n<li>setState是异步的，不会立即更新，是收集所有setState后，再进行视图更新</li>\n</ul>\n<hr>\n<ul>\n<li>当我们设置状态为数组或对象且只想改变其中一项属性时，正确方法是使用解构赋值或是深浅拷贝的形式，这样才能改变info的指针指向，才能够刷新视图</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3.2 useEffect 副作用</h3>\n<p><code>useEffect</code>主要用于监听依赖项，执行副作用函数</p>\n<p>useEffect方法有两个参数，第1个参数是<strong>要执行的函数</strong>，第2个参数是一个<strong>依赖项数组</strong>(根据具体需要监听什么<strong>状态值</strong>来决定数组内要填写什么)。</p>\n<blockquote>\n<p>不传递参数时，<code>每次渲染都会运行useEffect</code></p>\n</blockquote>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>传递空数组，<code>仅在挂载和卸载的时候执行</code></p>\n</blockquote>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>传递非空数组，在监听值更新时才会触发</p>\n</blockquote>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3.3 useMemo 状态缓存，提升性能</h3>\n<p><code>useMemo</code>是以<strong>缓存状态</strong>的形式来对渲染上进行性能优化的手段</p>\n<ul>\n<li>存在问题：父组件重新渲染会触发子组件渲染，避免子组件的非必要渲染（子组件的状态没变化就不要重新渲染子组件啦）</li>\n</ul>\n<p>父组件</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>子组件 Button</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>期望只有当name发生改变时候，才触发子组件的changeName方法。但当我们改变content时，也触发了changeName。因为<strong>父组件的重新渲染也重新渲染了子组件</strong></p>\n<p>优化子组件  使用useMemo<strong>对状态name进行缓存</strong>，只有改变的时候才触发相应方法</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3.4 useCallBack  方法缓存</h3>\n<h3> 3.5 useRef  最新指向</h3>\n<p>useRef返回一个可变的ref对象，其.current属性被初始化为传入的参数(<code>initialValue</code>)。返回的ref对象<strong>在组件的整个生命周期内不变</strong></p>\n<ul>\n<li>用ref对象的.current去赋值和使用，总是能拿到最新的值</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3.6 useContext  跨组件通信</h3>\n<p><code>useContext</code>主要用于父子组件之间状态的<strong>跨级传递</strong>，实现了状态的共享类似于Vue的Vuex。</p>\n<p>在认识useContext之前，与<strong>孙组件</strong>的状态传递是通过props。</p>\n<p>父组件</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>子孙组件</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4.公共组件的抽提</h2>\n<p>通常，在多个页面重复使用或表现形式相似的地方可以考虑抽提为公共组件，进行复用</p>\n<p>填报组件中对react简单公共组件的抽提，可以简单学习<code>HeaderContent.js</code>文件</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111523083.png\" alt=\"image-20230511152349013\" loading=\"lazy\"></p>\n<p>对应页面长这样：</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111524697.png\" alt=\"image-20230511152436645\" loading=\"lazy\"></p>\n<p>这个页面右侧的三个按钮是定义的prop中的<code>RenderRDom</code>，通过父组件传递函数来渲染的</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111527399.png\" alt=\"image-20230511152753351\" loading=\"lazy\"></p>\n<h2> 5.前端antd组件数据回显</h2>\n<p>注意value和onChange</p>\n<h1> 5月 填报组件</h1>\n<h2> 1.json解析顺序改变</h2>\n<p>问题</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>解决：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h1> 6月 前端发版</h1>\n<p>以填报前端发标准版saas生产为例：</p>\n<h2> 1.发版分支打Tag(v1.0.2)后，触发对应jenkins--prod--fill-web的构建到pre</h2>\n<p>jenkins-fill-web地址：<a href=\"http://jenkins.glodon.com/job/esplatform/job/coral-customize-project/job/coral-customize-project-prod/job/estate-field-fill-web/\" target=\"_blank\" rel=\"noopener noreferrer\">http://jenkins.glodon.com/job/esplatform/job/coral-customize-project/job/coral-customize-project-prod/job/estate-field-fill-web/</a></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202307051006891.png\" alt=\"image-20230616160739023\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>其中构建参数这里，可以看到选中了<code>prod</code>命令，触发fill-web服务的<code>package.json</code>中的命令</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161610590.png\" alt=\"image-20230616161020548\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>jenkin构建中，prod命令</p>\n<p><code>yarn run build:prod --tag=v1.0.2</code></p>\n<p><code>node automate/webpack.build_prod.js  --tag=v1.0.2</code></p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161613299.png\" alt=\"image-20230616161336248\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>执行<code>change_version_and_built</code>方法：维护了static.config.js的版本号、执行真正的编译命令</p>\n</li>\n<li>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161620127.png\" alt=\"image-20230616162025072\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>执行到<code>package.json中</code>真正的编译命令</p>\n</li>\n<li>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161622632.png\" alt=\"image-20230616162211592\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2> 2.编译过程，把fill_web编译打包后的文件夹拷贝到pre机器中的pre和bak/当前日期目录下</h2>\n<p><code>通过内网跳板机[jsf_10.0.169.46]部署至远程跳板机[root@47.93.14.96:/home/deploy/bridge]，再部署至目标服务器[root@172.16.16.81:/usr/share/nginx/pre]</code></p>\n<p><a href=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161636028.png\" target=\"_blank\" rel=\"noopener noreferrer\">https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161636028.png</a></p>\n<h2> 3.pre部署到prod</h2>\n<p>Jenkins-fill-web-pre地址<a href=\"http://jenkins.glodon.com/job/esplatform/job/deploy-pre-to-prod/job/estate-field-web/\" target=\"_blank\" rel=\"noopener noreferrer\">http://jenkins.glodon.com/job/esplatform/job/deploy-pre-to-prod/job/estate-field-web/</a></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161641091.png\" alt=\"image-20230616164148055\" loading=\"lazy\"></p>\n<h3> 3.1 第一步什么都不选，先点下build，刷新下当前日期的目录，如20230616</h3>\n<h3> 3.2 第二步选中deploy_to_prod按钮，选中当前日期的目录，再点build，才会真正部署到生产机器上</h3>\n<h1> 7月 填报优化</h1>\n<h2> 1.Search的下拉选项逻辑</h2>\n<p>关于搜索字段在列表时的下拉选项的应用逻辑：</p>\n<ol>\n<li>自定义模板的<code>搜索字段</code>，其下拉选项内容来自<code>数据库配置的baseFieldsInfo</code></li>\n<li>自定义模板的<code>confirm点击事件</code>，\n<ul>\n<li>baseFieldsInfo中字段的<code>dataUrl</code>和<code>options</code>有值的话，会同步到<code>search_field_info</code></li>\n<li>baseFieldsInfo中字段的<code>dataUrl</code>和<code>options</code>没值的话，先会取模板的<code>baseForm</code>中的dataUrl和options，然后再取<code>detailForm</code>中的dataUrl和options，同步到<code>search_field_info</code></li>\n</ul>\n</li>\n<li>Search.jsx文件会先取<code>search_field_info</code>中的<code>ops</code>作为dataSource，再取<code>dataUrl</code>的数据源字典覆盖dataSource</li>\n</ol>\n<p>综上优先级是</p>\n<p><strong>baseFieldsInfo配置的值&gt;baseForm的值&gt;detailForm的值，然后整体是dataUrl&gt;options</strong></p>\n<h2> 2.Search的日期控件</h2>\n<p>日期字段，如果要支持范围搜索的话，</p>\n<p>1.首先是日期控件，且ID是内置的标准字段，控件配置中的格式只能选择<strong>日期和日期时间</strong></p>\n<ul>\n<li>开发注意：<strong>base_field_info要注意添加format为between</strong>，<strong>type和formType为date</strong>，才能在显示出搜索框</li>\n</ul>\n<p>2.该标准字段对应到后端entity和dto的字段类型只能为<strong>LocalDateTime</strong></p>\n<p>3.搜索结果是start的00:00:00，到end的23:59:59范围内的</p>\n<hr>\n<ul>\n<li></li>\n</ul>\n<h1> 8月 一户一档</h1>\n<h1> 10月  填报优化</h1>\n<h2> 1 搜索框日期控件的使用和效果</h2>\n<p>模板中search_field_info各属性说明</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>如果type是date类型的\n<ul>\n<li>如果是标准字段，<mark>且字段没有绑定控件，需手动指定format</mark>，<mark>例如updateTime和creatTime</mark>\n<ul>\n<li>当字段存储为时间格式 <strong>年月日T时分秒</strong> 时，指定<strong>format为dateTime</strong></li>\n<li>当字段存储为字符串格式<strong>年-月-日</strong>时，指定<strong>format为date</strong></li>\n</ul>\n</li>\n<li>如果是标准字段，且字段绑定了控件，无需指定format（根据控件选择配置项格式决定），后端该字段类型统一为<mark>LocalDateTime</mark></li>\n<li>如果是扩展字段，指定配置项格式即可</li>\n</ul>\n</li>\n</ul>\n<p>模板配置好后，实现的效果是：</p>\n<ul>\n<li>如果配置项格式为<strong>日期、日期时间</strong>的话，那么搜索框显示出<strong>日期范围搜索</strong>\n<ul>\n<li>搜索结果是start的00:00:00，到end的23:59:59范围内的</li>\n</ul>\n</li>\n<li>如果配置项格式为<strong>月、周、时间</strong>的话，那么搜索框展示的是<strong>指定字符串搜索</strong></li>\n</ul>\n<h2> 2 搜索框扩展字段使用</h2>\n<h3> 2.1 扩展字段在弹窗页面使用</h3>\n<p>直接拖拽控件，那么就可以在保存模板时，搜索字段展示下拉选到！</p>\n<h3> 2.2 扩展字段在web页面使用</h3>\n<ol>\n<li>将web页面的控件id命名为<strong>standardInfo_xxx</strong>；</li>\n<li>拖动<strong>同一类型，同一配置项</strong>的控件在弹窗页面，格式选中为<strong>hidden</strong>，控件id命名为<strong>xxx</strong>；</li>\n<li>保存模板时，下拉搜索字段选中弹窗的控件即可；</li>\n</ol>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304101714023.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "glodon"
      ]
    },
    {
      "title": "后端tips",
      "url": "https://mister-hope.github.io/tech/glodon_records/00-%E5%90%8E%E7%AB%AF%E9%97%AE%E9%A2%98.html",
      "id": "https://mister-hope.github.io/tech/glodon_records/00-%E5%90%8E%E7%AB%AF%E9%97%AE%E9%A2%98.html",
      "summary": "4月 填报组件 1.数据库表、领域模型及时同步 开发过程中，涉及到的数据库表修改应该及时记录在项目的migration下，跟随PR一起上传到项目；同样，涉及到的领域模型字段也要及时同步修改相应文件 2.mp框架的updateTime未更新 存在问题： 第一次新增一条A记录，mp框架会给实体类的updateTime字段因为为空，所以进行赋值 第二次编辑时，因为前端传来的DTO中含有updateTime字段，即该字段有值，所以框架不会自动进行最新时间的更新",
      "content_html": "<h1> 4月 填报组件</h1>\n<h2> 1.数据库表、领域模型及时同步</h2>\n<p>开发过程中，涉及到的<code>数据库表修改</code>应该及时记录在项目的migration下，跟随PR一起上传到项目；同样，涉及到的<code>领域模型字段</code>也要及时同步修改相应文件</p>\n<h2> 2.mp框架的updateTime未更新</h2>\n<p>存在问题：</p>\n<ul>\n<li>\n<p>第一次新增一条A记录，mp框架会给实体类的updateTime字段因为为空，所以进行赋值</p>\n</li>\n<li>\n<p>第二次编辑时，因为前端传来的DTO中含有updateTime字段，即该字段有值，所以框架不会自动进行最新时间的更新</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111550070.png\" alt=\"image-20230511155047034\" loading=\"lazy\"></p>\n<p>解决方式：</p>\n<ul>\n<li>因为mp框架使用updateById更新时，参数为entity，所以在各业务类统一DTO转Entity时，手动更新updateTime字段为最新时间</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111555208.png\" alt=\"image-20230511155540173\" loading=\"lazy\"></p>\n<p><a href=\"https://geek.glodon.com/projects/ESTATE-FIELD-PRODUCT/repos/estate-field-fill-server/pull-requests/140/overview\" target=\"_blank\" rel=\"noopener noreferrer\">https://geek.glodon.com/projects/ESTATE-FIELD-PRODUCT/repos/estate-field-fill-server/pull-requests/140/overview</a></p>\n<h1> 5月 远洋 + 填报</h1>\n<h2> 1.操作BigDecimal时 多用成本封装的工具类</h2>\n<p>PR例子：<a href=\"https://geek.glodon.com/projects/JSF-COST/repos/gatling-yuanyang-server/pull-requests/794/overview\" target=\"_blank\" rel=\"noopener noreferrer\">https://geek.glodon.com/projects/JSF-COST/repos/gatling-yuanyang-server/pull-requests/794/overview</a></p>\n<p>加减乘除--<code>NumberUtil</code></p>\n<p>Object转BigDecimal--<code>BigDecimalUtils</code></p>\n<h2> 2.lambda中使用局部变量报错</h2>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305081533679.png\" alt=\"image-20230508153358581\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>编译报错：<code>Variable used in lambda expression should be final or effectively final</code></p>\n</li>\n<li>\n<p>143行并没有加上final修饰却也可以正常编译</p>\n</li>\n</ul>\n<hr>\n<p>原因：</p>\n<p>jdk8以前，匿名类中如果要访问局部变量的话，那个局部变量必须<code>显式的声明</code>为 final；lambda表达式都是实现接口方法，</p>\n<p>jdk8后，在匿名类或 Lambda 表达式中访问的局部变量，如果不是 final 类型的话，编译器自动加上 final 修饰符，即Java8新特性：effectively final。</p>\n<h2> 3.新增数据字典</h2>\n<p>工程中新增数据字典的sql</p>\n<p>52000043</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>用字典的名称 查询字典数据，平台提供的接口<code>masterDataBasicClient.queryList</code></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4.cpt重复显示标题，删除多余页</h2>\n<p>重复显示表头 <a href=\"https://help.fanruan.com/finereport/doc-view-334.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://help.fanruan.com/finereport/doc-view-334.html</a></p>\n<p>删除多余页，就是将表之外的行，列全部清空 <a href=\"https://bbs.fanruan.com/wenda/question/57960.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://bbs.fanruan.com/wenda/question/57960.html</a></p>\n<h2> 5.jdk8  stream流 map reduce</h2>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305101501210.png\" alt=\"image-20230510150137035\" loading=\"lazy\"></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> 6月 绿城填报</h1>\n<h2> 1.枚举类参数</h2>\n<p>理解枚举类</p>\n<ul>\n<li>NEWS、MONTH_REPORT、GRADE都是对象！！！</li>\n<li><strong>括号类的是枚举对象的变量！！！</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>\n<p>如果该枚举<code>对象</code>是作为<code>@RequestBody</code>对象<code>WidgetBillProps</code>其中的一个字段，那么得传入枚举类中定义的<mark>变量</mark>，即WidgetBillProps的<code>fillType=项目月报</code>，才可以匹配上</p>\n</li>\n<li>\n<p>如果该枚举对象作为@RequestParam，@PathVariable的参数，那么直接传入枚举对象即可匹配上，如<code>fillType=MONTH_REPORT</code></p>\n</li>\n</ul>\n<h2> 2.平台导出+jxls</h2>\n<p>复杂报表导出功能介绍:<a href=\"https://km.glodon.com/pages/viewpage.action?pageId=252483562\" target=\"_blank\" rel=\"noopener noreferrer\">https://km.glodon.com/pages/viewpage.action?pageId=252483562</a></p>\n<p>复杂报表导出集成文档:<a href=\"https://km.glodon.com/pages/viewpage.action?pageId=253708316\" target=\"_blank\" rel=\"noopener noreferrer\">https://km.glodon.com/pages/viewpage.action?pageId=253708316</a></p>\n<p>主要步骤：</p>\n<ol>\n<li>\n<p>超级后台模块添加<code>report</code>标签，在超级后台的报表管理中，对应的模块下创建excel模板</p>\n</li>\n<li>\n<p>配置好excel模板后，前端通过接口获取到objectId传回后端</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>后端接口通过objectId获取到模板文件后，构建<code>context</code>，填充文件中的占位符</p>\n</li>\n<li>\n<p>通过IO流将文件数据转为二进制传到<code>response</code>对象中</p>\n</li>\n<li>\n<p>前端收到后构建下载事件</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<hr>\n<p>思考：</p>\n<p>0.平台的做法相比之前的poi导出excel，少写了很多接口，前后端一个接口搞定；</p>\n<p>1.借助这个机制也可以将模板文件放到自己后端仓库中，直接创建input输入流使用；</p>\n<p>2.前端的导出目前没有loading的提示，可完善；</p>\n<h1> 7月-填报优化</h1>\n<h2> 1.填报技术点</h2>\n<h3> 1.1 平台的导出报表模板管理</h3>\n<ul>\n<li>\n<p>复杂报表导出功能介绍:<a href=\"https://km.glodon.com/pages/viewpage.action?pageId=252483562\" target=\"_blank\" rel=\"noopener noreferrer\">https://km.glodon.com/pages/viewpage.action?pageId=252483562</a></p>\n</li>\n<li>\n<p>复杂报表导出集成文档:<a href=\"https://km.glodon.com/pages/viewpage.action?pageId=253708316\" target=\"_blank\" rel=\"noopener noreferrer\">https://km.glodon.com/pages/viewpage.action?pageId=253708316</a></p>\n</li>\n<li>\n<p>wiki有两次录屏分享和PPT</p>\n</li>\n<li>\n<p>report演示代码：<a href=\"https://geek.glodon.com/projects/ESTATEPRODUCTPLATFORM/repos/coral-demo/browse\" target=\"_blank\" rel=\"noopener noreferrer\">https://geek.glodon.com/projects/ESTATEPRODUCTPLATFORM/repos/coral-demo/browse</a></p>\n</li>\n</ul>\n<h3> 1.2 发送消息分享</h3>\n<p>SendMessageUtils</p>\n<ul>\n<li>消息服务wiki：<a href=\"https://km.glodon.com/pages/viewpage.action?pageId=253710635\" target=\"_blank\" rel=\"noopener noreferrer\">https://km.glodon.com/pages/viewpage.action?pageId=253710635</a></li>\n<li>源码coral-message</li>\n<li>源码coral-notification</li>\n<li>源码coral-event  <code>MQEventBus</code>的publish方法；kafka</li>\n</ul>\n<h3> 1.3 redis</h3>\n<ul>\n<li>\n<p>业务背景：创建一个单据时，点入详情会有二开控件，每次点进或者其它人点进需要看到的是同一份控件的数据；\n即在首次点入详情时，会<strong>查询控件data数据</strong>（业务需要每次回显上个月或者最新的汇总数据，但此时数据库还没有这条控件），<strong>之后所有的回显编辑都在这一条data上面操作</strong>，总之与外层单据id和填报类型绑定；</p>\n</li>\n<li>\n<p>存在问题：查询的接口只是返回控件数据，点保存的新增接口是数据库插入数据；\n场景1：A点进单据，B也点进单据，此时A、B看到的单据是同一份，且单据中的<strong>控件数据也应该是同一份</strong>（即控件id一致），不能出现点保存后，A存了一份控件数据，B也存了一份数据；</p>\n</li>\n<li>\n<p>解决方式：考虑第三方提供控件id，保证唯一性，联想到redis</p>\n<p>查询接口</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>新增接口及时清除redis的key</p>\n</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 1.4 设计模式</h3>\n<h4> 外观模式（门面模式，Facade Pattern）</h4>\n<ul>\n<li>向现有的系统添加一个接口，来隐藏系统的复杂性</li>\n</ul>\n<p>FlDocController（统一暴露接口）</p>\n<p>FlDocFacadeService（根据分发不同的Service）</p>\n<h4> 策略模式（Strategy Pattern）</h4>\n<ul>\n<li>关注的是各个类之间的相互作用，将职责划分清楚，使得我们的代码更加地清晰</li>\n<li>类的行为或其算法可以在运行时更改（根据所传的widgetCode决定应用不同的策略）</li>\n</ul>\n<p>WidgetBuilderFactory（注入所有实现类，match匹配返回具体的实现类）</p>\n<p>WidgetBuilder（统一接口，定义match和其它公共方法）</p>\n<p>RegionInfoTableWidgetBuilder（具体实现类，覆写match和WidgetBuilder接口公共方法）</p>\n<h3> 1.5 其它</h3>\n<p><strong>顶层接口--父抽象类--子实现类</strong></p>\n<ul>\n<li>涉及到在不同子类中重复使用2~3次以上的代码，可以考虑抽提到抽象基类中的方法进行完善；</li>\n<li>对于查询类（query）接口，可以考虑抽提queryWrapper接口，方便扩展查询条件；</li>\n<li>基类entity的字段也不是固定的，会随着业务场景的不断添加而更加完善；（是否保存saved字段）</li>\n<li>DRY思想：</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202307171606874.png\" alt=\"e8b4f0f21d5f5a02e11137b36ff7f2b\" loading=\"lazy\"></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202307171606141.jpg\" alt=\"65eee605ada108ba036e42551c07585\" loading=\"lazy\"></p>\n<h1> 8月-一户一档、裕龙港务</h1>\n<h1> 11月-一户一档</h1>\n<h2> 1.不再使用a.equals(b)，全部改用Objects.equal(a,b)</h2>\n<h2> 2.分页使用一定要注意</h2>\n<p>场景一：带着分页参数<strong>直接查询数据库</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>场景二：前端有分页参数，查询别人数据库后，<strong>需要自己对结果分页</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111550070.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "glodon"
      ]
    },
    {
      "title": "Jdk8新特性",
      "url": "https://mister-hope.github.io/tech/java_basic/jdk%E6%96%B0%E7%89%B9%E6%80%A7.html",
      "id": "https://mister-hope.github.io/tech/java_basic/jdk%E6%96%B0%E7%89%B9%E6%80%A7.html",
      "summary": "学习资料 https://blog.csdn.net/LXYDSF/article/details/125919046 一、Stream新特性 Stream概念 java.util.stream包 Stream 是Java8 中处理集合的关键抽象概念，它可以对集合执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询。 Stream API 提供了一种高效且易于使用的处理数据的方式。 Stream 和Collection 集合的区别：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算。 集合讲的是数据，关注的是数据的存储，与内存打交道 Stream 讲的是计算，关注的是对数据的运算，与CPU打交道 Stream是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 Stream 自己不会存储元素。 Stream 不会改变源对象。相反，他们会返回一个持有结果的新 Stream 。 Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。",
      "content_html": "<p>学习资料 <a href=\"https://blog.csdn.net/LXYDSF/article/details/125919046\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/LXYDSF/article/details/125919046</a></p>\n<h1> 一、Stream新特性</h1>\n<h2> Stream概念</h2>\n<p>java.util.stream包</p>\n<ul>\n<li>\n<p>Stream 是Java8 中<strong>处理集合</strong>的关键抽象概念，它可以对集合执行非常复杂的查找、过滤和映射数据等操作。<strong>使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询</strong>。</p>\n</li>\n<li>\n<p>Stream API 提供了一种高效且易于使用的处理数据的方式。</p>\n<ul>\n<li><strong>Stream 和Collection 集合的区别</strong>：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算。</li>\n</ul>\n</li>\n<li>\n<p><strong><mark>集合讲的是数据，关注的是数据的存储，与内存打交道</mark></strong></p>\n</li>\n<li>\n<p><strong><mark>Stream 讲的是计算，关注的是对数据的运算，与CPU打交道</mark></strong></p>\n</li>\n<li>\n<p>Stream是<mark>数据渠道</mark>，用于操作数据源（集合、数组等）所生成的元素序列。</p>\n<ul>\n<li>Stream 自己不会存储元素。</li>\n<li>Stream 不会改变源对象。相反，他们会<em>返回一个持有结果的新 Stream</em> 。</li>\n<li>Stream 操作是延迟执行的。这意味着他们会等到<em>需要结果的时候才执行</em>。</li>\n</ul>\n</li>\n</ul>\n<h2> Stream操作</h2>\n<h3> 1 操作步骤</h3>\n<ol>\n<li>创建 Stream 一个数据源（如：集合、数组），获取一个</li>\n<li>中间操作（<strong>非必要</strong>） 一个中间操作链，对数据源的数据进行处理</li>\n<li>终止操作 一旦执行 终止操作， 就 执行中间操作链 ，并产生结果 。之后，不会再被使用</li>\n</ol>\n<h3> 2 创建</h3>\n<h4> <strong>2.1 通过集合</strong></h4>\n<p>最常见！ 集合.stream()</p>\n<p>Java8中的 Collection 接口被扩展，提供了两个获取流的方法<code>.stream()</code>，<code>.parallelStream()</code></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.2 Arrays.stream()</h4>\n<p>Java8中的 Arrays 的静态方法 <code>Arrays.stream()</code> 可以获取数组流：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>重载形式，能够处理对应基本类型的数组：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.3 Stream.of()</h4>\n<p>可以调用Stream 类静态方法<code>Stream.of()</code> , 通过显示值创建一个流。它可以接收任意数量的参数。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.4 无限流</h4>\n<p>可以使用Stream 类静态方法<code>Stream.iterate()</code> 和 <code>Stream.generate()</code>，创建无限流。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3 中间操作</h3>\n<p>多个<strong>中间操作</strong> 可以连接起来形成一个 <strong>流水线</strong> ，除非流水线上触发终止操作，否则 <strong>中间操作不会执行任何的处理</strong> ！而在 <mark><em>终止操作时一次性全部处理</em></mark>，称为“惰性求值” 。</p>\n<h4> 3.1 筛选与切片</h4>\n<ul>\n<li>\n<p><strong>filter(Predicate p)：接收Lambda ，获得满足条件P（断定型接口 返回Boolean值）的元素</strong></p>\n</li>\n<li>\n<p><strong>distinct()：去除重复元素（同一个内存地址的）</strong></p>\n</li>\n<li>\n<p><strong>limit(long maxSize)：截断流，使其元素不超过给定数量</strong></p>\n</li>\n<li>\n<p>skip(long n)：跳过元素，返回一个扔掉了前n 个元素的流。若流中元素不足n 个，则返回一个空流。与<code>limit(n)</code>互补</p>\n</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.2 映射</h4>\n<ul>\n<li><strong>map(Function f)：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</strong></li>\n<li>mapToDouble(ToDoubleFunction f)：接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream。</li>\n<li>mapToInt(ToIntFunction f)：接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream。</li>\n<li>mapToLong(ToLongFunction f)：接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream。</li>\n<li>flatMap(Function f)：接收一个函数作为参数，将流中的每个值都换成另一个流，<strong>然后把所有流连接成一个流</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.3 排序</h4>\n<ul>\n<li><strong>sorted()：产生一个新流，其中按自然顺序排序</strong></li>\n<li>sorted(Comparator com)：产生一个新流，其中按比较器顺序排序</li>\n</ul>\n<h3> 4 终止操作</h3>\n<ul>\n<li>\n<p><mark>流不一定需要中间操作，可以直接创建--&gt;终止操作</mark></p>\n</li>\n<li>\n<p>终端操作<strong>会从流的流水线生成结果</strong>。其结果可以是任何不是流的值，例如：List、Integer，甚至是void 。</p>\n</li>\n<li>\n<p>流进行了终止操作后，不能再次使用。</p>\n</li>\n</ul>\n<h4> 4.1 匹配与查找</h4>\n<ul>\n<li>\n<p>allMatch(Predicate p)：检查是否匹配所有元素</p>\n</li>\n<li>\n<p><strong>anyMatch(Predicate p)：检查是否至少匹配一个元素</strong></p>\n</li>\n<li>\n<p>noneMatch(Predicate p)：检查是否没有匹配所有元素</p>\n</li>\n<li>\n<p><strong>findFirst()：返回第一个元素</strong></p>\n</li>\n<li>\n<p>findAny()：返回当前流中的任意元素</p>\n</li>\n<li>\n<p>count()：返回流中元素总数</p>\n</li>\n<li>\n<p>max(Comparator c)：返回流中最大值。参数是比较器，比如Comparator.comparing(String::length)</p>\n</li>\n<li>\n<p>min(Comparator c)：返回流中最小值。</p>\n</li>\n<li>\n<p><strong>forEach(Consumer c)：内部迭代</strong></p>\n</li>\n</ul>\n<h4> 4.2 reduce 归约</h4>\n<p>归约：将一个Stream中的所有元素反复结合起来,得到一个结果</p>\n<p>备注：map 和reduce 的连接通常称为map-reduce 模式，因Google 用它来进行网络搜索而出名。</p>\n<ul>\n<li>reduce(T iden, BinaryOperator b)：可以将流中元素反复结合起来，得到一个值。返回T</li>\n<li>reduce(BinaryOperator b)：参数是二元函数。可以将流中元素反复结合起来，得到一个值。<mark>返回Optional对象</mark>，</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 4.3 收集</h4>\n<ul>\n<li>collect(Collector c)：将流转换为<mark>其他形式（如List 、 Set 、Map等）</mark>。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</li>\n</ul>\n<p>Collector接口中方法的实现决定了如何对流执行收集的操作 如收集到 List 、 Set 、Map。</p>\n<p>另外，Collectors 实用类提供了很多<strong>静态方法</strong>，可以方便地创建常见收集器实例</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171547597.png\" alt=\"image-20230317154719527\" loading=\"lazy\"></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171547592.png\" alt=\"image-20230317154727522\" loading=\"lazy\"></p>\n<h1> 二、Lambda表达式</h1>\n<p>Lambda 是一个匿名函数，我们可以把Lambda 表达式理解为是一段可以传递的代码（<mark>将代码像数据一样进行传递</mark>）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>\n<ul>\n<li>好处：避免匿名内部类定义过多，可以让代码简洁紧凑，留下核心的逻辑</li>\n</ul>\n<ul>\n<li>\n<p>Lambda表达式特征</p>\n<ul>\n<li>**可选类型声明：**不需要声明参数类型，编译器可以统一识别参数值。</li>\n<li>**可选的参数圆括号：**一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>\n<li>**可选的大括号：**如果主体包含了一个语句，就不需要使用大括号。</li>\n<li>**可选的返回关键字：**如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li>\n</ul>\n</li>\n<li>\n<p>注意：lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>\n</li>\n</ul>\n<h1> 三、函数式接口</h1>\n<h2> 1 函数式接口概念</h2>\n<ul>\n<li>\n<p>定义：<mark>只包含一个抽象方法的接口</mark></p>\n</li>\n<li>\n<p>使用 <code>@FunctionalInterface</code> 注解<strong>用来测试用</strong>，如果不是函数式接口，那么会报错；</p>\n<ul>\n<li>只要满足函数式接口的定义，<em>这个注解写不写无所谓</em></li>\n</ul>\n</li>\n<li>\n<p>可以通过 <code>Lambda </code>表达式来创建该接口的对象</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>java 不但可以支持 OOP 还可以支持 OOF （面向函数编程），<mark>将函数作为参数，进行传递</mark></p>\n</li>\n<li>\n<p>在 Java8 中， <code>Lambda</code> 表达式就是一个函数式接口的实例</p>\n</li>\n</ul>\n<h2> 2 Java内置的函数式接口</h2>\n<blockquote>\n<p><strong>一定要注意这些函数参数类型什么，返回类型是什么</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Consumer&lt;T&gt;</code></td>\n<td><mark>T</mark></td>\n<td><mark>void</mark></td>\n<td>对类型为T的对象应用操作，包含方法：<code>void accept(T t)</code></td>\n</tr>\n<tr>\n<td><code>Supplier&lt;T&gt;</code></td>\n<td><mark>无</mark></td>\n<td><mark>T</mark></td>\n<td>返回类型为T的对象，包含方法：<code>T get()</code></td>\n</tr>\n<tr>\n<td><code>Function&lt;T, R&gt;</code></td>\n<td><mark>T</mark></td>\n<td><mark>R</mark></td>\n<td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：<code>R apply(T t)</code></td>\n</tr>\n<tr>\n<td><code>Predicate&lt;T&gt;</code></td>\n<td><mark>T</mark></td>\n<td><mark>boolean</mark></td>\n<td>确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法：<code>boolean test(T t)</code></td>\n</tr>\n</tbody>\n</table>\n<p>总结：<strong>遇到方法参数类型为以上接口时，可以使用lambda表达式进行优化</strong></p>\n<h3> 2.1 消费型接口 Consumer&lt; T&gt;     void accept(T t)</h3>\n<ul>\n<li><mark><strong>在lambda中使用：T类型参数，无需返回数据</strong></mark></li>\n</ul>\n<p><strong>消费一个指定泛型的数据</strong>（至于具体怎么消费(使用), 需要自定义(输出，计算…） 其数据类型由泛型决定。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 生产型接口 Supplier&lt; T&gt;      T get()</h3>\n<ul>\n<li>\n<p><mark><strong>在lambda中使用：无参，返回T类型数据 即可</strong></mark></p>\n</li>\n<li>\n<p>生产型接口，指定接口的泛型是什么类型，那么接口中的get方法<strong>就会生产什么类型的数据</strong></p>\n</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.3 函数型接口 Function&lt;T, R&gt;      R  apply(T t)</h3>\n<ul>\n<li><mark><strong>在lambda中使用：T类型参数，返回R类型数据 即可</strong></mark></li>\n</ul>\n<p>来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.4 断定型接口 Predicate&lt; T&gt;       boolean   test(T t)</h3>\n<p><mark><strong>在lambda中使用：T类型参数，返回boolean类型数据 即可</strong></mark></p>\n<p><strong>对某种类型的数据进行判断</strong>，得到一个boolean值结果</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> 四、方法引用与构造器引用</h1>\n<h2> 4.2</h2>\n<h3> 1 方法引用</h3>\n<ul>\n<li>\n<p>使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p>\n</li>\n<li>\n<p><strong>通过方法的名字来指向一个方法</strong>，可以认为是Lambda表达式的一个语法糖</p>\n</li>\n<li>\n<p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</p>\n</li>\n<li>\n<p>格式：<code>类(或对象) :: 方法名</code></p>\n</li>\n<li>\n<p>如下三种主要使用情况：</p>\n<ul>\n<li>对象 :: 实例方法名</li>\n<li>类 :: 静态方法名</li>\n<li>类 :: 实例方法名</li>\n</ul>\n</li>\n</ul>\n<h3> 2 构造器引用</h3>\n<p>格式：ClassName :: new //构造器引用</p>\n<p>格式：type[] :: new //数组引用</p>\n<h1> 五、Optional类</h1>\n<p><a href=\"https://www.runoob.com/java/java8-optional-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.runoob.com/java/java8-optional-class.html</a></p>\n<h3> 1 概述</h3>\n<ul>\n<li>\n<p>本质上，这是一个<mark>包含有可选值</mark>的包装类</p>\n</li>\n<li>\n<p>Optional 类是一个<strong>可以为null的容器对象</strong>。<mark><strong>如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</strong></mark></p>\n</li>\n<li>\n<p>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就<strong>不用显式进行空值检测</strong>。Optional\n类的引入很好的解决空指针异常（NullPointerException）。</p>\n</li>\n</ul>\n<h3> 2 创建optional实例</h3>\n<ul>\n<li>使用静态方法<strong>empty()<strong>创建一个</strong>空的Optional对象</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>明确对象不为null</strong> 的时候使用<strong>of()</strong>，<strong>包含值</strong>的对象</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>如果对象即<strong>可能是null也可能是非 null</strong>，你就应该使用**ofNullable()**方法，<strong>包含值</strong>的对象</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 3 访问对象的值</h3>\n<ul>\n<li><strong>get()方法</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>检查是否有值的另一个选择是 ifPresent()方法</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 4 返回默认值</h3>\n<ul>\n<li><strong>orElse()</strong>：如果有值则返回该值user，否则返回传递给它的参数值user2</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>orElseGet()—— 其行为略有不同。这个方法会在有值的时候返回值，如果没有值，它会执行作为参数传入的**Supplier(供应者)**函数式接口，并将返回其执行结果：</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 5.map()方法</h3>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171547597.png",
      "date_published": "2022-02-02T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "java"
      ]
    },
    {
      "title": "Kafka",
      "url": "https://mister-hope.github.io/tech/middleware_framework/kafka.html",
      "id": "https://mister-hope.github.io/tech/middleware_framework/kafka.html",
      "summary": "Ctrl + L 清屏 Linux知识 集群配置 做完步骤1、2、3、4后，就可以克隆虚拟机102，103，在102,103上面修改1、2的ip和hostname即可 1.配置ip和网卡 vim /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=static DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=0a27b761-862c-43dd-9666-00b74e5e1965 DEVICE=ens33 ONBOOT=yes IPADDR=192.168.10.101 NETMASK=255.255.255.0 GATEWAY=192.168.10.2 DNS1=8.8.8.8",
      "content_html": "<p>Ctrl + L 清屏</p>\n<h2> Linux知识</h2>\n<h3> 集群配置</h3>\n<p><strong>做完步骤1、2、3、4后，就可以克隆虚拟机102，103，在102,103上面修改1、2的ip和hostname即可</strong></p>\n<h4> 1.配置ip和网卡</h4>\n<p>vim /etc/sysconfig/network-scripts/ifcfg-ens33</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.配置主机名称</h4>\n<p>vim /etc/hostname</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h4> 3.配置ip和host映射</h4>\n<p>vim /etc/hosts</p>\n<div class=\"language-ssh line-numbers-mode\" data-ext=\"ssh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 4.配置防火墙，重启</h4>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 5.安装vim，jdk</h4>\n<p>安装epel-release，相当于一个软件仓库</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>安装net-tools：包含<code>ifconfig</code>等工具 命令</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>安装vim编辑器</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查看所安装的rmp安装包中含java的忽略大小写</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>安装jdk，配置环境变量</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 6.集群分发脚本</h4>\n<h5> scp传输（secure copy）安全拷贝</h5>\n<p>实现服务器与服务器之间的数据拷贝</p>\n<hr>\n<p>scp   -r    <span class=\"katex\"><span class=\"katex-mathml\"></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname       <span class=\"katex\"><span class=\"katex-mathml\"></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ser</span><span class=\"mord\">@</span></span></span></span>host:<span class=\"katex\"><span class=\"katex-mathml\"></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname</p>\n<p>命令  递归   要拷贝的文件路径/名称  目的地用户@主机:目的地路径/名称</p>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> rsync 远程同步工具</h5>\n<p>rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p>\n<p>rsync和scp区别：用rsync做文件的复制要比scp的速度快，<strong>rsync只对差异文件做更新。scp是把所有文件都复制过去</strong></p>\n<hr>\n<p>rsync   -av    <span class=\"katex\"><span class=\"katex-mathml\"></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname       <span class=\"katex\"><span class=\"katex-mathml\"></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">ser</span><span class=\"mord\">@</span></span></span></span>host:<span class=\"katex\"><span class=\"katex-mathml\"></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span></span></span></span>fname</p>\n<p>命令  选项参数  要拷贝的文件路径/名称  目的地用户@主机:目的地路径/名称</p>\n<p>-a：归档拷贝</p>\n<p>-v：显示复制过程</p>\n<h5> <mark>xsync集群分发脚本</mark></h5>\n<p>作用：循环复制文件到所有节点的相同目录下，期望通过xsync脚本在任何路径可以使用</p>\n<hr>\n<p>写任何脚本都可以按这个步骤来做，<strong>直接写到环境变量下，随处调用</strong></p>\n<hr>\n<p>1.查看环境变量</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>2.在环境变量某个bin目录下，推荐用户目录或者usr/local/bin下创建脚本文件xsync，编写脚本</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>3.让脚本具备执行权限</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>4.环境编辑生效</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h4> 7.ssh免密登录</h4>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202309110922766.png\" alt=\"image-20230911092206689\" loading=\"lazy\"></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>中文官网<a href=\"https://kafka.apachecn.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://kafka.apachecn.org/</a></p>\n<p>官网<a href=\"https://kafka.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://kafka.apache.org/</a></p>\n<h2> kafka定义</h2>\n<p>Kafka传统定义：Kafka是一个分布式的基于发布/订阅模式的消息队列（MessageQueue），主要应用于大数据实时处理领域。</p>\n<p>发布/订阅：消息的发布者不会将消息直接发送给特定的订阅者，而是将发布的消息分为不同的类别，订阅者只接收感兴趣的消息。</p>\n<p>Kafka 最新定义： Kafka 是一个开源的分布式事件流平台（ Event StreamingPlatform），被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</p>\n<h2> <mark>消息队列的应用场景</mark></h2>\n<p>消峰</p>\n<p>解耦</p>\n<p>异步通信</p>\n<h2> 基础架构</h2>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202309071438347.png\" alt=\"image-20230907143857269\" loading=\"lazy\"></p>\n<h2> 安装部署</h2>\n<p>解压tar包</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>修改配置文件</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>配置环境变量</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过脚本启动zk集群</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><a href=\"http://zk.sh\" target=\"_blank\" rel=\"noopener noreferrer\">zk.sh</a>，写在环境变量目录/usr/local/bin下，chmod +x <a href=\"http://zk.sh\" target=\"_blank\" rel=\"noopener noreferrer\">zk.sh</a>，source zk.sh即可</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过脚本查看zk状态</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>xcall脚本</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> kafka消息发送流程</h2>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202310160935927.png\" alt=\"image-20231016093523861\" loading=\"lazy\"></p>\n<h2> spring cloud项目使用</h2>\n<h3> 配置文件</h3>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> spring cloud stream binding</h3>\n<ul>\n<li>\n<p>作用：连接spring应用和中间件的<strong>连接+转换器</strong></p>\n</li>\n<li>\n<p>output binding：中间件生产者使用，将sprng数据<strong>转换</strong>为中间件数据</p>\n</li>\n<li>\n<p>intput binding：中间件消费者使用，将中间件数据<strong>转换</strong>为的spring数据</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202309261031360.png\" alt=\"image-20230926103151250\" loading=\"lazy\"></p>\n<h3> kafka生产者</h3>\n<h3> kafka消费者</h3>\n<h2> 文末.....</h2>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202309110922766.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "中间件"
      ]
    },
    {
      "title": "Zookeeper",
      "url": "https://mister-hope.github.io/tech/middleware_framework/zookeeper.html",
      "id": "https://mister-hope.github.io/tech/middleware_framework/zookeeper.html",
      "summary": "一、zookeeper 1.1 概述 Zookeeper是一个为分布式框架提供协调服务的Apache项目。协调就是铲屎官~~ 1.2 特点 ​ Zookeeper从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应",
      "content_html": "<h1> 一、zookeeper</h1>\n<h2> 1.1 概述</h2>\n<p>Zookeeper是一个为分布式框架提供协调服务的Apache项目。协调就是铲屎官~~</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305240926955.png\" alt=\"image-20230524092633863\" loading=\"lazy\"></p>\n<h2> 1.2 特点</h2>\n<p>​       Zookeeper从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责<code>存储和管大家都关心的数据</code>，然后接受<code>观察者的注册</code>，一旦这些<code>数据的状态发生变化</code>，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305240935489.png\" alt=\"image-20230524093503441\" loading=\"lazy\"></p>\n<hr>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305240948123.png\" alt=\"image-20230524094824060\" loading=\"lazy\"></p>\n<h2> 1.3 应用场景</h2>\n<h2> 1.4 安装</h2>\n<h2> 1.5 启动</h2>\n<h2> 1.6 配置文件</h2>\n<h1> 二、zookeeper使用</h1>\n<h2> </h2>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305240926955.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T05:52:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "中间件"
      ]
    },
    {
      "title": "springcloud",
      "url": "https://mister-hope.github.io/tech/spring_framework/SpringCloud.html",
      "id": "https://mister-hope.github.io/tech/spring_framework/SpringCloud.html",
      "summary": "什么是微服务 官网: https://www.martinfowler.com/articles/microservices.html In short, the microservice architectural(架构) style is an approach to developing a single application as a suite(系列) of small services, each running in its own process(进程) and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business(业务) capabilities(单元) and independently(独立) deployable(部署) by fully automated deployment machinery. There is a bare(基于) minimum of centralized(集中) management(管理) of these services, which may be written in different programming languages and use different data storage technologies. -----[摘自官网]",
      "content_html": "<h2> 什么是微服务</h2>\n<ul>\n<li>官网: <a href=\"https://www.martinfowler.com/articles/microservices.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.martinfowler.com/articles/microservices.html</a></li>\n</ul>\n<p>In short, the microservice architectural(架构) style is an approach to developing a single application as <code>a suite(系列) of small services</code>, each <code>running in its own process(进程)</code> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <code>built around business(业务) capabilities(单元)</code> and <code>independently(独立) deployable(部署)</code> by fully automated deployment machinery. <code>There is a bare(基于) minimum of centralized(集中) management(管理) of these services</code>, which may be written in different programming languages and use different data storage technologies.                        -----[摘自官网]</p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>官方定义:<strong>微服务就是由一系列围绕自己业务开发的微小服务构成,他们独立部署运行在自己的进程里,基于分布式的管理</strong></li>\n<li>通俗定义:<strong>微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。</strong></li>\n</ul>\n<hr>\n<h2> 为什么是微服务?</h2>\n<h3> 单体应用</h3>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515958.png\" alt=\"image-20200708224716035\" loading=\"lazy\"></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 微服务架构应用</h3>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515962.png\" alt=\"image-20200723155352063\" loading=\"lazy\"></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 架构的演变</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>dubbo官网:<a href=\"http://dubbo.apache.org/zh-cn/docs/user/preface/background.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://dubbo.apache.org/zh-cn/docs/user/preface/background.html</a></li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515966.png\" alt=\"image-20200318082336122\" loading=\"lazy\"></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>好的架构并不是设计出来的,一定是进化来的</strong></p>\n<hr>\n<h2> 微服务的解决方案</h2>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515979.png\" alt=\"image-20200724143456045\" loading=\"lazy\"></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 什么是SpringCloud</h2>\n<h3> 官方定义</h3>\n<ul>\n<li>官方网址: <a href=\"https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/</a></li>\n</ul>\n<p><strong>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems</strong> (e.g. <code>configuration management</code>,<code> service discovery</code>, <code>circuit breakers, intelligent routing, micro-proxy, control bus</code>). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns.  -------[摘自官网]</p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 核心架构及其组件</h3>\n<p>官网地址:<a href=\"https://spring.io/projects/spring-cloud\" target=\"_blank\" rel=\"noopener noreferrer\">https://spring.io/projects/spring-cloud</a></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><mark>各组件架构图</mark></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515983.png\" alt=\"image-20200724161314786\" loading=\"lazy\"></p>\n<h2> 注册中心</h2>\n<p>所谓服务注册中心就是在整个的微服务架构中单独提出一个服务，这个服务<strong>不完成系统的任何的业务功能</strong>，仅仅用来完成对整个微服务系统的<strong>服务注册</strong>和<strong>服务发现</strong>，以及对服务**健康状态的监控（心跳检查）**和管理功能。</p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201601873.png\" alt=\"image-20230320160102818\" loading=\"lazy\"></p>\n<h2> pom.xml</h2>\n<p>parent</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Eureka 注册中心</h2>\n<h3> 用法-Server端</h3>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 自我保护机制</h4>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201525482.png\" alt=\"image-20230320152556436\" loading=\"lazy\"></p>\n<p><strong>周期是15 分钟，server要判断15分钟之内是否低于 85%</strong></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 用法-Client端</h3>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Consul 注册中心</h2>\n<h3> 概念</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 用法-Server端</h3>\n<p>使用Consul可以直接安装启动，<strong>不需要手动开发这个注册中心</strong>，这一点区别于Eureka</p>\n<p>consul默认服务端口是<strong>8500</strong></p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 用法-Client端</h3>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Ribbon 负载均衡</h2>\n<blockquote>\n<p>精品文章：<a href=\"http://c.biancheng.net/springcloud/ribbon.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://c.biancheng.net/springcloud/ribbon.html</a></p>\n</blockquote>\n<p>在springcloud中服务间调用方式主要是使用 <code>http restful</code>方式进行服务间调用；</p>\n<p>目前主流的负载方案分为以下两种：</p>\n<ul>\n<li>\n<p><strong>集中式</strong>负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如Nginx）</p>\n</li>\n<li>\n<p><strong>客户端</strong>根据自己的请求情况做负载均衡，Ribbon 就属于客户端自己做负载均衡</p>\n</li>\n</ul>\n<h3> 概念</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过Load Balancer获取到服务提供的所有机器实例，Ribbon会自动基于某种规则(轮询，随机)去调用这些服务</p>\n<h3> 依赖</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 配置</h3>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 用法</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 负载均衡策略</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> OpenFeign 服务调用</h2>\n<h3> 概念</h3>\n<p>OpenFeign 全称 Spring Cloud OpenFeign，它是 Spring 官方推出的一种<strong>声明式服务调用与负载均衡组件</strong>，它的出现就是为了替代进入停更维护状态的 Feign</p>\n<p>Feign 对<strong>Ribbon进行了集成</strong>，它在 <strong>RestTemplate 的基础上做了进一步的封装</strong>。通过 Feign，我们只需要声明一个接口并通过注解进行简单的配置（类似于 Dao 接口上面的 Mapper 注解一样）即可实现对 HTTP 接口的绑定。</p>\n<p>通过 Feign，我们可以像调用本地方法一样来调用远程服务，而完全感觉不到这是在进行远程调用。</p>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 配置</h3>\n<p>超时控制和日志级别</p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 注解</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 用法</h3>\n<p>在编写服务绑定接口时，需要注意以下 2 点：</p>\n<ul>\n<li>在 @FeignClient 注解中，value 属性的取值为：<strong>服务提供者的服务名</strong>，即服务提供者配置文件（application.yml）中 <a href=\"http://spring.application.name\" target=\"_blank\" rel=\"noopener noreferrer\">spring.application.name</a> 的取值。</li>\n<li>接口中定义的每个方法都与<strong>服务提供者中 Controller 定义的服务方法</strong>对应。</li>\n</ul>\n<p>Spring Cloud 应用在启动时，<code>OpenFeign 会扫描标有 @FeignClient 注解的接口生成代理，并注人到 Spring 容器中</code>。</p>\n<hr>\n<ol>\n<li>创建一个客户端调用接口（前提是PRODUCTS有相应的controller接口）</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>使用feignClient客户端对象调用服务</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Hystrix 服务熔断、服务降级</h2>\n<blockquote>\n<p>精品文章：<a href=\"http://c.biancheng.net/springcloud/hystrix.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://c.biancheng.net/springcloud/hystrix.html</a></p>\n</blockquote>\n<h3> 概念</h3>\n<p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统中，许多依赖不可避免的会调用失败，超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障(服务雪崩现象)，提高分布式系统的弹性。</p>\n<p>Spring Cloud Hystrix 是基于 Netflix 公司的开源组件 Hystrix 实现的，它提供了熔断器功能，能够有效地阻止分布式微服务系统中出现联动故障，以提高微服务系统的弹性。Spring Cloud Hystrix 具有服务降级、服务熔断、线程隔离、请求缓存、请求合并以及实时故障监控等强大功能。</p>\n<blockquote>\n<p>Hystrix [hɪst'rɪks]，中文含义是豪猪，豪猪的背上长满了棘刺，使它拥有了强大的自我保护能力。而 Spring Cloud Hystrix 作为一个服务容错与保护组件，也可以让服务拥有自我保护的能力，因此也有人将其戏称为“豪猪哥”。</p>\n</blockquote>\n<p>在微服务系统中，Hystrix 能够帮助我们实现以下目标：</p>\n<ul>\n<li><strong>保护线程资源</strong>：防止单个服务的故障耗尽系统中的所有线程资源。</li>\n<li><strong>快速失败机制</strong>：当某个服务发生了故障，不让服务调用方一直等待，而是直接返回请求失败。</li>\n<li><strong>提供降级（FallBack）方案</strong>：在请求失败后，提供一个设计好的降级方案，通常是一个兜底方法，当请求失败后即调用该方法。</li>\n<li><strong>防止故障扩散</strong>：使用熔断机制，防止故障扩散到其他服务。</li>\n<li><strong>监控功能</strong>：提供熔断器故障监控组件 Hystrix Dashboard，随时监控熔断器的状态。</li>\n</ul>\n<h3> 服务雪崩-服务级联故障</h3>\n<p>在微服务之间进行服务调用是由于某一个服务故障，导致级联服务故障的现象，称为雪崩效应。雪崩效应描述的是提供方不可用，导致消费方不可用并将不可用逐渐放大的过程。</p>\n<p>如图存在如下调用链路:</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201731187.png\" alt=\"image-20230320173125136\" loading=\"lazy\"></p>\n<p>而此时，Service A的流量波动很大，流量经常会突然性增加！那么在这种情况下，就算Service A能扛得住请求，Service B和Service C未必能扛得住这突发的请求。此时，如果Service C因为抗不住请求，变得不可用。那么Service B的请求也会阻塞，慢慢耗尽Service B的线程资源，Service B就会变得不可用。紧接着，Service A也会不可用，这一过程如下图所示</p>\n<p><strong>每个请求都是tomcat启动的线程，当服务器C不断有请求线程过来却没有被释放，线程资源占用越来越多，服务就会不可用</strong></p>\n<h3> 服务熔断-自我熔断</h3>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>熔断机制：每个微服务都<strong>引入自己服务的监控器</strong>Hystrix，<strong>监控到异常后会返回一个fallBack</strong></p>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 用法</h4>\n<p>使用HystrixCommand注解实现断路</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 断路器打开条件</h4>\n<p>当满足Hystrix的条件后，熔断器会打开（请求走到熔断器条件），但是一会后熔断器又会关闭（请求恢复正常），说明它状态的打开关闭有条件：</p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201802972.png\" alt=\"image-20230320180230891\" loading=\"lazy\"></p>\n<h3> 服务降级</h3>\n<blockquote>\n<p>精品文章：<a href=\"https://www.jianshu.com/p/fcb8b26b12a5\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.jianshu.com/p/fcb8b26b12a5</a></p>\n</blockquote>\n<p>服务降级：在服务器压力陡增的情况下，利用有限资源，根据当前业务情况，关闭某些服务接口或者页面，以此释放服务器资源以保证核心任务的正常运行。</p>\n<p>降级：服务分优先级，牺牲非核心服务（不可用），导致整体的服务下降，保证核心服务稳定；</p>\n<p>流量控制本质上是减小访问量，而服务处理能力不变；而服务降级本质上是<strong>降低了部分服务的处理能力，增强另一部分服务处理能力，而访问量不变</strong></p>\n<h4> 配置</h4>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<p>在openfeign客户端中加如Hystrix</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>处理类</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 异同点总结</h3>\n<ul>\n<li>\n<p>服务熔断一般是<strong>某个服务</strong>（下游服务）故障引起，而服务降级一般是从<strong>整体负荷</strong>考虑</p>\n</li>\n<li>\n<p>熔断其实是一个<strong>框架级</strong>的处理，每个微服务都需要（无层级之分），而降级一般需要<strong>对业务有层级之分</strong>（比如降级一般是从最外围服务开始）</p>\n</li>\n</ul>\n<h2> Gateway 服务网关</h2>\n<h3> 概念</h3>\n<p>网关统一服务入口，对微服务的一切请求进行路由转发，并提供横切关注点</p>\n<p>客户端向Spring Cloud Gateway发送请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。此处理程序通过特定于请求的过滤器链运行请求。用虚线分隔过滤器的原因是<strong>过滤器可以在发送代理请求之前和之后运行逻辑</strong>。执行所有预过滤逻辑。然后发出代理请求。发出代理请求后，运行post filter逻辑</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201846934.png\" alt=\"spring_cloud_gateway_diagram\" loading=\"lazy\"></p>\n<h3> 作用</h3>\n<ol>\n<li>统一所有微服务的全局入口</li>\n<li><strong>路由转发</strong>（接收一切外界请求，转发到后端的微服务上去） + <strong>过滤器</strong>（权限控制，流量监控，限流）</li>\n<li>实现负载均衡</li>\n</ol>\n<h3> 用法</h3>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 常见路由predicate  （断言、验证）</h4>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 常见过滤器</h4>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Config 配置中心</h2>\n<blockquote>\n<p>精品文章：<a href=\"http://c.biancheng.net/springcloud/config.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://c.biancheng.net/springcloud/config.html</a></p>\n</blockquote>\n<h3> 概念</h3>\n<p>微服务系统中服务的统一管理组件</p>\n<p>类似Eureka一样，Server端集中管理配置文件，Client端拉取使用配置文件</p>\n<ul>\n<li>\n<p>服务注册中心：统一管理微服务信息</p>\n</li>\n<li>\n<p>统一配置中心：统一管理微服务的配置信息</p>\n</li>\n</ul>\n<p>Spring Cloud Config 包含以下两个部分：</p>\n<ul>\n<li>Config Server：也被称为分布式配置中心，它是一个独立运行的微服务应用，用来<strong>连接配置仓库并为客户端提供获取配置信息</strong>、加密信息和解密信息的访问<strong>接口</strong>。</li>\n<li>Config Client：指的是微服务架构中的各个微服务，它们通过 Config Server 对配置进行管理，并<strong>从 Config Sever 中获取和加载配置信息</strong></li>\n</ul>\n<hr>\n<p>微服务启动时会从Server端（即配置中心）拉取配置文件，为了提高config的高可用，当Server端集群部署时，如何实现一个Server节点的修改同步到其它Server节点呢？所以Spring和奈飞设计Config组件作为临时的配置文件中转，而不是作为终端提供者。</p>\n<p>当配置文件经常修改，就需要去进行版本管理，自然想到Git，借助其git仓库管理配置文件。那么如何连接git仓库和每一个微服务呢？config配置中心就可以通过uri拉取git仓库到本地（即自身Server端），其它微服务作为Config Client端进行访问</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303151018819.png\" alt=\"image-20230315101818765\" loading=\"lazy\"></p>\n<p><strong>当git仓库配置发生变化，Config Server检测到后，就从git仓库同步拉取最新配置文件并缓存一份到本地</strong>（安全考虑git仓库可能宕机，所以缓存一份）；其它微服务重新启动时读取到的就是最新的配置文件了</p>\n<h3> 作用</h3>\n<p>将配置统一管理，在日后大规模集群部署服务应用时相同的服务配置一致，日后只需要统一修改配置全部同步，不需要一个一个服务手动维护</p>\n<h3> git仓库</h3>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303151514206.png\" alt=\"image-20230315151427158\" loading=\"lazy\"></p>\n<h3> 用法-Server端</h3>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 使用</h4>\n<p>Spring Cloud Config 规定了一套配置文件访问规则，如下表</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303210930865.png\" alt=\"image-20230321093053816\" loading=\"lazy\"></p>\n<p>可以通过访问localhost:7999/configclient-dev.yml来查看配置文件；</p>\n<p>同时后台会有缓存配置文件的本地目录路径；</p>\n<h3> 用法-Client端</h3>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<p>为了能够提前从Server端拉取到配置文件，再以拉取到的配置加载启动config client。因此，需要将config client的配置写到<mark>bootstrap.yml</mark>中</p>\n<blockquote>\n<p>注意：bootstrap中一定要指明与注册中心有关的配置。如该client服务名称、注册中心地址、端口</p>\n</blockquote>\n<p><mark>bootstrap.yml</mark>，注意这里，可不是application.yml哦</p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h4> 用法</h4>\n<p>使用client的controller测试，读取到的值应该是bootstrap.yml中指定的文件中的name值</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意点：client同时也会加载公共配置中的值，比如在configclient中指定了port为8000，后续在bootstrap.yml和虚拟机选项中再指定port不会生效</p>\n<hr>\n<p>需要注意的是，当配置更新后，config client端如果不重启是</p>\n<ul>\n<li>配置更新后，Spring Cloud Config 服务端（Server）可以直接从 Git 仓库中获取最新的配置。</li>\n<li>除非重启 Spring Cloud Config 客户端（Client），否则无法通过 Spring Cloud Config 服务端获取最新的配置信息。</li>\n</ul>\n<h3> 手动配置刷新</h3>\n<h4> 依赖</h4>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<p>需要刷新代码的类中加入刷新配置的注解</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <strong>手动调用</strong></h4>\n<p>发送一个 POST 请求刷新Config客户端，通知客户端配置文件已经修改，需要重新拉去配置</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><hr>\n<p>问题接踵而至：</p>\n<p>只要配置仓库中的配置发生改变，就需要我们<strong>挨个向 Config 客户端手动发送 POST 请求</strong>，通知它们重新拉取配置。</p>\n<p>显然不科学，辣么多微服务，我疯了吗？</p>\n<h2> Bus 消息总线</h2>\n<h3> 概念</h3>\n<p><code>Spring Cloud Bus</code> 又被称为消息总线，它能够通过轻量级的消息代理（例如 RabbitMQ、Kafka 等）将微服务架构中的各个服务连接起来，实现广播状态更改、事件推送等功能，还可以实现微服务之间的通信功能。</p>\n<p>bus称之为springcloud中消息总线，主要用来在微服务系统中<strong>实现远端配置更新时通过广播形式通知所有客户端刷新配置信息</strong>，避免手动重启服务的工作</p>\n<h3> 动态配置刷新</h3>\n<p>Spring Cloud Config  +  Spring Cloud Bus 实现 一次通知，处处生效</p>\n<p>当 Git 仓库中的配置发生了改变，我们只需要向某一个服务（既可以是 Config 服务端，也可以是 Config 客户端）发送一个 POST 请求，Spring Cloud Bus 就可以通过消息代理通知其他服务重新拉取最新配置，以实现配置的动态刷新。</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303211120116.png\" alt=\"101942GY-11\" loading=\"lazy\"></p>\n<p>​\t根据图上 ，利用 Spring Cloud Bus 实现配置的动态刷新需要以下步骤:</p>\n<ol>\n<li>当 Git 仓库中的配置发生改变后，运维人员向 Config 服务端发送一个 POST 请求，请求路径为“/actuator/refresh”。</li>\n<li>Config 服务端接收到请求后，会将该请求转发给服务总线 Spring Cloud Bus。</li>\n<li>Spring Cloud Bus 接到消息后，会通知给所有 Config 客户端。</li>\n<li>Config 客户端接收到通知，请求 Config 服务端拉取最新配置。</li>\n<li>所有 Config 客户端都获取到最新的配置。</li>\n</ol>\n<h3> 安装rabbitmq</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 用法</h3>\n<h4> 依赖</h4>\n<p>server和client端都添加</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 配置</h4>\n<p>server和client端都添加</p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 注解</h4>\n<p>一定要加这个注解<code>@RefreshScope</code></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 用法</h4>\n<p>手动触发一下</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515958.png",
      "date_published": "2023-03-27T00:00:00.000Z",
      "date_modified": "2024-01-17T03:03:48.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "java"
      ]
    },
    {
      "title": "UML类图",
      "url": "https://mister-hope.github.io/tech/system_design/UML%E7%B1%BB%E5%9B%BE.html",
      "id": "https://mister-hope.github.io/tech/system_design/UML%E7%B1%BB%E5%9B%BE.html",
      "summary": "UML概述 学习链接： https://www.w3cschool.cn/uml_tutorial/uml_tutorial-c1gf28pd.html",
      "content_html": "<h1> UML概述</h1>\n<blockquote>\n<p>学习链接：</p>\n<p><a href=\"https://www.w3cschool.cn/uml_tutorial/uml_tutorial-c1gf28pd.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.w3cschool.cn/uml_tutorial/uml_tutorial-c1gf28pd.html</a></p>\n</blockquote>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220923204014902.png\" alt=\"image-20220923204014902\" loading=\"lazy\"></p>\n<p>UML(Unified Modeling Language, UML)为<strong>面向对象</strong>开发系统的产品，进行建模描述说明。</p>\n<p>UML是一种建模机制，给出一个可视化的指导系统构造的模板。</p>\n<h1> UML构建模块</h1>\n<h2> 事物</h2>\n<p>事物是实体抽象化的最终结果，是 UML 构建块最重要的组成部分，事物的分类如下:</p>\n<ul>\n<li>结构事物</li>\n<li>行为事物</li>\n<li>分组事物</li>\n<li>注释事物</li>\n</ul>\n<h3> 结构事物:</h3>\n<p>结构事物是模型中的静态部分，用以呈现概念或实体的表现元素，是软件建模中最常见的元素，接下来是对结构化物件的简要描述：</p>\n<h4> <strong>A 类（class）</strong></h4>\n<p>类是指具有相同属性、方法、关系和语义的对象的集合；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026734254369.png\" alt=\"img\" loading=\"lazy\"></p>\n<h4> B 接口(interface)</h4>\n<p>接口是指类或组件所提供的服务（操作），描述了类或组件对外可见的动作；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026741440794.png\" alt=\"img\" loading=\"lazy\"></p>\n<h4> C 协作(collaboration)</h4>\n<p>协作定义元素之间的相互作用；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026749875402.png\" alt=\"img\" loading=\"lazy\"></p>\n<h4> <strong>D 用例(use case)</strong></h4>\n<p>用例定义了执行者（在系统外部和系统交互的人）和被考虑的系统之间的交互来实现的一个业务目标；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026766490926.png\" alt=\"img\" loading=\"lazy\"></p>\n<h4> E 组件(component)</h4>\n<p>组件描述物理系统的一部分；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026779668038.png\" alt=\"img\" loading=\"lazy\"></p>\n<h4> F 节点(node)</h4>\n<p>一个节点可以被定义为在运行时存在的物理元素；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026786121818.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3> 行为事物</h3>\n<p>行为事物指的是 UML 模型中的动态部分，代表语句里的 \"动词\"，表示模型里随着时空不断变化的部分，包含两类：</p>\n<ul>\n<li>交互被定义为一种行为，包括一组元素之间的消息交换来完成特定的任务。</li>\n</ul>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027686313760.png\" alt=\"img\" loading=\"lazy\"></p>\n<ul>\n<li>状态机由一系列对象的状态组成，它是有用的，一个对象在其生命周期的状态是很重要的。</li>\n</ul>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027701231138.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3> 分组事物</h3>\n<p>可以把分组事物看成是一个\"盒子\"，模型可以在其中被分解。目前只有一种分组事物，即包（package）。结构事物、动作事物甚至分组事物都有可能放在一个包中。包纯粹是概念上的，只存在于开发阶段，而组件在运行时存在。</p>\n<p>包:封装是唯一一个分组事物可收集结构和行为的东西。</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027889642542.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3> 注释事物</h3>\n<p>注释事物可以被定义为一种机制来捕捉UML模型元素的言论，说明和注释。注释是唯一一个注释事物。</p>\n<p>注释用于渲染意见，约束等的UML元素。</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027895319734.png\" alt=\"img\" loading=\"lazy\"></p>\n<h2> 关系</h2>\n<p>关系显示元素是如何彼此相关联，此关联描述的一个应用程序的功能，UML中定义了四种关系：</p>\n<h3> A 依赖关系:</h3>\n<p>依赖是两件事物之间的语义联系，其中一个事物的变化也影响到另一个事物。</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503028031675933.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3> B 协作:</h3>\n<p>一种描述一组对象之间连接的结构关系，如聚合关系（描述了整体和部分间的结构关系）；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503028037625295.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3> C 泛化:</h3>\n<p>泛化可以被定义为一个专门的元件连接关系与一个广义的元素，它基本上描述了在对象世界中的<strong>继承关系</strong>，是一种一般化-特殊化的关系；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503028042977930.png\" alt=\"img\" loading=\"lazy\"></p>\n<h3> D 实现:</h3>\n<p>类之间的语义关系，其中的一个类指定了由另一个类保证执行的契约。</p>\n<p><img src=\"https://atts.w3cschool.cn/attachments/image/20170818/1503028048635277.png\" alt=\"img\" loading=\"lazy\"></p>\n<h2> UML图</h2>\n<p>UML 图是整个过程中最重要的部分，展示出系统的所有元素</p>\n<p>图是事物集合的分类，UML 中包含多种图：</p>\n<ol>\n<li>类图：类图描述系统所包含的<strong>类、类的内部结构及类之间的关系；</strong></li>\n<li>对象图：对象图是类图的一个具体实例；</li>\n<li>顺序图：顺序图表示对象之间动态合作的关系；</li>\n<li>协作图：协作图描述对象之间的协作关系；</li>\n<li>状态图：状态图描述一类对象的所有可能的状态以及事件发生时状态的转移条件；</li>\n<li>部署关系图：部署关系图定义系统中软硬件的物理体系结构；</li>\n<li>组件图：组件图描述代码部件的物理结构以及各部件之间的依赖关系；</li>\n<li>活动图：活动图描述系统中各种活动的执行顺序。</li>\n<li>用例图：用例图<strong>从用户的角度</strong>出发描述系统的功能、需求，展示系统外部的各类角色与系统内部的各种用例之间的关系；</li>\n</ol>\n<h1> UML类图</h1>\n<ul>\n<li>在软件工程中，类图是一种<strong>静态的结构图</strong>，描述了系统的类的集合，类的属性和类之间的关系，可以<strong>简化了人们对系统的理解</strong>；</li>\n<li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li>\n</ul>\n<h2> 类图表示</h2>\n<blockquote>\n<p>学习链接：<a href=\"https://blog.csdn.net/weixin_57504000/article/details/124218420\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/weixin_57504000/article/details/124218420</a></p>\n</blockquote>\n",
      "image": "https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220923204014902.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T06:13:23.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "系统设计"
      ]
    },
    {
      "title": "微服务架构演变",
      "url": "https://mister-hope.github.io/tech/system_design/%E5%8D%95%E6%9C%BA%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98.html",
      "id": "https://mister-hope.github.io/tech/system_design/%E5%8D%95%E6%9C%BA%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98.html",
      "summary": "微服务演变 灿哥分享。一篇非常精彩，逻辑清晰的精品文章，推荐全篇阅读原文：http://dw-z.ink/3VaXd 8000 字 + 21 张图，服务端高并发分布式架构 14 次演进之路 1.基本概念 分布式：系统中的多个模块在不同服务器上部署，即可称为分布式系统 高可用：系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性 集群：一个特定领域的软件部署在多台服务器上并作为一个整体提供一类服务，这个整体称为集群。当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，说明集群具有高可用性 负载均衡：请求发送到系统时，通过某些方式把请求均匀分发到多个节点上，使系统中每个节点能够均匀的处理请求负载 正向代理和反向代理：系统内部要访问外部网络时，统一通过一个代理服务器把请求转发出去，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；当外部请求进入系统时，代理服务器把该请求转发到系统中的某台服务器上，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。",
      "content_html": "<h3> 微服务演变</h3>\n<p>灿哥分享。一篇非常精彩，逻辑清晰的精品文章，推荐全篇阅读原文：<a href=\"http://dw-z.ink/3VaXd\" target=\"_blank\" rel=\"noopener noreferrer\">http://dw-z.ink/3VaXd</a></p>\n<hr>\n<p>8000 字 + 21 张图，服务端高并发分布式架构 14 次演进之路</p>\n<h4> 1.基本概念</h4>\n<ul>\n<li>分布式：系统中的<strong>多个模块在不同服务器上</strong>部署，即可称为分布式系统</li>\n<li>高可用：系统中<strong>部分节点失效时，其他节点能够接替它继续提供服务</strong>，则可认为系统具有高可用性</li>\n<li>集群：一个特定领域的软件<strong>部署在多台服务器上</strong>并<strong>作为一个整体提供一类服务</strong>，这个整体称为集群。当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，说明集群具有高可用性</li>\n<li>负载均衡：请求发送到系统时，通过某些方式<strong>把请求均匀分发到多个节点</strong>上，使系统中每个节点能够均匀的处理请求负载</li>\n<li>正向代理和反向代理：系统内部要访问外部网络时，统一通过一个<strong>代理服务器把请求转发出去</strong>，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；当外部请求进入系统时，<strong>代理服务器把该请求转发到系统中的某台服务器上</strong>，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。</li>\n</ul>\n<h4> 2.架构演进</h4>\n<p>淘宝为例子，并发量巨大！！！</p>\n<h5> 2.1 单机架构</h5>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022219906.png\" alt=\"image-20220902221907329\" loading=\"lazy\"></p>\n<h5> 2.2 Tomcat与数据库<strong>分开部署</strong></h5>\n<p>好处：Tomcat和数据库分别独占服务器资源，显著提高两者各自性能；</p>\n<p>问题：但是随着用户数的增长，<strong>并发读写数据库</strong>成为瓶颈</p>\n<h5> 2.3 引入<strong>本地缓存</strong>和<strong>分布式缓存</strong></h5>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022219319.png\" alt=\"image-20220902221935668\" loading=\"lazy\"></p>\n<p>好处：通过缓存能把绝大多数请求在读写数据库前拦截掉，<strong>大大降低数据库压力</strong></p>\n<p>问题：随着用户数的增长，<strong>并发压力主要落在单机的Tomcat上</strong>，响应逐渐变慢</p>\n<h5> 2.4 引入反向代理实现负载均衡</h5>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022219232.png\" alt=\"image-20220902221953133\" loading=\"lazy\"></p>\n<p>好处：把请求均匀分发到每个Tomcat中，使应用服务器可支持的<strong>并发量大大增加</strong></p>\n<p>问题：并发量的增长也意味着更多请求穿透到数据库，<strong>单机的数据库</strong>最终成为瓶颈</p>\n<h5> 2.5 数据库读写分离</h5>\n<p>好处：数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库</p>\n<p>问题：业务逐渐变多不同业务直接竞争数据库，相互影响性能</p>\n<h5> 2.6 数据库按业务分库</h5>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022220823.png\" alt=\"image-20220902222009356\" loading=\"lazy\"></p>\n<p>好处：业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑</p>\n<p>问题：<strong>随着用户数的增长，单机的写库会逐渐会达到性能瓶颈</strong></p>\n<h5> <mark>2.7 把大表拆分为小表</mark></h5>\n<p>分布式数据库，开始不懂~</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022220454.png\" alt=\"image-20220902222029829\" loading=\"lazy\"></p>\n<p>好处：<strong>数据库和Tomcat都能够水平扩展，可支撑的并发大幅提高，</strong></p>\n<p>问题：<strong>随着用户数的增长，最终单机的Nginx会成为瓶颈</strong></p>\n<h5> <mark>2.8 使用LVS或F5来使多个Nginx负载均衡</mark></h5>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022220956.png\" alt=\"image-20220902222043950\" loading=\"lazy\"></p>\n<p>问题：由于LVS也是单机的，随着并发数增长到几十万时，LVS服务器最终会达到瓶颈。此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同</p>\n<h5> 2.9 通过DNS轮询实现机房间的负载均衡</h5>\n<p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。</p>\n<p>好处：实现<strong>机房间的负载均衡</strong>，至此，系统可做到机房级别的水平扩展</p>\n<p>问题：<strong>数据</strong>的丰富程度和<strong>业务</strong>的发展，检索、分析等<strong>需求越来越丰富</strong>，单单依靠数据库无法解决如此丰富的需求</p>\n<h5> 2.10 引入NoSQL数据库和搜索引擎等技术</h5>\n<p>对于<strong>统计报表</strong>场景，在数据量大时不一定能跑出结果，而且在跑<strong>复杂查询</strong>时会导致其他查询变慢；对于<strong>全文检索、可变数据结构</strong>等场景，数据库天生不适用；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022221672.png\" alt=\"image-20220902222116871\" loading=\"lazy\"></p>\n<p>问题：<strong>引入更多组件</strong>解决了丰富的需求，业务维度能够极大扩充，随之而来的是一个应用中包含了太多的业务代码，<strong>业务的升级迭代变得困难</strong></p>\n<h5> 2.11 大应用拆分为小应用</h5>\n<p>问题：<strong>不同应用之间存在共用的模块</strong>，不好升级</p>\n<h5> 2.12 复用的功能抽离成微服务</h5>\n<p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来<strong>形成一个单独的服务来管理</strong></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022221722.png\" alt=\"image-20220902222137558\" loading=\"lazy\"></p>\n<p>问题：不同服务的接口访问方式不同，应用代码需要适配多种访问方式才能使用服务，此外，应用访问服务，服务之间也可能相互访问，<strong>调用链将会变得非常复杂</strong>，逻辑变得混乱</p>\n<h5> 2.13 引入企业服务总线ESB屏蔽服务接口的访问差异</h5>\n<p>ESB统一进行访问协议转换。这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来<strong>解除服务之间耦合问题</strong>的架构，就是所谓的<strong>SOA（面向服务）架构</strong></p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022221646.png\" alt=\"image-20220902222154206\" loading=\"lazy\"></p>\n<p>问题：同一台服务器上部署多个服务还要解决运行环境冲突的问题，部署运维困难</p>\n<h5> <mark>2.14 引入<strong>容器化技术</strong>实现运行环境隔离与动态服务管理</mark></h5>\n<p>目前最流行的容器化技术是Docker，最流行的<strong>容器管理服务</strong>是Kubernetes(K8S)，应用/服务可以打包为Docker镜像，通过<strong>K8S来动态分发和部署镜像</strong>；</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022222140.png\" alt=\"image-20220902222219939\" loading=\"lazy\"></p>\n<p>问题：在非大促的时候，还是需要<strong>闲置着大量的机器资源</strong>来应对大促，机器自身成本和运维成本都极高，资源利用率低</p>\n<h5> <mark>2.15 以云平台承载系统</mark></h5>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022222598.png\" alt=\"image-20220902222238988\" loading=\"lazy\"></p>\n<p>部署到公有云，大促时临时申请更多的资源，按需付费</p>\n<p>云平台，就是把<strong>海量机器资源</strong>，通过<strong>统一的资源管理</strong>，抽象为一个资源整体，在之上可按需动态申请硬件资源（如CPU、内存、网络等），并且之上<strong>提供通用的操作系统</strong>，<strong>提供常用的技术组件</strong>（如Hadoop技术栈，MPP数据库等）供用户使用，甚至提供<strong>开发好的应用</strong>，用户不需要关系应用内部使用了什么技术，就能够解决需求（如音视频转码服务、邮件服务、个人博客等）。在云平台中会涉及如下几个概念：</p>\n<ul>\n<li>**IaaS：**基础设施即服务。对应于上面所说的机器资源统一为资源整体，可动态申请硬件资源的层面；</li>\n<li><strong>PaaS：<strong>平台即服务。对应于上面所说的提供</strong>常用的技术组件</strong>方便系统的开发和维护；</li>\n<li>**SaaS：**软件即服务。对应于上面所说的提供开发好的应用或服务，按功能或性能要求付费。</li>\n</ul>\n<h4> 3.架构设计总结</h4>\n<ul>\n<li>\n<p><strong>架构的调整是否必须按照上述演变路径进行？<strong>不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进，在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就</strong>应该按照实际问题实际解决</strong>。如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。</p>\n</li>\n<li>\n<p><strong>对于将要实施的系统，架构应该设计到什么程度？<strong>对于单次实施并且性能指标明确的系统，架构设计到</strong>能够支持系统的性能指标要求</strong>就足够了，但要留有扩展架构的接口以便不备之需。</p>\n</li>\n<li>\n<p><strong>服务端架构和大数据架构有什么区别？<strong>所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术，如数据采集有Flume、Sqoop、Kettle等，数据存储有分布式文件系统HDFS、FastDFS，NoSQL数据库HBase、MongoDB等，数据分析有Spark技术栈、机器学习算法等。总的来说大数据架构就是根据业务的需求，<strong>整合各种大数据组件组合而成的架构</strong>，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。而</strong>服务端架构更多指的是应用组织层面的架构</strong>，底层能力往往是由大数据架构来提供。</p>\n</li>\n<li>\n<p><strong>有没有一些架构设计的原则？</strong></p>\n</li>\n<li>\n<ul>\n<li><mark>N+1设计</mark>。系统中的每个组件都应做到没有单点故障；</li>\n<li><mark>回滚设计</mark>。确保系统可以向前兼容，在系统升级时应能有办法回滚版本；</li>\n<li><mark>禁用设计</mark>。应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；</li>\n<li>监控设计。在设计阶段就要考虑监控的手段；</li>\n<li><mark>多活数据中心设计</mark>。若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；</li>\n<li>采用成熟的技术。刚开发的或开源的技术往往存在很多隐藏的bug，出了问题没有商业支持可能会是一个灾难；</li>\n<li><mark>资源隔离设计</mark>。应避免单一业务占用全部资源；</li>\n<li>架构应能<mark>水平扩展</mark>。系统只有做到能水平扩展，才能有效避免瓶颈问题；</li>\n<li>非核心则购买。非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；</li>\n<li>使用商用硬件。商用硬件能有效降低硬件故障的机率；</li>\n<li><mark>快速迭代</mark>。系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；</li>\n<li><mark>无状态设计</mark>。服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4> 4.问题</h4>\n<blockquote>\n<p>2.7 ，2.8 ，2.13不理解</p>\n</blockquote>\n<blockquote>\n<p>商用硬件和无状态不理解</p>\n</blockquote>\n<hr>\n<p>ps:微服务架构另一篇文章：<a href=\"https://www.cnblogs.com/liuning8023/p/4493156.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p>\n",
      "image": "https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022219906.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T06:13:23.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "系统设计"
      ]
    },
    {
      "title": "JavaScript基础",
      "url": "https://mister-hope.github.io/tech/web_framework/javascript.html",
      "id": "https://mister-hope.github.io/tech/web_framework/javascript.html",
      "summary": "学习资料 https://www.runoob.com/js/js-howto.html https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web",
      "content_html": "<p>学习资料</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> 一、js基础</h1>\n<h2> js简介</h2>\n<p>JavaScript 已经由 ECMA（欧洲电脑制造商协会）通过 ECMAScript 实现语言的标准化。</p>\n<p>ECMAScript 6 也称为 ECMAScript 2015。</p>\n<p>ECMAScript 7 也称为 ECMAScript 2016。</p>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919135414757.png\" alt=\"image-20220919135414757\" loading=\"lazy\"></p>\n<h2> js用法</h2>\n<ul>\n<li>\n<p>HTML 中的 Javascript 脚本代码必须script标签位于之间。</p>\n</li>\n<li>\n<p>浏览器会在页面加载时，解释并执行位于script标签之间的 JavaScript 代码</p>\n</li>\n<li>\n<p>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</p>\n</li>\n<li>\n<p>Chrome浏览器的开发者模式中的snippets可以编写代码</p>\n</li>\n</ul>\n<p><img src=\"https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919140217951.png\" alt=\"image-20220919140217951\" loading=\"lazy\"></p>\n<h2> js 输出</h2>\n<p>JavaScript 可以通过不同的方式来输出数据：</p>\n<ul>\n<li>使用 <strong>window.alert()</strong> 弹出警告框。</li>\n<li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li>\n<li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li>\n<li>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li>\n</ul>\n<p>示例1</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>document.getElementById(\"demo\")</strong> 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。</p>\n<p><strong>innerHTML = \"段落已修改。\"</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</p>\n<p>示例2</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>请使用 document.write() 仅仅向文档输出写内容。</p>\n<p><mark>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</mark></p>\n<h2> js语法</h2>\n<h3> 字面量</h3>\n<p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)。 123e5</p>\n<p><strong>字符串（String）字面量</strong> 可以使用单引号或双引号:</p>\n<p><strong>表达式字面量</strong> 用于计算：   5+6   5*10</p>\n<p><strong>数组（Array）字面量</strong> 定义一个数组：</p>\n<p><strong>对象（Object）字面量</strong> 定义一个对象：</p>\n<p><strong>函数（Function）字面量</strong> 定义一个函数</p>\n<h3> 变量</h3>\n<p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值；</p>\n<p>变量是一个<strong>名称</strong>。字面量是一个<strong>值</strong></p>\n<ul>\n<li><strong>变量必须以字母开头</strong></li>\n<li>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</li>\n<li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li>\n</ul>\n<p>未使用值来声明的变量，其值实际上是 undefined</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><hr>\n<p>ES6允许我们使用 <strong>const 关键字</strong>来定义一个常量，使用 <strong>let 关键字</strong>定义的限定范围内作用域的变量</p>\n<h3> 语句</h3>\n<ul>\n<li>\n<p>语句是用分号分隔</p>\n</li>\n<li>\n<p>可以在文本字符串中使用反斜杠对代码行进行换行</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>JavaScript 是脚本语言，<strong>浏览器会在读取代码时，逐行地执行脚本代码</strong></li>\n</ul>\n<h3> 注释</h3>\n<ul>\n<li>双斜杠 <strong>//</strong> 后的内容将会被浏览器忽略</li>\n<li>多行注释 /*  */</li>\n</ul>\n<h3> 大小写</h3>\n<p>JavaScript 对大小写是敏感的。驼峰法的命名规则</p>\n<h3> 数据类型</h3>\n<p><strong>值类型(基本类型)</strong>：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。</p>\n<p><strong>引用数据类型（对象类型）</strong>：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。</p>\n<blockquote>\n<p><em>Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</em></p>\n</blockquote>\n<ul>\n<li>动态类型</li>\n</ul>\n<p>意味着相同的变量可用作不同的类型：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>变量的数据类型可以使用 <strong>typeof</strong> 操作符来查看：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 对象</h3>\n<ul>\n<li>\n<p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p>\n</li>\n<li>\n<p>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</p>\n</li>\n</ul>\n<p>访问对象属性</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 函数</h3>\n<p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://www.runoob.com/js/js-scope.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.runoob.com/js/js-scope.html</a></p>\n<h1> 二、js进阶</h1>\n<h2> 1.js引擎、调用堆栈</h2>\n<p>Google V8 引擎是一个比较流行的 JavaScript 引擎示例。V8 引擎是在诸如 <code>Chrome</code> 和 <code>Node.js</code> 等内部使用的</p>\n",
      "image": "https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919135414757.png",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-17T06:09:27.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "javascript"
      ]
    },
    {
      "title": "关于博客",
      "url": "https://mister-hope.github.io/about_me/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2.html",
      "id": "https://mister-hope.github.io/about_me/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2.html",
      "summary": "写在前面 本博客依赖vuepress-theme-hope主题模板进行搭建，依照官方教程做了些自定义的配置，大致符合自己简洁、清晰的审美理念，就直接上线了。此文档更多的是整体搭建和详细部署的说明，对自定义配置各位参照文档，一两个小时也就搞定了~ 助力每一个想要搭建自己博客的少男少女，愿你少踩点非必要的坑~ 博客相关内容持续集成中，欢迎关注交流！！ 博客搭建 官网有小白教程可以大致参考，多余的不再重复~~",
      "content_html": "<h2> 写在前面</h2>\n<p>本博客依赖<code>vuepress-theme-hope</code>主题模板进行搭建，依照官方教程做了些自定义的配置，大致符合自己简洁、清晰的审美理念，就直接上线了。此文档更多的是整体搭建和详细部署的说明，对自定义配置各位参照文档，一两个小时也就搞定了~</p>\n<p>助力每一个想要搭建自己博客的少男少女，愿你少踩点非必要的坑~</p>\n<p>博客相关内容持续集成中，欢迎关注交流！！</p>\n<h2> 博客搭建</h2>\n<p>官网有<a href=\"https://vuepress-theme-hope.gitee.io/v2/zh/cookbook/tutorial/\" target=\"_blank\" rel=\"noopener noreferrer\">小白教程</a>可以大致参考，多余的不再重复~~</p>\n<h3> 1.运行环境</h3>\n<p>idea + Node.js + pnpm</p>\n<ul>\n<li>\n<p>idea：选择它作为开发工具只有一个原因，那就是习惯了~~官方推荐vscode会有更多的语法提示，但不会使用的配置还是要自己去读文档，提示作用不大，而且idea也有一些提示的；</p>\n</li>\n<li>\n<p>node.js：版本选择的是<code>v16.16.0</code>，大于等于该版本应该均可；</p>\n</li>\n<li>\n<p>pnpm：版本选择的是<code>7.28.0</code>，推荐用它管理项目，比npm速度快、节省空间；</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h3> 2.创建项目</h3>\n<p>找到本机要存放项目的位置，创建文件夹（最好英文），直接cmd在终端输入</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接着一路选择，记得选择<code>pnpm</code>，然后自动部署文档输入<code>y</code>（后面会用到）</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549257.png\" alt=\"image-20230311133146598\" loading=\"lazy\"></p>\n<p>安装好依赖后，会提示输入y查看博客网址</p>\n<ul>\n<li>\n<p>意外情况：输入y出现报错，这个极有可能是vuepress-theme-hope的版本问题，解决方式就是指定该项目的<a href=\"https://github.com/vuepress-theme-hope/vuepress-theme-hope/releases\" target=\"_blank\" rel=\"noopener noreferrer\">版本号</a></p>\n<p>选择github中最新的版本或之前稳定的某版本，再次尝试</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h3> 3.启动项目</h3>\n<p>进入项目终端下输入<code>pnpm docs:dev</code></p>\n<ul>\n<li>如果不出意外，就可以在本机8080端口访问了，当然你也可以修改端口号，在package.json文件修改命令</li>\n</ul>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 博客部署</h2>\n<p>请注意：下面要写的是整个博客的<code>自动部署</code>，并非一次简单的手动部署，所以按需食用</p>\n<h3> step1.上传项目</h3>\n<ul>\n<li>\n<p>github新建仓库，命名要为<code>用户名.github.io</code>，如我的github用户名为ru12321，那么此次新仓库命名为<code>ru12321.github.io</code>，仓库地址如图获取</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549427.png\" alt=\"image-20230311135650669\" loading=\"lazy\"></p>\n</li>\n<li>\n<p><a href=\"http://xn--deploy-9v7iw71aui2c7ho8gxslxr3em80e9yxa.sh\" target=\"_blank\" rel=\"noopener noreferrer\">项目中添加部署脚本deploy.sh</a></p>\n<p>脚本作用：构建项目、将dist下的所有文件由本地的master分支提交到远端仓库<code>ru12321.github.io</code>的<code>gh-pages分支</code></p>\n<p>你要做的：修改仓库地址为自己的即可，远端分支gh-pages命名不要改！</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>执行deploy.sh脚本，进入到脚本位置，右键使用git打开</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549114.png\" alt=\"image-20230311135217147\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>执行脚本<code>sh deploy.sh</code>，上传项目打包文件到远端github.io仓库</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549446.png\" alt=\"image-20230311135303902\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>上传完成后，github pages模块就会触发部署，自动生成你的网站</p>\n<p>如图，去仓库的对应位置，就可以通过这个域名访问自己的网站了</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549896.png\" alt=\"image-20230311135904991\" loading=\"lazy\"></p>\n<p>总结，以上通过deploy.sh脚本实现了<code>项目的构建、上传构建后文件到远端github仓库gh-pages分支、触发pages构建网站</code>，博客网站到此就可以通过<code>https://用户名.github.io</code>域名访问了。但是想想以后你每次修改了博客内容，都要手动去执行下deploy.sh脚本更新你的网站，是不是有点麻烦呢？所以有了接下来自动部署的步骤</p>\n<h3> step2 项目上传</h3>\n<p>为了方便使用github管理项目，及更好的利用github的actions机制，需要上传整个项目到远端<code>用户名.github.io</code>的master主分支上。这样做的目的是，之后每次本地修改了博客内容，通过push到github远端，都会进行后续一系列的自动更新网站，实现自动部署的效果~~</p>\n<ul>\n<li>\n<p>push整个项目内容到远端的master分支上，会git的应该都懂吧。</p>\n<p>中间可能需要登录下github、输入下远端仓库的地址~</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549359.png\" alt=\"image-20230311141326887\" loading=\"lazy\"></p>\n<p>至此，远端仓库有了两个分支</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549945.png\" alt=\"image-20230311141617167\" loading=\"lazy\"></p>\n<p>master：管理整个博客项目使用</p>\n<p>gh-pages：存放的是博客构建后的所有文件，用来通过pages模块生成博客网站</p>\n<h3> step3.修改workflows脚本</h3>\n<p>说明一下：本质就是通过github的actions模块，自动监测项目master分支的变动，然后执行actions的workflows的脚本，依然是<code>项目构建、自动更新代码文件到gh-pages分支上、自动触发pages构建网站</code>，所以重点就是workflows工作流的脚本的编写和相应的配置了</p>\n<p>不出意外的话，项目本身会有<code>.github/workflows/deplooy-docs.yml</code>这个文件，它就是我们需要的脚本！</p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上需要修改和注意的地方有三个，其它地方可以对比下，应该不需要改动</p>\n<ol>\n<li>第7行的分支名称：就是我们step2上传的远端分支名称，如master</li>\n<li>第16行<code>fetch-depth: 0</code> 检测分支用的</li>\n<li>第40行 先这样写，接下来说明这一行token的配置</li>\n</ol>\n<h3> step4.生成token</h3>\n<p>上面的token是为了在触发actions自动部署时，action<strong>有权限去切换到gh-pages分支并更新其内容</strong>，所以是必要的！</p>\n<h4> 配置1  生成token</h4>\n<p>点击github右上角头像--<code>settings</code>--<code>developer settings</code>--<code>personal access tokens</code>--<code>token(classic)</code>--<code>generate new token</code>--<code>generate new token(classic)</code></p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549230.png\" alt=\"image-20230311142430423\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>输入密码弹出页面</p>\n<p>输入Note名称为<code>ACCESS_TOKEN</code>  对应上面workflows脚本的那个值</p>\n<p>设定token到期时间、</p>\n<p>勾选token作用范围 repo即可</p>\n</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549027.png\" alt=\"image-20230311142714721\" loading=\"lazy\"></p>\n<ul>\n<li>点击<code>generate token</code> 生成秘钥</li>\n<li>保存复制一串数字+字母组合，如<code>ghp_vzoGj02I0dqwueykhflwZv6Cq4r05q4aN</code>后面会用到</li>\n</ul>\n<h4> 配置2 在仓库配置</h4>\n<ul>\n<li>如图，新建一个secret，命名为<code>ACCESS_TOKEN</code>，值为上面的一串神秘组合</li>\n</ul>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549209.png\" alt=\"image-20230311143235520\" loading=\"lazy\"></p>\n<ul>\n<li>\n<p>操作完后就会生成一个secret</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549028.png\" alt=\"image-20230311143502963\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h3> step5.额外配置</h3>\n<p>仓库的settings--<code>Actions</code>--<code>General</code></p>\n<p>如图，修改两个选项为workflows增加操作仓库的权限，修改完记得分部点下save</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549274.png\" alt=\"image-20230311143938914\" loading=\"lazy\"></p>\n<hr>\n<hr>\n<hr>\n<h3> step6.测试一下</h3>\n<p>至此，完成了博客的自动部署配置，可以本地修改某个md文件内容，上传到远端master分支，看看有没有自动出发pages自动更新网站内容呢？actions触发成功会显示为绿色，失败也会有相应的日志可以查看。</p>\n<p><img src=\"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549685.png\" alt=\"image-20230311144241070\" loading=\"lazy\"></p>\n<h2> 写在最后</h2>\n<p>初次尝试搭建博客，过程中有其它问题也欢迎交流，评论（留下邮箱）即可~</p>\n",
      "image": "https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303171549257.png",
      "date_published": "2023-03-11T00:00:00.000Z",
      "date_modified": "2024-01-18T08:02:21.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "我"
      ]
    },
    {
      "title": "frontmatter说明",
      "url": "https://mister-hope.github.io/example.html",
      "id": "https://mister-hope.github.io/example.html",
      "summary": "测试页面，用来记录一些页面配置 index: false 不展示在侧边栏，不收集到children中 comment: false 不显示评论 article: false 该md不展示在博客首页的文章列表",
      "content_html": "<p>测试页面，用来记录一些页面配置</p>\n<p>index: false  不展示在侧边栏，不收集到children中\ncomment: false  不显示评论\narticle: false 该md不展示在博客首页的文章列表</p>\n",
      "date_published": "2023-03-10T00:00:00.000Z",
      "date_modified": "2023-03-27T01:05:52.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "计算机"
      ]
    },
    {
      "title": "who am i？",
      "url": "https://mister-hope.github.io/about_me/",
      "id": "https://mister-hope.github.io/about_me/",
      "summary": "info标题 我是info内容 一个平平无奇的碳基生物",
      "content_html": "<div class=\"hint-container info\">\n<p class=\"hint-container-title\">info标题</p>\n<p>我是info内容</p>\n</div>\n<p>一个平平无奇的碳基生物</p>\n",
      "date_published": "2023-03-10T10:18:52.000Z",
      "date_modified": "2023-03-10T10:18:52.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": []
    },
    {
      "title": "我的爱好",
      "url": "https://mister-hope.github.io/about_me/%E6%88%91%E7%9A%84%E7%88%B1%E5%A5%BD.html",
      "id": "https://mister-hope.github.io/about_me/%E6%88%91%E7%9A%84%E7%88%B1%E5%A5%BD.html",
      "summary": "相关信息 就是玩儿 20231012-测试自动部署",
      "content_html": "<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>就是玩儿\n20231012-测试自动部署</p>\n</div>\n",
      "date_published": "2023-03-10T00:00:00.000Z",
      "date_modified": "2023-10-12T07:15:54.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "我"
      ]
    },
    {
      "title": "书斋",
      "url": "https://mister-hope.github.io/book/",
      "id": "https://mister-hope.github.io/book/",
      "summary": "读过的书~hhhh test2 test3 test4 test5",
      "content_html": "<p>读过的书~hhhh\ntest2\ntest3\ntest4\ntest5</p>\n",
      "date_published": "2023-03-10T10:18:52.000Z",
      "date_modified": "2023-03-11T04:39:07.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": []
    },
    {
      "title": "江湖",
      "url": "https://mister-hope.github.io/essay/",
      "id": "https://mister-hope.github.io/essay/",
      "summary": "一点点",
      "content_html": "<p>一点点</p>\n",
      "date_published": "2023-03-10T10:18:52.000Z",
      "date_modified": "2023-03-10T10:18:52.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": [
        "生活"
      ]
    },
    {
      "title": "窄门",
      "url": "https://mister-hope.github.io/tech/",
      "id": "https://mister-hope.github.io/tech/",
      "summary": "相关信息 近期正在学习的技术点和遇到的问题",
      "content_html": "<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>近期正在学习的技术点和遇到的问题</p>\n</div>\n",
      "date_published": "2023-03-10T10:18:52.000Z",
      "date_modified": "2023-03-19T10:32:40.000Z",
      "authors": [
        {
          "name": "Mr.Ru",
          "url": "https://github.com/ru12321"
        }
      ],
      "tags": []
    }
  ]
}
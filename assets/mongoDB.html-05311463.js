import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as e,C as l}from"./framework-715d567f.js";const i={},u=n("h1",{id:"mongodb基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb基础","aria-hidden":"true"},"#"),s(" MongoDB基础")],-1),d={href:"https://docs.mongodb.com/manual/",target:"_blank",rel:"noopener noreferrer"},r=e(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h3><ul><li>百度百科</li></ul><p>MongoDB是一个<code>基于分布式文件存储的数据库</code>。由C++语言编写。旨在<code>为WEB应用提供可扩展高性能数据存储解决方案</code>。</p><p>MongoDB是一个<code>介于关系数据库和非关系数据库</code>之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型 。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，<code>几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引</code>。</p><p>总结: mongoDB 是一个<mark>非关系型</mark> <mark>文档数据库</mark></p><h3 id="历史" tabindex="-1"><a class="header-anchor" href="#历史" aria-hidden="true">#</a> 历史</h3><ul><li>2009年2月，MongoDB数据库首次在数据库领域亮相，打破了关系型数据库一统天下的局面；</li><li>2010年8月, MongoDB 1.6发布。这个版本最大的一个功能就是Sharding，自动分片</li><li>2014年12月, MongoDB 3.0发布。由于收购了WiredTiger 存储引擎，大幅提升了MongoDB的写入性能；</li><li>2015年12月，3.2版本发布，开始支持了关系型数据库的核心功能：关联。你可以一次同时查询多个MongoDB的集合。</li><li>2016年, MongoDB推出Atlas，在AWS、 Azure 和GCP上的MongoDB托管服务；</li><li><strong>2017年10月，MongoDB成功在纳斯达克敲钟</strong>，成为26年来<strong>第一家以数据库产品为主要业务的上市公司。</strong></li><li>2018年6月, MongoDB4.0 发布推出ACID事务支持，<strong>成为第一个支持强事务的NoSQL数据库；</strong></li><li>2018年--至今，MongoDB已经从一个在数据库领域籍籍无名的“小透明”，变成了话题度和热度都很高的“流量”数据库。</li></ul><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1" aria-hidden="true">#</a> 特点</h3><ul><li>面向集合存储，<strong>易存储对象类型的数据</strong></li><li>支持查询,以及动态查询</li><li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言</li><li><strong>文件存储格式为BSON</strong>（一种JSON的扩展）</li><li>支持复制和故障恢复和分片</li><li><strong>支持事务支持</strong></li><li>索引 聚合 关联....</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><p>说明：<strong>事务一致性要求不高的可以放在mongodb中，一些重要是订单金额等数据放在关系型数据库中好点</strong></p><ul><li>游戏应用：使用云数据库MongoDB作为游戏服务器的数据库存储用户信息。用户的游戏装备、积分等直接以内嵌文档的形式存储，方便进行查询与更新。</li><li>物流应用：使用云数据库MongoDB存储订单信息，订单状态在运送过程中会不断更新，以云数据库MongoDB内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来，方便快捷且一目了然。</li><li>社交应用：使用云数据库MongoDB存储用户信息以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。并且，云数据库MongoDB非常适合用来存储聊天记录，因为它提供了非常丰富的查询，并在写入和读取方面都相对较快。</li><li>视频直播：使用云数据库MongoDB存储用户信息、礼物信息等。</li><li>大数据应用：使用云数据库MongoDB作为大数据的云存储系统，随时进行数据提取分析，掌握行业动态。</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>官网社区版，<mark>选择5.0版本的（6.0有Bug）</mark></p><p>1.先启动服务：bin目录cmd然后输入<strong>mongod --dbpath=..\\data\\db</strong></p><p>2.打开客户端 mongo.exe</p><p>3.MongoDBCompass可视化查看工具</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><h3 id="库-database" tabindex="-1"><a class="header-anchor" href="#库-database" aria-hidden="true">#</a> 库&lt; DataBase&gt;</h3><p>​ <code>mongodb中的库就类似于传统关系型数据库中库的概念，用来通过不同库隔离不同应用数据</code>。mongodb中可以建立多个数据库。每一个库都有自己的集合和权限，不同的数据库也放置在不同的文件中。默认的数据库为&quot;test&quot;，数据库存储在启动指定的data目录中。</p><h3 id="集合-collection" tabindex="-1"><a class="header-anchor" href="#集合-collection" aria-hidden="true">#</a> 集合&lt; Collection&gt;</h3><p>​ <code>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表的概念</code></p><p>集合存在于数据库中，一个库中可以创建多个集合。每个集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><h3 id="文档-document" tabindex="-1"><a class="header-anchor" href="#文档-document" aria-hidden="true">#</a> 文档&lt; Document&gt;</h3><p>文档集合中一条条记录，是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><p>一个简单的文档例子如下：</p><h3 id="关系总结" tabindex="-1"><a class="header-anchor" href="#关系总结" aria-hidden="true">#</a> 关系总结</h3><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库&lt; database&gt;</td><td>数据库&lt; database&gt;</td></tr><tr><td>表&lt; table&gt;</td><td>集合&lt; collection&gt;</td></tr><tr><td>行&lt; row&gt;</td><td>文档&lt; document&gt;</td></tr><tr><td>列&lt; colume&gt;</td><td>字段&lt; field&gt;</td></tr></tbody></table><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h2><h3 id="库-database-1" tabindex="-1"><a class="header-anchor" href="#库-database-1" aria-hidden="true">#</a> 库&lt; database&gt;</h3><ul><li><p>查看所有库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> <span class="token keyword">show</span> dbs<span class="token punctuation">;</span><span class="token comment">//推荐用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214114636572.png" alt="image-20211214114636572" loading="lazy"></p><p><code>注意:</code></p><ul><li><strong><code>admin</code></strong>： 从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li><strong><code>local</code></strong>: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li><strong><code>config</code></strong>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li></ul></li><li><p>创建数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">use</span> 库名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意: use 代表创建并使用,<mark>当库中没有数据时默认不显示这个库</mark></p><p>添加数据后，show databases才会显示</p></li><li><p>删除数据库</p><ul><li><code>默认删除当前选中的库</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>dropDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214115339513.png" alt="image-20211214115339513" loading="lazy"></p></li><li><p>查看当前所在库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="集合-collection-1" tabindex="-1"><a class="header-anchor" href="#集合-collection-1" aria-hidden="true">#</a> 集合&lt; Collection&gt;</h3><p>就是mysql中表的概念！</p><ul><li><p>查看库中所有集合</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">show</span> collections<span class="token punctuation">;</span>
<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建集合（表）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>createCollection<span class="token punctuation">(</span><span class="token string">&#39;集合名称&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>options可以是如下参数：</code></p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">capped</td><td style="text-align:left;">布尔</td><td style="text-align:left;">（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。 <strong>当该值为 true 时，必须指定 size 参数。</strong></td></tr><tr><td style="text-align:left;">size</td><td style="text-align:left;">数值</td><td style="text-align:left;">（可选）为固定集合指定一个最大值，即字节数。 <strong>如果 capped 为 true，也需要指定该字段。</strong></td></tr><tr><td style="text-align:left;">max</td><td style="text-align:left;">数值</td><td style="text-align:left;">（可选）指定固定集合中包含文档的最大数量。</td></tr></tbody></table></li></ul><p>​ <strong>注意:当集合不存在时,向集合中插入文档也会自动创建该集合。</strong></p><ul><li><p>删除集合</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token keyword">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="文档-document-1" tabindex="-1"><a class="header-anchor" href="#文档-document-1" aria-hidden="true">#</a> 文档&lt; document&gt;</h3><p><strong>注意：方法的参数的语法格式不要写错！</strong></p>`,40),k={href:"https://docs.mongodb.com/manual/reference/method/",target:"_blank",rel:"noopener noreferrer"},m=n("ul",null,[n("li",null,[n("p",null,"插入文档"),n("ul",null,[n("li",null,[n("p",null,"单条文档"),n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token operator"},">"),s(" db"),n("span",{class:"token punctuation"},"."),s("集合名称"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"insert"),n("span",{class:"token punctuation"},"("),s("{"),n("span",{class:"token string"},'"name"'),s(":"),n("span",{class:"token string"},'"编ryb"'),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"age"'),s(":"),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"bir"'),s(":"),n("span",{class:"token string"},'"1997-03-24"'),s("}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])]),n("li",null,[n("p",null,"多条文档"),n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token operator"},">"),s(" db"),n("span",{class:"token punctuation"},"."),s("集合名称"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s(`
  	{`),n("span",{class:"token string"},'"name"'),s(":"),n("span",{class:"token string"},'"ryb"'),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"age"'),s(":"),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"bir"'),s(":"),n("span",{class:"token string"},'"1997-03-24"'),s("}"),n("span",{class:"token punctuation"},","),s(`
  	{`),n("span",{class:"token string"},'"name"'),s(":"),n("span",{class:"token string"},'"ryb2"'),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"age"'),s(":"),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"bir"'),s(":"),n("span",{class:"token string"},'"1997-03-29"'),s(`}
`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[n("p",null,"脚本方式"),n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),s("let i"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"<"),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"+"),n("span",{class:"token operator"},"+"),n("span",{class:"token punctuation"},")"),s("{ 		  db"),n("span",{class:"token punctuation"},"."),s("users"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"insert"),n("span",{class:"token punctuation"},"("),s("{"),n("span",{class:"token string"},'"_id"'),s(":i"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"name"'),s(":"),n("span",{class:"token string"},'"ruyb_"'),n("span",{class:"token operator"},"+"),s("i"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"age"'),s(":"),n("span",{class:"token number"},"25"),s("}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
}
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])])]),n("p",null,[n("code",null,"注意:在 mongodb 中每个文档都会有一个_id作为唯一标识,_id默认会自动生成如果手动指定将使用手动指定的值作为_id 的值。")])]),n("li",null,[n("p",null,[n("strong",null,"查询所有")]),n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token operator"},">"),s(" db"),n("span",{class:"token punctuation"},"."),s("集合名称"),n("span",{class:"token punctuation"},"."),s("find"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])]),n("li",null,[n("p",null,"删除文档"),n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[s("db"),n("span",{class:"token punctuation"},"."),s("集合名称"),n("span",{class:"token punctuation"},"."),s("remove"),n("span",{class:"token punctuation"},"("),s(`
   `),n("span",{class:"token operator"},"<"),s("query"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
   {
    `),n("span",{class:"token comment"},"//参数"),s(`
    justOne: `),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"boolean"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
    writeConcern: `),n("span",{class:"token operator"},"<"),s("document"),n("span",{class:"token operator"},">"),s(`
   }
`),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"参数说明：")]),n("ul",null,[n("li",null,[n("strong",null,"query"),s(" :"),n("code",null,"可选"),s("删除的文档的条件。")]),n("li",null,[n("strong",null,"justOne"),s(" : "),n("code",null,"可选"),s("如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。")]),n("li",null,[n("strong",null,"writeConcern"),s(" :"),n("code",null,"可选"),s("抛出异常的级别。")])])]),n("li",null,[n("p",null,"更新文档"),n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[s("db"),n("span",{class:"token punctuation"},"."),s("集合名称"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"update"),n("span",{class:"token punctuation"},"("),s(`
   `),n("span",{class:"token operator"},"<"),s("query"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
   `),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"update"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
   {
     upsert: `),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"boolean"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
     multi: `),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"boolean"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
     writeConcern: `),n("span",{class:"token operator"},"<"),s("document"),n("span",{class:"token operator"},">"),s(`
   }
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"参数说明：")]),n("ul",null,[n("li",null,[n("strong",null,"query"),s(" : update的查询条件，类似sql update查询内where后面的。")]),n("li",null,[n("strong",null,"update"),s(" : update的对象和一些更新的操作符（如"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{separator:"true"},",")]),n("annotation",{encoding:"application/x-tex"},",")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.3em","vertical-align":"-0.1944em"}}),n("span",{class:"mpunct"},",")])])]),s("inc...）等，也可以理解为sql update查询内set后面的")]),n("li",null,[n("strong",null,"upsert"),s(" : "),n("code",null,"可选"),s("，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。")]),n("li",null,[n("strong",null,"multi"),s(" : "),n("code",null,"可选"),s("，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。")]),n("li",null,[n("strong",null,"writeConcern"),s(" :"),n("code",null,"可选"),s("，抛出异常的级别。")])]),n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token list punctuation"},"-"),s(` db.集合名称.update({"name":"zhangsan"},{name:"11",bir:new date()}) 
	`),n("span",{class:"token code-snippet code keyword"},"`这个更新是将符合条件的全部更新成后面的文档,相当于先删除在更新`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(` db.集合名称.update({"name":"xiaohei"},{$set:{name:"mingming"}})
	`),n("span",{class:"token code-snippet code keyword"},"`保留原来数据更新,但是只更新符合条件的第一条数据`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(` db.集合名称.update({name:”小黑”},{$set:{name:”小明”}},{multi:true})		
	`),n("span",{class:"token code-snippet code keyword"},"`保留原来数据更新,更新符合条件的所有数据`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(` db.集合名称.update({name:”小黑”},{$set:{name:”小明”}},{multi:true,upsert:true})
	\`保留原来数据更新,更新符合条件的所有数据 没有条件符合时插入数据
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])])],-1),g=e(`<h2 id="文档查询" tabindex="-1"><a class="header-anchor" href="#文档查询" aria-hidden="true">#</a> 文档查询</h2><p><strong>MongoDB 查询文档使用 find() 方法。find() 方法以非结构化的方式来显示所有文档。</strong></p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span>query<span class="token punctuation">,</span> projection<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>query</strong> ：可选，使用查询操作符指定查询条件</li><li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ul><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>注意: pretty() 方法以格式化的方式来显示所有文档。</code></p><h3 id="对比语法" tabindex="-1"><a class="header-anchor" href="#对比语法" aria-hidden="true">#</a> 对比语法</h3><p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p><p>注意：<mark>这里的命令行查询可以封装成JSON格式作为参数传递</mark></p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214123631600.png" alt="image-20211214123631600" loading="lazy"></p><h3 id="and" tabindex="-1"><a class="header-anchor" href="#and" aria-hidden="true">#</a> AND</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{key1:value1<span class="token punctuation">,</span> key2:value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="or" tabindex="-1"><a class="header-anchor" href="#or" aria-hidden="true">#</a> OR</h3><p>MongoDB OR 条件语句使用了关键字 <strong>$or</strong>,语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span>
   {
      $<span class="token operator">or</span>: <span class="token punctuation">[</span>
         {key1: value1}<span class="token punctuation">,</span> {key2:value2}
      <span class="token punctuation">]</span>
   }
<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类似于 WHERE 语句：WHERE key1=value1 or key2=value2</code></p><h3 id="and-和-or-联合" tabindex="-1"><a class="header-anchor" href="#and-和-or-联合" aria-hidden="true">#</a> AND 和 OR 联合</h3><p><code>类似SQL语句为：&#39;where age &gt;50 AND (name = &#39;ruyb1&#39; OR name = &#39;ruyb2&#39;)&#39;</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">&quot;age&quot;</span>: {$gt:<span class="token number">50</span>}<span class="token punctuation">,</span> $<span class="token operator">or</span>: <span class="token punctuation">[</span>{<span class="token string">&quot;name&quot;</span>: <span class="token string">&quot;ruyb1&quot;</span>}<span class="token punctuation">,</span>{<span class="token string">&quot;name&quot;</span>: <span class="token string">&quot;ruyb2&quot;</span>}<span class="token punctuation">]</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数组中查询" tabindex="-1"><a class="header-anchor" href="#数组中查询" aria-hidden="true">#</a> 数组中查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 测试数据</span>
<span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>{ <span class="token string">&quot;_id&quot;</span> : <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;salary&quot;</span> : <span class="token number">2200</span><span class="token punctuation">,</span> <span class="token string">&quot;likes&quot;</span> : <span class="token punctuation">[</span> <span class="token string">&quot;电视&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;读书&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;game&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span> : <span class="token string">&quot;ruyb_0&quot;</span> }<span class="token punctuation">)</span>
<span class="token comment">-- 执行数组查询</span>
<span class="token operator">&gt;</span> db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{likes:<span class="token string">&quot;电视&quot;</span>}<span class="token punctuation">)</span>
<span class="token comment">-- $size 按照数组长度查询</span>
<span class="token operator">&gt;</span> db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{likes:{$size:<span class="token number">2</span>}}<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h3><p><code>类似 SQL 中为 &#39;where name like &#39;%name%&#39;&#39;</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{likes:<span class="token operator">/</span>ruyb<span class="token operator">/</span>}<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>注意:在 mongoDB 中使用正则表达式可以是实现近似模糊查询功能</code></p><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{name:<span class="token number">1</span><span class="token punctuation">,</span>salary:<span class="token number">1</span>}<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token operator">-</span> <span class="token number">1</span> 升序  <span class="token operator">-</span><span class="token number">1</span> 降序
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类似 SQL 语句为: &#39;order by name,age&#39;</code></p><h3 id="分页" tabindex="-1"><a class="header-anchor" href="#分页" aria-hidden="true">#</a> 分页</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{条件}<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token keyword">start</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token keyword">rows</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>类似于 SQL 语句为: &#39;limit start,rows&#39;</code></p><h3 id="总条数" tabindex="-1"><a class="header-anchor" href="#总条数" aria-hidden="true">#</a> 总条数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">&quot;name&quot;</span>:<span class="token string">&quot;ruyb_0&quot;</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类似于 SQL 语句为: &#39;select count(id) from ....&#39;</code></p><h3 id="去重" tabindex="-1"><a class="header-anchor" href="#去重" aria-hidden="true">#</a> 去重</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token keyword">distinct</span><span class="token punctuation">(</span><span class="token string">&#39;字段&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>类似于 SQL 语句为: &#39;select distinct name from ....&#39;</code></p><h3 id="指定返回字段" tabindex="-1"><a class="header-anchor" href="#指定返回字段" aria-hidden="true">#</a> <mark>指定返回字段</mark></h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{条件}<span class="token punctuation">,</span>{name:<span class="token number">1</span><span class="token punctuation">,</span>_id:<span class="token number">0</span>}<span class="token punctuation">)</span> 
<span class="token operator">-</span> 参数<span class="token number">2</span>: <span class="token number">1</span> 返回  <span class="token number">0</span> 不返回    <span class="token identifier"><span class="token punctuation">\`</span>注意:1和0不能同时使用<span class="token punctuation">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> $type</h2><h3 id="说明-1" tabindex="-1"><a class="header-anchor" href="#说明-1" aria-hidden="true">#</a> 说明</h3><p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。</p><p>MongoDB 中可以使用的类型如下表所示：</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214125324193.png" alt="image-20211214125324193" loading="lazy"></p><ul><li>如果想获取 &quot;col&quot; 集合中 title 为 String 的数据，你可以使用以下命令：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">&quot;title&quot;</span> : {$<span class="token keyword">type</span> : <span class="token number">2</span>}}<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
或
db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">&quot;title&quot;</span> : {$<span class="token keyword">type</span> : <span class="token string">&#39;string&#39;</span>}}<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果想获取 &quot;col&quot; 集合中 tags 为 Array 的数据，你可以使用以下命令：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>dge
或
db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">&quot;tags&quot;</span> : {$<span class="token keyword">type</span> : <span class="token string">&#39;array&#39;</span>}}<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引-index" tabindex="-1"><a class="header-anchor" href="#索引-index" aria-hidden="true">#</a> 索引&lt; index&gt;</h2>`,51),v={href:"https://docs.mongodb.com/manual/indexes/",target:"_blank",rel:"noopener noreferrer"},b=e(`<h3 id="说明-2" tabindex="-1"><a class="header-anchor" href="#说明-2" aria-hidden="true">#</a> 说明</h3><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，<strong>索引是对数据库表中一列或多列的值进行排序的一种结构。</strong></p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211220093934250.png" alt="image-20211220093934250" loading="lazy"></p><p>从根本上说，MongoDB中的索引与其他数据库系统中的索引类似。MongoDB在集合层面上定义了索引，并支持对MongoDB集合中的任何字段或文档的子字段进行索引。 <strong>非常类似mysql</strong></p><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> 操作</h3><ul><li><mark>每个集合一定有一个默认的索引 _id</mark></li><li>注意参数的语法格式</li></ul><p>0、创建索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span><span class="token keyword">keys</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>{<span class="token string">&quot;title&quot;</span>:<span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;description&quot;</span>:<span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>说明: 语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。</code></p><p>createIndex() 接收可选参数，可选参数列表如下：</p><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>background</code></td><td style="text-align:left;">Boolean</td><td style="text-align:left;">建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 &quot;background&quot; 可选参数。 &quot;background&quot; 默认值为<strong>false</strong>。</td></tr><tr><td style="text-align:left;"><code>unique</code></td><td style="text-align:left;">Boolean</td><td style="text-align:left;">建立的索引是否唯一。指定为true创建唯一索引。默认值为<strong>false</strong>.</td></tr><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;">string</td><td style="text-align:left;">索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr><tr><td style="text-align:left;">sparse</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <strong>false</strong>.</td></tr><tr><td style="text-align:left;">expireAfterSeconds</td><td style="text-align:left;">integer</td><td style="text-align:left;">指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr><tr><td style="text-align:left;">v</td><td style="text-align:left;">index version</td><td style="text-align:left;">索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr><tr><td style="text-align:left;">weights</td><td style="text-align:left;">document</td><td style="text-align:left;">索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td style="text-align:left;">default_language</td><td style="text-align:left;">string</td><td style="text-align:left;">对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td style="text-align:left;">language_override</td><td style="text-align:left;">string</td><td style="text-align:left;">对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td></tr></tbody></table><p>1、查看集合索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、查看集合索引大小</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>totalIndexSize<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、删除集合所有索引</p><p><strong>_id不会被删除掉</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>dropIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、删除集合指定索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>dropIndex<span class="token punctuation">(</span><span class="token string">&quot;索引名称&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="复合索引" tabindex="-1"><a class="header-anchor" href="#复合索引" aria-hidden="true">#</a> 复合索引</h3><p>​ 说明: 一个索引的值是由多个 key 进行维护的索引的称之为复合索引</p><ul><li>注意: mongoDB 中复合索引和传统关系型数据库一致都是左前缀原则</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>{<span class="token string">&quot;title&quot;</span>:<span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;description&quot;</span>:<span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211220122531182.png" alt="image-20211220122531182" loading="lazy"></p><h2 id="聚合-aggregate" tabindex="-1"><a class="header-anchor" href="#聚合-aggregate" aria-hidden="true">#</a> 聚合&lt; aggregate&gt;</h2><h3 id="说明-3" tabindex="-1"><a class="header-anchor" href="#说明-3" aria-hidden="true">#</a> 说明</h3><p>MongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。有点类似 <strong>SQL</strong> 语句中的 <strong>count(*)</strong>。</p><h3 id="常见聚合表达式" tabindex="-1"><a class="header-anchor" href="#常见聚合表达式" aria-hidden="true">#</a> 常见聚合表达式</h3><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211214131110733.png" alt="" loading="lazy"></p><h1 id="springdata-mongotemplate" tabindex="-1"><a class="header-anchor" href="#springdata-mongotemplate" aria-hidden="true">#</a> SpringData-MongoTemplate</h1>`,32),y={href:"https://blog.csdn.net/dglsx123/article/details/103134976",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><strong>说明: 这里主要以 springboot 应用为基础应用进行整合开发。</strong></p><p>Spring Data : <code>Spring 数据框架 </code>：封装集成了大多数数据库的操作，如：</p><ul><li><p><code>Spring data JPA </code>：提供了对mysql,orcale,sqlserver的操作；<code>JdbcTemplate</code>：封装了这个对象</p></li><li><p>spring data Redis、spring data Elasticsearch、spring data AMQP；<code>RedisTemplate</code>，<code>ElasticTempalte</code>，<code>AmqpTemplate</code></p></li><li><p><strong>spring data MongoDB；提供了<code>MongoTemplate</code>对象，对mongo进行增删改查</strong></p></li></ul><p>在SpringBoot使用<mark>Spring Data</mark>操作MongoDB</p><h3 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 引入依赖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 编写配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 连接到Mongo,mongodb没有开启任何安全协议 即没有开启用户名密码校验</span>
<span class="token comment"># mongodb(协议)://121.5.167.13(主机):27017(端口)/glodon(库名)</span>
<span class="token key attr-name">spring.data.mongodb.uri</span><span class="token punctuation">=</span><span class="token value attr-value">mongodb://127.0.0.1:27017/glodon</span>

<span class="token comment"># mongodb 存在密码的配置</span>
<span class="token comment">#spring.data.mongodb.host=127.0.0.1</span>
<span class="token comment">#spring.data.mongodb.port=27017</span>
<span class="token comment">#spring.data.mongodb.database=glodon</span>
<span class="token comment">#spring.data.mongodb.username=root</span>
<span class="token comment">#spring.data.mongodb.password=root</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入依赖后，MongoTemplate对象自动会注入到Spring工厂</p><h3 id="集合操作" tabindex="-1"><a class="header-anchor" href="#集合操作" aria-hidden="true">#</a> 集合操作</h3><ul><li><p>创建集合</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  mongoTemplate<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数: 创建集合名称</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>注意:创建集合不能存在,存在报错</code></p></li><li><p>删除集合</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  mongoTemplate<span class="token punctuation">.</span><span class="token function">dropCollection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="相关注解" tabindex="-1"><a class="header-anchor" href="#相关注解" aria-hidden="true">#</a> 相关注解</h3><p>mongoTemplate面向对象设计，springframework.data.mongodb 提供了这些简单注解</p><ul><li><p><code>@Document(collection = &quot;users&quot;)</code></p><ul><li>修饰范围: 用在类上</li><li>作用: 用来映射这个类的一个对象为 mongo 中一条文档数据</li><li>属性：注解的值有<code>value 、collection</code> ，用来<strong>指定操作的集合名称</strong></li></ul></li><li><p><code>@Id</code></p><ul><li>修饰范围: 用在成员变量、方法上</li><li>作用： 用来将成员变量的值映射为<mark>文档的_id</mark> 的值</li></ul></li><li><p><code>@Field(value = &quot;username&quot;)</code></p><ul><li>不添加注解的话，<strong>默认是成员变量名</strong>为文档的属性名</li><li>修饰范围: 用在成员变量、方法上</li><li>作用: <mark>用来将成员变量以及值映射为文档中一个key、value对</mark></li><li>属性: 注解的值有 <code>name,value </code>，用来<strong>指定在文档中 key 的名称</strong>，默认为成员变量名</li></ul></li><li><p><code>@Transient</code></p><ul><li>修饰范围: 用在成员变量、方法上</li><li>作用: 用来指定改成员变量，表示该成员变量在<strong>对象转换文档时，不参与文档的序列化</strong></li></ul></li></ul><hr><h3 id="文档操作" tabindex="-1"><a class="header-anchor" href="#文档操作" aria-hidden="true">#</a> 文档操作</h3><h4 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h4><ul><li><p>Criteria</p></li><li><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20211221201808467.png" alt="image-20211221201808467" loading="lazy"></p></li><li><p>常见查询</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//1.查询所有</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2.基于id查询</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3.条件查询 参数1：查询条件，参数2：返回类型</span>
    <span class="token comment">//空的query代表查询所有</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList1 <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//4.等值查询</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList2 <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//5.&lt; &gt; &lt;= &gt;= and 查询</span>
    <span class="token class-name">Query</span> query1 <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">1300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query1<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//6.or</span>
    <span class="token class-name">Criteria</span> criteria <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Criteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOperator</span><span class="token punctuation">(</span>
        <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Query</span> query2 <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users2 <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query2<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    users2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//7.排序</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Order</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//8.分页查询</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Order</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//9.总条数</span>
    <span class="token keyword">long</span> count <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//10.去重  注意最后一个参数是返回的数据类型</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findDistinct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;salary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//11.JSON？？</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加</h4><blockquote><p>文档添加--save</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//文档添加</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span> ruyb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;ruyb1&quot;</span><span class="token punctuation">,</span> <span class="token number">1200.0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>ruyb1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//mongoTemplate.insert();</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220915093357930.png" alt="" loading="lazy"></p><p>再添加一条，但是对birthday加transent注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> salary<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Transient</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span> ruyb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;ruyb2&quot;</span><span class="token punctuation">,</span> <span class="token number">1200.0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>ruyb2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220915093705156.png" alt="image-20220915093705156" loading="lazy"></p><blockquote><p>文档添加--insert</p></blockquote><p>尝试再insert一次user1对象时，报错！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>org.springframework.dao.DuplicateKeyException: Write operation error on server <span class="token number">127.0</span>.0.1:27017. Write error: WriteError<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token number">11000</span>, <span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token string">&#39;E11000 duplicate key error collection: glodon.users index: _id_ dup key: { _id: 100 }&#39;</span>, <span class="token assign-left variable">details</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>.<span class="token punctuation">;</span> nested exception is com.mongodb.MongoWriteException: Write operation error on server <span class="token number">127.0</span>.0.1:27017. Write error: WriteError<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token number">11000</span>, <span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token string">&#39;E11000 duplicate key error collection: glodon.users index: _id_ dup key: { _id: 100 }&#39;</span>, <span class="token assign-left variable">details</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>批处理insert</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">&quot;ruyb3&quot;</span><span class="token punctuation">,</span> <span class="token number">1300.0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&quot;ruyb4&quot;</span><span class="token punctuation">,</span> <span class="token number">1400.0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//参数1：批量数据，参数2：指定放入哪个集合</span>
mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结</p><ul><li>批处理操作时（比如insert一个集合List）： <ul><li><code>save</code>只能一条条放，需遍历整个数据，一次插入或更新，效率较低。</li><li><code>insert</code>可以一次性插入整个数据，效率较高；<mark>批量处理推荐</mark></li></ul></li><li>插入重复数据时： <ul><li><code>save</code>对已存在的数据进行更新。</li><li><code>insert</code>报错<code>DuplicateKeyException</code>提示主键重复；</li></ul></li></ul><h4 id="更新" tabindex="-1"><a class="header-anchor" href="#更新" aria-hidden="true">#</a> 更新</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//1.更新条件</span>
  <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//2.更新内容</span>
  <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  update<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ruyb200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//单条更新</span>
  mongoTemplate<span class="token punctuation">.</span><span class="token function">updateFirst</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//多条更新</span>
  mongoTemplate<span class="token punctuation">.</span><span class="token function">updateMulti</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//更新插入</span>
  mongoTemplate<span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span>update<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//返回值均为 updateResult</span>
  <span class="token comment">//System.out.println(&quot;匹配条数:&quot; + updateResult.getMatchedCount());</span>
  <span class="token comment">//System.out.println(&quot;修改条数:&quot; + updateResult.getModifiedCount());</span>
  <span class="token comment">//System.out.println(&quot;插入id_:&quot; + updateResult.getUpsertedId());</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//删除所有</span>
  mongoTemplate<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//条件删除</span>
  mongoTemplate<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>
    <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="springdata-mongorepository" tabindex="-1"><a class="header-anchor" href="#springdata-mongorepository" aria-hidden="true">#</a> SpringData-MongoRepository</h1><p>MongoRepository能够满足一般的需求开发，而且拿来即用即可</p>`,40),f={href:"https://blog.csdn.net/weixin_42806958/article/details/115768900",target:"_blank",rel:"noopener noreferrer"},q=e(`<h3 id="环境搭建-1" tabindex="-1"><a class="header-anchor" href="#环境搭建-1" aria-hidden="true">#</a> 环境搭建</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试mongorepository" tabindex="-1"><a class="header-anchor" href="#测试mongorepository" aria-hidden="true">#</a> 测试mongorepository</h3><p>在springboot环境下 测试了mongorepository的功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepositoryTest</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>

    <span class="token comment">//增加</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">2000.0</span> <span class="token operator">+</span> <span class="token number">100.0</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Date</span> date <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2022-09-15&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
            userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//删除</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token string">&quot;6322e0fdb641e92a9d818edb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//修改</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&quot;6322e19c00bde16337ebe91f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">9999.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//查询所有</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//查询通过id</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&quot;6322e19c00bde16337ebe91f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//查询通过条件 example相当于一个对象，查出来和对象属性相同的数据</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb_0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//user.setId(&quot;001&quot;);</span>
        <span class="token comment">//user.setSalary(2000.0);</span>
        <span class="token comment">//SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span>
        <span class="token comment">//Date date = dateFormat.parse(&quot;2022-09-15&quot;);</span>
        <span class="token comment">//user.setBirthday(date);</span>
        <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//模糊查询</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findLikeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建匹配器，即如何使用查询条件</span>
        <span class="token comment">// 改变默认字符串匹配方式：模糊查询</span>
        <span class="token comment">// 改变默认大小写忽略方式：忽略大小写</span>
        <span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withStringMatcher</span><span class="token punctuation">(</span><span class="token class-name">ExampleMatcher<span class="token punctuation">.</span>StringMatcher</span><span class="token punctuation">.</span><span class="token constant">CONTAINING</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIgnoreCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//模糊查询条件</span>
        <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userExample <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>userExample<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//分页参数 参数1：第几页:，参数2：每页几条</span>
        <span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PageRequest</span> pageRequest2 <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb_0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> pageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user1 <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api整理" tabindex="-1"><a class="header-anchor" href="#api整理" aria-hidden="true">#</a> API整理</h3><p>关于这一类，比较麻烦的地方就是不知道有哪些方法是JPA自动生成的。除了通过idea的提示可以做一部分判断，另一个方法还是要通过查看源码来判断。通过查看代码，发现每个类的Repository类都会继承<strong>MongoRepository</strong>，而MongoRepository继承了<strong>PagingAndSortingRepository</strong>，PagingAndSortingRepository继承<strong>CrudRepository</strong>，CrudRepository继承<strong>Repository</strong>。所以这几个Repository中已经有的方法都是JPA可以自动生成的。<strong>使用某一具体方法时可以在这几个Repository中查找是否有对应方法</strong></p><p>在这里我们需要区分两种情况：一种是<strong>本身的Repository类继承</strong>的那一些Repository提供的基本的数据操作方法，包含基本的增删改查、分页查询、排序查询等，对于这一种，在创建的Repository类中是不需要再申明方法的。另一种是我们可以自己写一些简单的方法，这些方法只需要<strong>符合Spring Data制定的那一类规范</strong>就能被其识别出来，对于这一种就需要在Repository类中声明方法。</p><h3 id="spring-data-repository接口" tabindex="-1"><a class="header-anchor" href="#spring-data-repository接口" aria-hidden="true">#</a> <mark>Spring Data Repository接口</mark></h3>`,9),x={href:"https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#repositories",target:"_blank",rel:"noopener noreferrer"},w=e(`<p><code>CrudRepository</code> 接口定义的通用的底层持久性CRUD方法</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919091640818.png" alt="image-20220919091640818" loading="lazy"></p><p><code>PagingAndSortingRepository</code>接口提供分页方法</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919092419021.png" alt="image-20220919092419021" loading="lazy"></p><p><code>派生计数查询、删除方法</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">long</span> <span class="token function">countByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">long</span> <span class="token function">deleteByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mongodb-repository" tabindex="-1"><a class="header-anchor" href="#mongodb-repository" aria-hidden="true">#</a> <mark>MongoDB repository</mark></h3><p>文档很详细！！</p>`,8),S={href:"https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#mongo.repositories",target:"_blank",rel:"noopener noreferrer"},T=e('<h4 id="支持查询方法的关键字" tabindex="-1"><a class="header-anchor" href="#支持查询方法的关键字" aria-hidden="true">#</a> <code>支持查询方法的关键字</code></h4><table><thead><tr><th style="text-align:left;">Keyword</th><th style="text-align:left;">Sample</th><th style="text-align:left;">Logical result</th></tr></thead><tbody><tr><td style="text-align:left;"><code>After</code></td><td style="text-align:left;"><code>findByBirthdateAfter(Date date)</code></td><td style="text-align:left;"><code>{&quot;birthdate&quot; : {&quot;$gt&quot; : date}}</code></td></tr><tr><td style="text-align:left;"><code>GreaterThan</code></td><td style="text-align:left;"><code>findByAgeGreaterThan(int age)</code></td><td style="text-align:left;"><code>{&quot;age&quot; : {&quot;$gt&quot; : age}}</code></td></tr><tr><td style="text-align:left;"><code>GreaterThanEqual</code></td><td style="text-align:left;"><code>findByAgeGreaterThanEqual(int age)</code></td><td style="text-align:left;"><code>{&quot;age&quot; : {&quot;$gte&quot; : age}}</code></td></tr><tr><td style="text-align:left;"><code>Before</code></td><td style="text-align:left;"><code>findByBirthdateBefore(Date date)</code></td><td style="text-align:left;"><code>{&quot;birthdate&quot; : {&quot;$lt&quot; : date}}</code></td></tr><tr><td style="text-align:left;"><code>LessThan</code></td><td style="text-align:left;"><code>findByAgeLessThan(int age)</code></td><td style="text-align:left;"><code>{&quot;age&quot; : {&quot;$lt&quot; : age}}</code></td></tr><tr><td style="text-align:left;"><code>LessThanEqual</code></td><td style="text-align:left;"><code>findByAgeLessThanEqual(int age)</code></td><td style="text-align:left;"><code>{&quot;age&quot; : {&quot;$lte&quot; : age}}</code></td></tr><tr><td style="text-align:left;"><code>Between</code></td><td style="text-align:left;"><code>findByAgeBetween(int from, int to)</code> <code>findByAgeBetween(Range&lt;Integer&gt; range)</code></td><td style="text-align:left;"><code>{&quot;age&quot; : {&quot;$gt&quot; : from, &quot;$lt&quot; : to}}</code> lower / upper bounds (<code>$gt</code> / <code>$gte</code> &amp; <code>$lt</code> / <code>$lte</code>) according to <code>Range</code></td></tr><tr><td style="text-align:left;"><code>In</code></td><td style="text-align:left;"><code>findByAgeIn(Collection ages)</code></td><td style="text-align:left;"><code>{&quot;age&quot; : {&quot;$in&quot; : [ages…]}}</code></td></tr><tr><td style="text-align:left;"><code>NotIn</code></td><td style="text-align:left;"><code>findByAgeNotIn(Collection ages)</code></td><td style="text-align:left;"><code>{&quot;age&quot; : {&quot;$nin&quot; : [ages…]}}</code></td></tr><tr><td style="text-align:left;"><code>IsNotNull</code>, <code>NotNull</code></td><td style="text-align:left;"><code>findByFirstnameNotNull()</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : {&quot;$ne&quot; : null}}</code></td></tr><tr><td style="text-align:left;"><code>IsNull</code>, <code>Null</code></td><td style="text-align:left;"><code>findByFirstnameNull()</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : null}</code></td></tr><tr><td style="text-align:left;"><code>Like</code>, <code>StartingWith</code>, <code>EndingWith</code></td><td style="text-align:left;"><code>findByFirstnameLike(String name)</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : name} (name as regex)</code></td></tr><tr><td style="text-align:left;"><code>NotLike</code>, <code>IsNotLike</code></td><td style="text-align:left;"><code>findByFirstnameNotLike(String name)</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : { &quot;$not&quot; : name }} (name as regex)</code></td></tr><tr><td style="text-align:left;"><code>Containing</code> on String</td><td style="text-align:left;"><code>findByFirstnameContaining(String name)</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : name} (name as regex)</code></td></tr><tr><td style="text-align:left;"><code>NotContaining</code> on String</td><td style="text-align:left;"><code>findByFirstnameNotContaining(String name)</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : { &quot;$not&quot; : name}} (name as regex)</code></td></tr><tr><td style="text-align:left;"><code>Containing</code> on Collection</td><td style="text-align:left;"><code>findByAddressesContaining(Address address)</code></td><td style="text-align:left;"><code>{&quot;addresses&quot; : { &quot;$in&quot; : address}}</code></td></tr><tr><td style="text-align:left;"><code>NotContaining</code> on Collection</td><td style="text-align:left;"><code>findByAddressesNotContaining(Address address)</code></td><td style="text-align:left;"><code>{&quot;addresses&quot; : { &quot;$not&quot; : { &quot;$in&quot; : address}}}</code></td></tr><tr><td style="text-align:left;"><code>Regex</code></td><td style="text-align:left;"><code>findByFirstnameRegex(String firstname)</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : {&quot;$regex&quot; : firstname }}</code></td></tr><tr><td style="text-align:left;"><code>(No keyword)</code></td><td style="text-align:left;"><code>findByFirstname(String name)</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : name}</code></td></tr><tr><td style="text-align:left;"><code>Not</code></td><td style="text-align:left;"><code>findByFirstnameNot(String name)</code></td><td style="text-align:left;"><code>{&quot;firstname&quot; : {&quot;$ne&quot; : name}}</code></td></tr><tr><td style="text-align:left;"><code>Near</code></td><td style="text-align:left;"><code>findByLocationNear(Point point)</code></td><td style="text-align:left;"><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y]}}</code></td></tr><tr><td style="text-align:left;"><code>Near</code></td><td style="text-align:left;"><code>findByLocationNear(Point point, Distance max)</code></td><td style="text-align:left;"><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y], &quot;$maxDistance&quot; : max}}</code></td></tr><tr><td style="text-align:left;"><code>Near</code></td><td style="text-align:left;"><code>findByLocationNear(Point point, Distance min, Distance max)</code></td><td style="text-align:left;"><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y], &quot;$minDistance&quot; : min, &quot;$maxDistance&quot; : max}}</code></td></tr><tr><td style="text-align:left;"><code>Within</code></td><td style="text-align:left;"><code>findByLocationWithin(Circle circle)</code></td><td style="text-align:left;"><code>{&quot;location&quot; : {&quot;$geoWithin&quot; : {&quot;$center&quot; : [ [x, y], distance]}}}</code></td></tr><tr><td style="text-align:left;"><code>Within</code></td><td style="text-align:left;"><code>findByLocationWithin(Box box)</code></td><td style="text-align:left;"><code>{&quot;location&quot; : {&quot;$geoWithin&quot; : {&quot;$box&quot; : [ [x1, y1], x2, y2]}}}</code></td></tr><tr><td style="text-align:left;"><code>IsTrue</code>, <code>True</code></td><td style="text-align:left;"><code>findByActiveIsTrue()</code></td><td style="text-align:left;"><code>{&quot;active&quot; : true}</code></td></tr><tr><td style="text-align:left;"><code>IsFalse</code>, <code>False</code></td><td style="text-align:left;"><code>findByActiveIsFalse()</code></td><td style="text-align:left;"><code>{&quot;active&quot; : false}</code></td></tr><tr><td style="text-align:left;"><code>Exists</code></td><td style="text-align:left;"><code>findByLocationExists(boolean exists)</code></td><td style="text-align:left;"><code>{&quot;location&quot; : {&quot;$exists&quot; : exists }}</code></td></tr></tbody></table><h4 id="删除方法" tabindex="-1"><a class="header-anchor" href="#删除方法" aria-hidden="true">#</a> 删除方法</h4><p>可以返回列表或者删除的数</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220919094333237.png" alt="image-20220919094333237" loading="lazy"></p><h3 id="repository-query-keywords" tabindex="-1"><a class="header-anchor" href="#repository-query-keywords" aria-hidden="true">#</a> <mark>Repository query keywords</mark></h3><p>Spring data repository 查询派生机制通常支持的关键字</p><table><thead><tr><th style="text-align:left;">Logical keyword</th><th style="text-align:left;">Keyword expressions</th></tr></thead><tbody><tr><td style="text-align:left;"><code>AND</code></td><td style="text-align:left;"><code>And</code></td></tr><tr><td style="text-align:left;"><code>OR</code></td><td style="text-align:left;"><code>Or</code></td></tr><tr><td style="text-align:left;"><code>AFTER</code></td><td style="text-align:left;"><code>After</code>, <code>IsAfter</code></td></tr><tr><td style="text-align:left;"><code>BEFORE</code></td><td style="text-align:left;"><code>Before</code>, <code>IsBefore</code></td></tr><tr><td style="text-align:left;"><code>CONTAINING</code></td><td style="text-align:left;"><code>Containing</code>, <code>IsContaining</code>, <code>Contains</code></td></tr><tr><td style="text-align:left;"><code>BETWEEN</code></td><td style="text-align:left;"><code>Between</code>, <code>IsBetween</code></td></tr><tr><td style="text-align:left;"><code>ENDING_WITH</code></td><td style="text-align:left;"><code>EndingWith</code>, <code>IsEndingWith</code>, <code>EndsWith</code></td></tr><tr><td style="text-align:left;"><code>EXISTS</code></td><td style="text-align:left;"><code>Exists</code></td></tr><tr><td style="text-align:left;"><code>FALSE</code></td><td style="text-align:left;"><code>False</code>, <code>IsFalse</code></td></tr><tr><td style="text-align:left;"><code>GREATER_THAN</code></td><td style="text-align:left;"><code>GreaterThan</code>, <code>IsGreaterThan</code></td></tr><tr><td style="text-align:left;"><code>GREATER_THAN_EQUALS</code></td><td style="text-align:left;"><code>GreaterThanEqual</code>, <code>IsGreaterThanEqual</code></td></tr><tr><td style="text-align:left;"><code>IN</code></td><td style="text-align:left;"><code>In</code>, <code>IsIn</code></td></tr><tr><td style="text-align:left;"><code>IS</code></td><td style="text-align:left;"><code>Is</code>, <code>Equals</code>, (or no keyword)</td></tr><tr><td style="text-align:left;"><code>IS_EMPTY</code></td><td style="text-align:left;"><code>IsEmpty</code>, <code>Empty</code></td></tr><tr><td style="text-align:left;"><code>IS_NOT_EMPTY</code></td><td style="text-align:left;"><code>IsNotEmpty</code>, <code>NotEmpty</code></td></tr><tr><td style="text-align:left;"><code>IS_NOT_NULL</code></td><td style="text-align:left;"><code>NotNull</code>, <code>IsNotNull</code></td></tr><tr><td style="text-align:left;"><code>IS_NULL</code></td><td style="text-align:left;"><code>Null</code>, <code>IsNull</code></td></tr><tr><td style="text-align:left;"><code>LESS_THAN</code></td><td style="text-align:left;"><code>LessThan</code>, <code>IsLessThan</code></td></tr><tr><td style="text-align:left;"><code>LESS_THAN_EQUAL</code></td><td style="text-align:left;"><code>LessThanEqual</code>, <code>IsLessThanEqual</code></td></tr><tr><td style="text-align:left;"><code>LIKE</code></td><td style="text-align:left;"><code>Like</code>, <code>IsLike</code></td></tr><tr><td style="text-align:left;"><code>NEAR</code></td><td style="text-align:left;"><code>Near</code>, <code>IsNear</code></td></tr><tr><td style="text-align:left;"><code>NOT</code></td><td style="text-align:left;"><code>Not</code>, <code>IsNot</code></td></tr><tr><td style="text-align:left;"><code>NOT_IN</code></td><td style="text-align:left;"><code>NotIn</code>, <code>IsNotIn</code></td></tr><tr><td style="text-align:left;"><code>NOT_LIKE</code></td><td style="text-align:left;"><code>NotLike</code>, <code>IsNotLike</code></td></tr><tr><td style="text-align:left;"><code>REGEX</code></td><td style="text-align:left;"><code>Regex</code>, <code>MatchesRegex</code>, <code>Matches</code></td></tr><tr><td style="text-align:left;"><code>STARTING_WITH</code></td><td style="text-align:left;"><code>StartingWith</code>, <code>IsStartingWith</code>, <code>StartsWith</code></td></tr><tr><td style="text-align:left;"><code>TRUE</code></td><td style="text-align:left;"><code>True</code>, <code>IsTrue</code></td></tr><tr><td style="text-align:left;"><code>WITHIN</code></td><td style="text-align:left;"><code>Within</code>, <code>IsWithin</code></td></tr></tbody></table><h3 id="example类" tabindex="-1"><a class="header-anchor" href="#example类" aria-hidden="true">#</a> Example类</h3>',9),B={href:"https://blog.csdn.net/weixin_41326813/article/details/108708712",target:"_blank",rel:"noopener noreferrer"},E=e(`<p>Example用来模糊搜索</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ProxyUtils</span></span><span class="token punctuation">;</span>

<span class="token comment">//支持示例查询</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    
    <span class="token comment">//Create a new Example including all non-null properties by default.</span>
    <span class="token comment">//probe是实体类 包含用于查询的参数  不能为空</span>
    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> probe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypedExample</span><span class="token punctuation">(</span>probe<span class="token punctuation">,</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
	<span class="token comment">//Create a new Example using the given ExampleMatcher.</span>
    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> probe<span class="token punctuation">,</span> <span class="token class-name">ExampleMatcher</span> matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypedExample</span><span class="token punctuation">(</span>probe<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">T</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ExampleMatcher</span> <span class="token function">getMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProbeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ProxyUtils</span><span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="问题讨论" tabindex="-1"><a class="header-anchor" href="#问题讨论" aria-hidden="true">#</a> 问题讨论</h1><blockquote><p>问题1：能否通过mongoTemplate只查询某个字段</p></blockquote><p>能。可以通过mongoTemplate的BasicQuery的构造方法封装查询条件、显示字段进行查询，构造函数API如下：</p><p><strong>BasicQuery 类：自定义查询实现，从任意JSON查询字符串设置基本查询。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Create a new <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BasicQuery</span></span><span class="token punctuation">}</span> given a JSON <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">query</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">fields</span></span><span class="token punctuation">}</span>.
* <span class="token keyword">@param</span> <span class="token parameter">query</span> may be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>. 参数1：查询条件
* <span class="token keyword">@param</span> <span class="token parameter">fields</span> may be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>. 参数2：控制显示字段
*/</span>
<span class="token keyword">public</span> <span class="token class-name">BasicQuery</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> query<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>query <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         fields <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质上是<mark>通过JSON查询</mark>，所以以下直接用<mark>JSON格式</mark>封装查询条件和显示字段</p><blockquote><p>问题2：当文档的某字段数据量大的情况下，只查询该字段和查询该文档的效率哪个高？</p></blockquote><h2 id="查出一条文档指定字段-json" tabindex="-1"><a class="header-anchor" href="#查出一条文档指定字段-json" aria-hidden="true">#</a> 查出一条文档指定字段 JSON</h2><p>测试在SpringBoot 2.7.3 版本，引入spring-boot-starter-data-mongodb依赖进行</p><p><strong>实体类User</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>collection <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> salary<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试类</strong>MongoTemplateTests通过构造注入mongoTemplate实例对象，测试方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//查询一个字段数据的时间  JSON查询  705  661 637</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindField03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Query</span> query2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicQuery</span><span class="token punctuation">(</span><span class="token string">&quot;{salary:{$gt:3000}}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{username:1, _id:0}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> userList2 <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query2<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询一条数据的时间：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p>为避免控制台输出的影响，对比运行时注释掉第8行输出语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#username是String类型字段，长度444（为下面对比查询整条数据的效率）</span>
<span class="token comment">#{username=ruyb_4还记得看干啥的萨科技和打开的骄傲看到了扩大时刻到了哈萨我quiet请问IU让我去高...}</span>
查询一条数据的时间：705 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查出一条文档指定字段-query-field" tabindex="-1"><a class="header-anchor" href="#查出一条文档指定字段-query-field" aria-hidden="true">#</a> 查出一条文档指定字段 query.field</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//查询一个字段数据的时间  query.fields()  657 664 648</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindField04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Criteria</span> criteria <span class="token operator">=</span> <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exclude</span><span class="token punctuation">(</span><span class="token string">&quot;_id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;salary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;birthday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> userList2 <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询一条数据的时间：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查出一条文档" tabindex="-1"><a class="header-anchor" href="#查出一条文档" aria-hidden="true">#</a> 查出一条文档</h2><p>对比同样查询条件、查出该条文档数据（不去筛选字段）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//测试查询一条数据的时间  普通 575 561 577</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindField02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Query</span> query2 <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> userList2 <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query2<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询一条数据的时间：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>查询一条文档的指定字段 JSON格式 耗时 <strong>667</strong> ms</p><p>查询一条文档的指定字段 query.field格式 耗时 <strong>656</strong> ms</p><p>查询一条文档 耗时 <strong>571</strong> ms</p><p>通过mongoTemplate只查询文档的某个字段的效率并不如查询整条数据高，查询指定字段的方法实际上只是控制了字段的显示和关闭</p>`,28);function _(D,N){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("文档地址: "),n("a",d,[s("https://docs.mongodb.com/manual/"),t(a)])]),r,n("p",null,[s("官方doc: "),n("a",k,[s("https://docs.mongodb.com/manual/reference/method/"),t(a)])]),m,g,n("p",null,[s("官方doc："),n("a",v,[s("https://docs.mongodb.com/manual/indexes/"),t(a)])]),b,n("p",null,[s("参考文档："),n("a",y,[s("https://blog.csdn.net/dglsx123/article/details/103134976"),t(a)])]),h,n("p",null,[n("a",f,[s("https://blog.csdn.net/weixin_42806958/article/details/115768900"),t(a)])]),q,n("p",null,[n("a",x,[s("https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#repositories"),t(a)])]),w,n("p",null,[n("a",S,[s("https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#mongo.repositories"),t(a)])]),T,n("p",null,[n("a",B,[s("https://blog.csdn.net/weixin_41326813/article/details/108708712"),t(a)])]),E])}const M=p(i,[["render",_],["__file","mongoDB.html.vue"]]);export{M as default};

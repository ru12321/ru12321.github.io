import{_ as e,W as t,X as o,Y as r,Z as a,$ as n,a0 as s,C as g}from"./framework-52f8fb67.js";const d={},l=r("h3",{id:"微服务演变",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#微服务演变","aria-hidden":"true"},"#"),a(" 微服务演变")],-1),c={href:"http://dw-z.ink/3VaXd",target:"_blank",rel:"noopener noreferrer"},h=s('<hr><p>8000 字 + 21 张图，服务端高并发分布式架构 14 次演进之路</p><h4 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1.基本概念</h4><ul><li>分布式：系统中的<strong>多个模块在不同服务器上</strong>部署，即可称为分布式系统</li><li>高可用：系统中<strong>部分节点失效时，其他节点能够接替它继续提供服务</strong>，则可认为系统具有高可用性</li><li>集群：一个特定领域的软件<strong>部署在多台服务器上</strong>并<strong>作为一个整体提供一类服务</strong>，这个整体称为集群。当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，说明集群具有高可用性</li><li>负载均衡：请求发送到系统时，通过某些方式<strong>把请求均匀分发到多个节点</strong>上，使系统中每个节点能够均匀的处理请求负载</li><li>正向代理和反向代理：系统内部要访问外部网络时，统一通过一个<strong>代理服务器把请求转发出去</strong>，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；当外部请求进入系统时，** 代理服务器把该请求转发到系统中的某台服务器上** ，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。</li></ul><h4 id="_2-架构演进" tabindex="-1"><a class="header-anchor" href="#_2-架构演进" aria-hidden="true">#</a> 2.架构演进</h4><p>淘宝为例子，并发量巨大！！！</p><h5 id="_2-1-单机架构" tabindex="-1"><a class="header-anchor" href="#_2-1-单机架构" aria-hidden="true">#</a> 2.1 单机架构</h5><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022219906.png" alt="image-20220902221907329" tabindex="0" loading="lazy"><figcaption>image-20220902221907329</figcaption></figure><h5 id="_2-2-tomcat与数据库分开部署" tabindex="-1"><a class="header-anchor" href="#_2-2-tomcat与数据库分开部署" aria-hidden="true">#</a> 2.2 Tomcat与数据库<strong>分开部署</strong></h5><p>好处：Tomcat和数据库分别独占服务器资源，显著提高两者各自性能；</p><p>问题：但是随着用户数的增长，<strong>并发读写数据库</strong>成为瓶颈</p><h5 id="_2-3-引入本地缓存和分布式缓存" tabindex="-1"><a class="header-anchor" href="#_2-3-引入本地缓存和分布式缓存" aria-hidden="true">#</a> 2.3 引入<strong>本地缓存</strong>和<strong>分布式缓存</strong></h5><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022219319.png" alt="image-20220902221935668" tabindex="0" loading="lazy"><figcaption>image-20220902221935668</figcaption></figure><p>好处：通过缓存能把绝大多数请求在读写数据库前拦截掉，<strong>大大降低数据库压力</strong></p><p>问题：随着用户数的增长，<strong>并发压力主要落在单机的Tomcat上</strong>，响应逐渐变慢</p><h5 id="_2-4-引入反向代理实现负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-4-引入反向代理实现负载均衡" aria-hidden="true">#</a> 2.4 引入反向代理实现负载均衡</h5><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022219232.png" alt="image-20220902221953133" tabindex="0" loading="lazy"><figcaption>image-20220902221953133</figcaption></figure><p>好处：把请求均匀分发到每个Tomcat中，使应用服务器可支持的<strong>并发量大大增加</strong></p><p>问题：并发量的增长也意味着更多请求穿透到数据库，<strong>单机的数据库</strong>最终成为瓶颈</p><h5 id="_2-5-数据库读写分离" tabindex="-1"><a class="header-anchor" href="#_2-5-数据库读写分离" aria-hidden="true">#</a> 2.5 数据库读写分离</h5><p>好处：数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库</p><p>问题：业务逐渐变多不同业务直接竞争数据库，相互影响性能</p><h5 id="_2-6-数据库按业务分库" tabindex="-1"><a class="header-anchor" href="#_2-6-数据库按业务分库" aria-hidden="true">#</a> 2.6 数据库按业务分库</h5><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022220823.png" alt="image-20220902222009356" tabindex="0" loading="lazy"><figcaption>image-20220902222009356</figcaption></figure><p>好处：业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑</p><p>问题：<strong>随着用户数的增长，单机的写库会逐渐会达到性能瓶颈</strong></p><h5 id="_2-7-把大表拆分为小表" tabindex="-1"><a class="header-anchor" href="#_2-7-把大表拆分为小表" aria-hidden="true">#</a> <mark>2.7 把大表拆分为小表</mark></h5><p>分布式数据库，开始不懂~</p><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022220454.png" alt="image-20220902222029829" tabindex="0" loading="lazy"><figcaption>image-20220902222029829</figcaption></figure><p>好处：<strong>数据库和Tomcat都能够水平扩展，可支撑的并发大幅提高，</strong></p><p>问题：<strong>随着用户数的增长，最终单机的Nginx会成为瓶颈</strong></p><h5 id="_2-8-使用lvs或f5来使多个nginx负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-8-使用lvs或f5来使多个nginx负载均衡" aria-hidden="true">#</a> <mark>2.8 使用LVS或F5来使多个Nginx负载均衡</mark></h5><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022220956.png" alt="image-20220902222043950" tabindex="0" loading="lazy"><figcaption>image-20220902222043950</figcaption></figure><p>问题：由于LVS也是单机的，随着并发数增长到几十万时，LVS服务器最终会达到瓶颈。此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同</p><h5 id="_2-9-通过dns轮询实现机房间的负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-9-通过dns轮询实现机房间的负载均衡" aria-hidden="true">#</a> 2.9 通过DNS轮询实现机房间的负载均衡</h5><p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。</p><p>好处：实现<strong>机房间的负载均衡</strong>，至此，系统可做到机房级别的水平扩展</p><p>问题：<strong>数据</strong>的丰富程度和<strong>业务</strong>的发展，检索、分析等<strong>需求越来越丰富</strong>，单单依靠数据库无法解决如此丰富的需求</p><h5 id="_2-10-引入nosql数据库和搜索引擎等技术" tabindex="-1"><a class="header-anchor" href="#_2-10-引入nosql数据库和搜索引擎等技术" aria-hidden="true">#</a> 2.10 引入NoSQL数据库和搜索引擎等技术</h5><p>对于<strong>统计报表</strong>场景，在数据量大时不一定能跑出结果，而且在跑<strong>复杂查询</strong>时会导致其他查询变慢；对于<strong>全文检索、可变数据结构</strong>等场景，数据库天生不适用；</p><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022221672.png" alt="image-20220902222116871" tabindex="0" loading="lazy"><figcaption>image-20220902222116871</figcaption></figure><p>问题：<strong>引入更多组件</strong>解决了丰富的需求，业务维度能够极大扩充，随之而来的是一个应用中包含了太多的业务代码，<strong>业务的升级迭代变得困难</strong></p><h5 id="_2-11-大应用拆分为小应用" tabindex="-1"><a class="header-anchor" href="#_2-11-大应用拆分为小应用" aria-hidden="true">#</a> 2.11 大应用拆分为小应用</h5><p>问题：<strong>不同应用之间存在共用的模块</strong>，不好升级</p><h5 id="_2-12-复用的功能抽离成微服务" tabindex="-1"><a class="header-anchor" href="#_2-12-复用的功能抽离成微服务" aria-hidden="true">#</a> 2.12 复用的功能抽离成微服务</h5><p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来<strong>形成一个单独的服务来管理</strong></p><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022221722.png" alt="image-20220902222137558" tabindex="0" loading="lazy"><figcaption>image-20220902222137558</figcaption></figure><p>问题：不同服务的接口访问方式不同，应用代码需要适配多种访问方式才能使用服务，此外，应用访问服务，服务之间也可能相互访问，<strong>调用链将会变得非常复杂</strong>，逻辑变得混乱</p><h5 id="_2-13-引入企业服务总线esb屏蔽服务接口的访问差异" tabindex="-1"><a class="header-anchor" href="#_2-13-引入企业服务总线esb屏蔽服务接口的访问差异" aria-hidden="true">#</a> 2.13 引入企业服务总线ESB屏蔽服务接口的访问差异</h5><p>ESB统一进行访问协议转换。这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来<strong>解除服务之间耦合问题</strong>的架构，就是所谓的<strong>SOA（面向服务）架构</strong></p><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022221646.png" alt="image-20220902222154206" tabindex="0" loading="lazy"><figcaption>image-20220902222154206</figcaption></figure><p>问题：同一台服务器上部署多个服务还要解决运行环境冲突的问题，部署运维困难</p><h5 id="_2-14-引入容器化技术实现运行环境隔离与动态服务管理" tabindex="-1"><a class="header-anchor" href="#_2-14-引入容器化技术实现运行环境隔离与动态服务管理" aria-hidden="true">#</a> <mark>2.14 引入<strong>容器化技术</strong>实现运行环境隔离与动态服务管理</mark></h5><p>目前最流行的容器化技术是Docker，最流行的<strong>容器管理服务</strong>是Kubernetes(K8S)，应用/服务可以打包为Docker镜像，通过<strong>K8S来动态分发和部署镜像</strong>；</p><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022222140.png" alt="image-20220902222219939" tabindex="0" loading="lazy"><figcaption>image-20220902222219939</figcaption></figure><p>问题：在非大促的时候，还是需要<strong>闲置着大量的机器资源</strong>来应对大促，机器自身成本和运维成本都极高，资源利用率低</p><h5 id="_2-15-以云平台承载系统" tabindex="-1"><a class="header-anchor" href="#_2-15-以云平台承载系统" aria-hidden="true">#</a> <mark>2.15 以云平台承载系统</mark></h5><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-mdfile/202209022222598.png" alt="image-20220902222238988" tabindex="0" loading="lazy"><figcaption>image-20220902222238988</figcaption></figure><p>部署到公有云，大促时临时申请更多的资源，按需付费</p><p>云平台，就是把<strong>海量机器资源</strong>，通过<strong>统一的资源管理</strong>，抽象为一个资源整体，在之上可按需动态申请硬件资源（如CPU、内存、网络等），并且之上<strong>提供通用的操作系统</strong>，<strong>提供常用的技术组件</strong> （如Hadoop技术栈，MPP数据库等）供用户使用，甚至提供<strong>开发好的应用</strong>，用户不需要关系应用内部使用了什么技术，就能够解决需求（如音视频转码服务、邮件服务、个人博客等）。在云平台中会涉及如下几个概念：</p><ul><li>**IaaS：**基础设施即服务。对应于上面所说的机器资源统一为资源整体，可动态申请硬件资源的层面；</li><li><strong>PaaS：<strong>平台即服务。对应于上面所说的提供</strong>常用的技术组件</strong>方便系统的开发和维护；</li><li>**SaaS：**软件即服务。对应于上面所说的提供开发好的应用或服务，按功能或性能要求付费。</li></ul><h4 id="_3-架构设计总结" tabindex="-1"><a class="header-anchor" href="#_3-架构设计总结" aria-hidden="true">#</a> 3.架构设计总结</h4><ul><li><p><strong>架构的调整是否必须按照上述演变路径进行？<strong>不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进，在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就</strong>应该按照实际问题实际解决</strong> 。如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。</p></li><li><p><strong>对于将要实施的系统，架构应该设计到什么程度？<strong>对于单次实施并且性能指标明确的系统，架构设计到</strong>能够支持系统的性能指标要求</strong>就足够了，但要留有扩展架构的接口以便不备之需。</p></li><li><p><strong>服务端架构和大数据架构有什么区别？</strong> 所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术，如数据采集有Flume、Sqoop、Kettle等，数据存储有分布式文件系统HDFS、FastDFS，NoSQL数据库HBase、MongoDB等，数据分析有Spark技术栈、机器学习算法等。总的来说大数据架构就是根据业务的需求，** 整合各种大数据组件组合而成的架构**，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。而<strong>服务端架构更多指的是应用组织层面的架构</strong>，底层能力往往是由大数据架构来提供。</p></li><li><p><strong>有没有一些架构设计的原则？</strong></p></li><li><ul><li><mark>N+1设计</mark>。系统中的每个组件都应做到没有单点故障；</li><li><mark>回滚设计</mark>。确保系统可以向前兼容，在系统升级时应能有办法回滚版本；</li><li><mark>禁用设计</mark>。应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；</li><li>监控设计。在设计阶段就要考虑监控的手段；</li><li><mark>多活数据中心设计</mark>。若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；</li><li>采用成熟的技术。刚开发的或开源的技术往往存在很多隐藏的bug，出了问题没有商业支持可能会是一个灾难；</li><li><mark>资源隔离设计</mark>。应避免单一业务占用全部资源；</li><li>架构应能<mark>水平扩展</mark>。系统只有做到能水平扩展，才能有效避免瓶颈问题；</li><li>非核心则购买。非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；</li><li>使用商用硬件。商用硬件能有效降低硬件故障的机率；</li><li><mark>快速迭代</mark>。系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；</li><li><mark>无状态设计</mark>。服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</li></ul></li></ul><hr><h4 id="_4-问题" tabindex="-1"><a class="header-anchor" href="#_4-问题" aria-hidden="true">#</a> 4.问题</h4><blockquote><p>2.7 ，2.8 ，2.13不理解</p></blockquote><blockquote><p>商用硬件和无状态不理解</p></blockquote><hr>',68),p={href:"https://www.cnblogs.com/liuning8023/p/4493156.html",target:"_blank",rel:"noopener noreferrer"};function m(f,u){const i=g("ExternalLinkIcon");return t(),o("div",null,[l,r("p",null,[a("灿哥分享。一篇非常精彩，逻辑清晰的精品文章，推荐全篇阅读原文："),r("a",c,[a("http://dw-z.ink/3VaXd"),n(i)])]),h,r("p",null,[a("ps:微服务架构另一篇文章："),r("a",p,[a("https://www.cnblogs.com/liuning8023/p/4493156.html"),n(i)])])])}const b=e(d,[["render",m],["__file","单机架构演变.html.vue"]]);export{b as default};

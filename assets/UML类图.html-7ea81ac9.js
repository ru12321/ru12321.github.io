import{_ as n,W as l,X as d,Y as a,Z as e,$ as i,a0 as o,C as c}from"./framework-715d567f.js";const t={},s=a("h1",{id:"uml概述",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#uml概述","aria-hidden":"true"},"#"),e(" UML概述")],-1),h=a("p",null,"学习链接：",-1),p={href:"https://www.w3cschool.cn/uml_tutorial/uml_tutorial-c1gf28pd.html",target:"_blank",rel:"noopener noreferrer"},u=o('<p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/image-20220923204014902.png" alt="image-20220923204014902" loading="lazy"></p><p>UML(Unified Modeling Language, UML)为<strong>面向对象</strong>开发系统的产品，进行建模描述说明。</p><p>UML是一种建模机制，给出一个可视化的指导系统构造的模板。</p><h1 id="uml构建模块" tabindex="-1"><a class="header-anchor" href="#uml构建模块" aria-hidden="true">#</a> UML构建模块</h1><h2 id="事物" tabindex="-1"><a class="header-anchor" href="#事物" aria-hidden="true">#</a> 事物</h2><p>事物是实体抽象化的最终结果，是 UML 构建块最重要的组成部分，事物的分类如下:</p><ul><li>结构事物</li><li>行为事物</li><li>分组事物</li><li>注释事物</li></ul><h3 id="结构事物" tabindex="-1"><a class="header-anchor" href="#结构事物" aria-hidden="true">#</a> 结构事物:</h3><p>结构事物是模型中的静态部分，用以呈现概念或实体的表现元素，是软件建模中最常见的元素，接下来是对结构化物件的简要描述：</p><h4 id="a-类-class" tabindex="-1"><a class="header-anchor" href="#a-类-class" aria-hidden="true">#</a> <strong>A 类（class）</strong></h4><p>类是指具有相同属性、方法、关系和语义的对象的集合；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026734254369.png" alt="img" loading="lazy"></p><h4 id="b-接口-interface" tabindex="-1"><a class="header-anchor" href="#b-接口-interface" aria-hidden="true">#</a> B 接口(interface)</h4><p>接口是指类或组件所提供的服务（操作），描述了类或组件对外可见的动作；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026741440794.png" alt="img" loading="lazy"></p><h4 id="c-协作-collaboration" tabindex="-1"><a class="header-anchor" href="#c-协作-collaboration" aria-hidden="true">#</a> C 协作(collaboration)</h4><p>协作定义元素之间的相互作用；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026749875402.png" alt="img" loading="lazy"></p><h4 id="d-用例-use-case" tabindex="-1"><a class="header-anchor" href="#d-用例-use-case" aria-hidden="true">#</a> <strong>D 用例(use case)</strong></h4><p>用例定义了执行者（在系统外部和系统交互的人）和被考虑的系统之间的交互来实现的一个业务目标；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026766490926.png" alt="img" loading="lazy"></p><h4 id="e-组件-component" tabindex="-1"><a class="header-anchor" href="#e-组件-component" aria-hidden="true">#</a> E 组件(component)</h4><p>组件描述物理系统的一部分；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026779668038.png" alt="img" loading="lazy"></p><h4 id="f-节点-node" tabindex="-1"><a class="header-anchor" href="#f-节点-node" aria-hidden="true">#</a> F 节点(node)</h4><p>一个节点可以被定义为在运行时存在的物理元素；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503026786121818.png" alt="img" loading="lazy"></p><h3 id="行为事物" tabindex="-1"><a class="header-anchor" href="#行为事物" aria-hidden="true">#</a> 行为事物</h3><p>行为事物指的是 UML 模型中的动态部分，代表语句里的 &quot;动词&quot;，表示模型里随着时空不断变化的部分，包含两类：</p><ul><li>交互被定义为一种行为，包括一组元素之间的消息交换来完成特定的任务。</li></ul><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027686313760.png" alt="img" loading="lazy"></p><ul><li>状态机由一系列对象的状态组成，它是有用的，一个对象在其生命周期的状态是很重要的。</li></ul><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027701231138.png" alt="img" loading="lazy"></p><h3 id="分组事物" tabindex="-1"><a class="header-anchor" href="#分组事物" aria-hidden="true">#</a> 分组事物</h3><p>可以把分组事物看成是一个&quot;盒子&quot;，模型可以在其中被分解。目前只有一种分组事物，即包（package）。结构事物、动作事物甚至分组事物都有可能放在一个包中。包纯粹是概念上的，只存在于开发阶段，而组件在运行时存在。</p><p>包:封装是唯一一个分组事物可收集结构和行为的东西。</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027889642542.png" alt="img" loading="lazy"></p><h3 id="注释事物" tabindex="-1"><a class="header-anchor" href="#注释事物" aria-hidden="true">#</a> 注释事物</h3><p>注释事物可以被定义为一种机制来捕捉UML模型元素的言论，说明和注释。注释是唯一一个注释事物。</p><p>注释用于渲染意见，约束等的UML元素。</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503027895319734.png" alt="img" loading="lazy"></p><h2 id="关系" tabindex="-1"><a class="header-anchor" href="#关系" aria-hidden="true">#</a> 关系</h2><p>关系显示元素是如何彼此相关联，此关联描述的一个应用程序的功能，UML中定义了四种关系：</p><h3 id="a-依赖关系" tabindex="-1"><a class="header-anchor" href="#a-依赖关系" aria-hidden="true">#</a> A 依赖关系:</h3><p>依赖是两件事物之间的语义联系，其中一个事物的变化也影响到另一个事物。</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503028031675933.png" alt="img" loading="lazy"></p><h3 id="b-协作" tabindex="-1"><a class="header-anchor" href="#b-协作" aria-hidden="true">#</a> B 协作:</h3><p>一种描述一组对象之间连接的结构关系，如聚合关系（描述了整体和部分间的结构关系）；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503028037625295.png" alt="img" loading="lazy"></p><h3 id="c-泛化" tabindex="-1"><a class="header-anchor" href="#c-泛化" aria-hidden="true">#</a> C 泛化:</h3><p>泛化可以被定义为一个专门的元件连接关系与一个广义的元素，它基本上描述了在对象世界中的<strong>继承关系</strong>，是一种一般化-特殊化的关系；</p><p><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/1503028042977930.png" alt="img" loading="lazy"></p><h3 id="d-实现" tabindex="-1"><a class="header-anchor" href="#d-实现" aria-hidden="true">#</a> D 实现:</h3><p>类之间的语义关系，其中的一个类指定了由另一个类保证执行的契约。</p><p><img src="https://atts.w3cschool.cn/attachments/image/20170818/1503028048635277.png" alt="img" loading="lazy"></p><h2 id="uml图" tabindex="-1"><a class="header-anchor" href="#uml图" aria-hidden="true">#</a> UML图</h2><p>UML 图是整个过程中最重要的部分，展示出系统的所有元素</p><p>图是事物集合的分类，UML 中包含多种图：</p><ol><li>类图：类图描述系统所包含的<strong>类、类的内部结构及类之间的关系；</strong></li><li>对象图：对象图是类图的一个具体实例；</li><li>顺序图：顺序图表示对象之间动态合作的关系；</li><li>协作图：协作图描述对象之间的协作关系；</li><li>状态图：状态图描述一类对象的所有可能的状态以及事件发生时状态的转移条件；</li><li>部署关系图：部署关系图定义系统中软硬件的物理体系结构；</li><li>组件图：组件图描述代码部件的物理结构以及各部件之间的依赖关系；</li><li>活动图：活动图描述系统中各种活动的执行顺序。</li><li>用例图：用例图<strong>从用户的角度</strong>出发描述系统的功能、需求，展示系统外部的各类角色与系统内部的各种用例之间的关系；</li></ol><h1 id="uml类图" tabindex="-1"><a class="header-anchor" href="#uml类图" aria-hidden="true">#</a> UML类图</h1><ul><li>在软件工程中，类图是一种<strong>静态的结构图</strong>，描述了系统的类的集合，类的属性和类之间的关系，可以<strong>简化了人们对系统的理解</strong>；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h2 id="类图表示" tabindex="-1"><a class="header-anchor" href="#类图表示" aria-hidden="true">#</a> 类图表示</h2>',62),g={href:"https://blog.csdn.net/weixin_57504000/article/details/124218420",target:"_blank",rel:"noopener noreferrer"};function m(f,b){const r=c("ExternalLinkIcon");return l(),d("div",null,[s,a("blockquote",null,[h,a("p",null,[a("a",p,[e("https://www.w3cschool.cn/uml_tutorial/uml_tutorial-c1gf28pd.html"),i(r)])])]),u,a("blockquote",null,[a("p",null,[e("学习链接："),a("a",g,[e("https://blog.csdn.net/weixin_57504000/article/details/124218420"),i(r)])])])])}const x=n(t,[["render",m],["__file","UML类图.html.vue"]]);export{x as default};

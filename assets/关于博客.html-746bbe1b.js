import{_ as t,W as p,X as l,Y as n,Z as s,$ as i,a0 as a,C as o}from"./framework-52f8fb67.js";const c="/assets/image-20230311133146598-7c13221c.png",d="/assets/image-20230311135650669-28141faf.png",u="/assets/image-20230311135217147-efa164a9.png",r="/assets/image-20230311135303902-8904f0f2.png",m="/assets/image-20230311135904991-20f2f04b.png",g="/assets/image-20230311141326887-7cbf2cf7.png",v="/assets/image-20230311141617167-930680c4.png",h="/assets/image-20230311142430423-03057e7f.png",k="/assets/image-20230311142714721-d7daede3.png",b="/assets/image-20230311143235520-7d8d5a4c.png",f="/assets/image-20230311143502963-1770f7d4.png",_="/assets/image-20230311143938914-7e8a65e1.png",y="/assets/image-20230311144241070-6d578e69.png",x={},w=a('<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>就是玩儿</p></div><h2 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h2><p>本博客依赖<code>vuepress-theme-hope</code>主题模板进行搭建，依照官方教程做了些自定义的配置，大致符合自己简洁、清晰的审美理念，就直接上线了。此文档更多的是整体搭建和详细部署的说明，对自定义配置各位参照文档，一两个小时也就搞定了~</p><p>助力每一个想要搭建自己博客的少男少女，愿你少踩点非必要的坑~</p><p>博客相关内容持续集成中，欢迎关注交流！！</p><h2 id="博客搭建" tabindex="-1"><a class="header-anchor" href="#博客搭建" aria-hidden="true">#</a> 博客搭建</h2>',6),z={href:"https://vuepress-theme-hope.gitee.io/v2/zh/cookbook/tutorial/",target:"_blank",rel:"noopener noreferrer"},N=a(`<h3 id="_1-运行环境" tabindex="-1"><a class="header-anchor" href="#_1-运行环境" aria-hidden="true">#</a> 1.运行环境</h3><p>idea + Node.js + pnpm</p><ul><li><p>idea：选择它作为开发工具只有一个原因，那就是习惯了~~官方推荐vscode会有更多的语法提示，但不会使用的配置还是要自己去读文档，提示作用不大，而且idea也有一些提示的；</p></li><li><p>node.js：版本选择的是<code>v16.16.0</code>，大于等于该版本应该均可；</p></li><li><p>pnpm：版本选择的是<code>7.28.0</code>，推荐用它管理项目，比npm速度快、节省空间；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>corepack <span class="token builtin class-name">enable</span>
corepack prepare pnpm@7.28.0 <span class="token parameter variable">--activate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-创建项目" tabindex="-1"><a class="header-anchor" href="#_2-创建项目" aria-hidden="true">#</a> 2.创建项目</h3><p>找到本机要存放项目的位置，创建文件夹（最好英文），直接cmd在终端输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#Rblog替换为自己的项目名称</span>
<span class="token comment">#当然，项目名称也建议使用英文</span>
<span class="token function">pnpm</span> create vuepress-theme-hope Rblog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着一路选择，记得选择<code>pnpm</code>，然后自动部署文档输入<code>y</code>（后面会用到）</p><figure><img src="`+c+'" alt="image-20230311133146598" tabindex="0" loading="lazy"><figcaption>image-20230311133146598</figcaption></figure><p>安装好依赖后，会提示输入y查看博客网址</p>',9),C={href:"https://github.com/vuepress-theme-hope/vuepress-theme-hope/releases",target:"_blank",rel:"noopener noreferrer"},E=a(`<p>选择github中最新的版本或之前稳定的某版本，再次尝试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#指定项目版本为v2.0.0-beta.190</span>
<span class="token function">pnpm</span> create vuepress-theme-hope@v2.0.0-beta.190 Rblog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q=a(`<h3 id="_3-启动项目" tabindex="-1"><a class="header-anchor" href="#_3-启动项目" aria-hidden="true">#</a> 3.启动项目</h3><p>进入项目终端下输入<code>pnpm docs:dev</code></p><ul><li>如果不出意外，就可以在本机8080端口访问了，当然你也可以修改端口号，在package.json文件修改命令</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//修改前</span>
<span class="token property">&quot;docs:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev src&quot;</span><span class="token punctuation">,</span>
<span class="token comment">//修改后</span>
<span class="token property">&quot;docs:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev src --port=8083&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="博客部署" tabindex="-1"><a class="header-anchor" href="#博客部署" aria-hidden="true">#</a> 博客部署</h2><p>请注意：下面要写的是整个博客的<code>自动部署</code>，并非一次简单的手动部署，所以按需食用</p><h3 id="step1-上传项目" tabindex="-1"><a class="header-anchor" href="#step1-上传项目" aria-hidden="true">#</a> step1.上传项目</h3>`,7),j=n("li",null,[n("p",null,[s("github新建仓库，命名要为"),n("code",null,"用户名.github.io"),s("，如我的github用户名为ru12321，那么此次新仓库命名为"),n("code",null,"ru12321.github.io"),s("，仓库地址如图获取")]),n("figure",null,[n("img",{src:d,alt:"image-20230311135650669",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230311135650669")])],-1),S={href:"http://xn--deploy-9v7iw71aui2c7ho8gxslxr3em80e9yxa.sh",target:"_blank",rel:"noopener noreferrer"},A=a(`<p>脚本作用：构建项目、将dist下的所有文件由本地的master分支提交到远端仓库<code>ru12321.github.io</code>的<code>gh-pages分支</code></p><p>你要做的：修改仓库地址为自己的即可，远端分支gh-pages命名不要改！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>

<span class="token comment"># 确保脚本抛出遇到的错误</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># 构建项目,生成静态文件</span>
<span class="token function">pnpm</span> docs:build

<span class="token comment"># 进入构建项目后生成的文件夹</span>
<span class="token builtin class-name">cd</span> src/.vuepress/dist

<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy&#39;</span>

<span class="token comment">#修改仓库地址为自己的</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> https://github.com/ru12321/ru12321.github.io.git master:gh-pages
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),O=n("li",null,[n("p",null,"执行deploy.sh脚本，进入到脚本位置，右键使用git打开"),n("figure",null,[n("img",{src:u,alt:"image-20230311135217147",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230311135217147")])],-1),I=n("li",null,[n("p",null,[s("执行脚本"),n("code",null,"sh deploy.sh"),s("，上传项目打包文件到远端github.io仓库")])],-1),T=a('<figure><img src="'+r+'" alt="image-20230311135303902" tabindex="0" loading="lazy"><figcaption>image-20230311135303902</figcaption></figure><ul><li><p>上传完成后，github pages模块就会触发部署，自动生成你的网站</p><p>如图，去仓库的对应位置，就可以通过这个域名访问自己的网站了</p></li></ul><figure><img src="'+m+'" alt="image-20230311135904991" tabindex="0" loading="lazy"><figcaption>image-20230311135904991</figcaption></figure><p>总结，以上通过deploy.sh脚本实现了<code>项目的构建、上传构建后文件到远端github仓库gh-pages分支、触发pages构建网站</code>，博客网站到此就可以通过<code>https://用户名.github.io</code>域名访问了。但是想想以后你每次修改了博客内容，都要手动去执行下deploy.sh脚本更新你的网站，是不是有点麻烦呢？所以有了接下来自动部署的步骤</p><h3 id="step2-项目上传" tabindex="-1"><a class="header-anchor" href="#step2-项目上传" aria-hidden="true">#</a> step2 项目上传</h3><p>为了方便使用github管理项目，及更好的利用github的actions机制，需要上传整个项目到远端<code>用户名.github.io</code>的master主分支上。这样做的目的是，之后每次本地修改了博客内容，通过push到github远端，都会进行后续一系列的自动更新网站，实现自动部署的效果~~</p><ul><li><p>push整个项目内容到远端的master分支上，会git的应该都懂吧。</p><p>中间可能需要登录下github、输入下远端仓库的地址~</p></li></ul><figure><img src="'+g+'" alt="image-20230311141326887" tabindex="0" loading="lazy"><figcaption>image-20230311141326887</figcaption></figure><p>至此，远端仓库有了两个分支</p><figure><img src="'+v+`" alt="image-20230311141617167" tabindex="0" loading="lazy"><figcaption>image-20230311141617167</figcaption></figure><p>master：管理整个博客项目使用</p><p>gh-pages：存放的是博客构建后的所有文件，用来通过pages模块生成博客网站</p><h3 id="step3-修改workflows脚本" tabindex="-1"><a class="header-anchor" href="#step3-修改workflows脚本" aria-hidden="true">#</a> step3.修改workflows脚本</h3><p>说明一下：本质就是通过github的actions模块，自动监测项目master分支的变动，然后执行actions的workflows的脚本，依然是<code>项目构建、自动更新代码文件到gh-pages分支上、自动触发pages构建网站</code>，所以重点就是workflows工作流的脚本的编写和相应的配置了</p><p>不出意外的话，项目本身会有<code>.github/workflows/deplooy-docs.yml</code>这个文件，它就是我们需要的脚本！</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> 部署文档

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token comment"># 确保这是你正在使用的分支名称</span>
      <span class="token punctuation">-</span> master

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">deploy-gh-pages</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 安装 pnpm
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> pnpm/action<span class="token punctuation">-</span>setup@v2
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">7</span>
          <span class="token key atrule">run_install</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 设置 Node.js
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">18</span>
          <span class="token key atrule">cache</span><span class="token punctuation">:</span> pnpm

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 构建文档
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token key atrule">NODE_OPTIONS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>max_old_space_size=8192
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
          pnpm run docs<span class="token punctuation">:</span>build
          <span class="token punctuation">&gt;</span> src/.vuepress/dist/.nojekyll

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 部署文档
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@v4
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment">#github API会拿到这个值  </span>
          <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token comment"># 这是文档部署到的分支名称</span>
          <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages
          <span class="token key atrule">folder</span><span class="token punctuation">:</span> src/.vuepress/dist

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上需要修改和注意的地方有三个，其它地方可以对比下，应该不需要改动</p><ol><li>第7行的分支名称：就是我们step2上传的远端分支名称，如master</li><li>第16行<code>fetch-depth: 0</code> 检测分支用的</li><li>第40行 先这样写，接下来说明这一行token的配置</li></ol><h3 id="step4-生成token" tabindex="-1"><a class="header-anchor" href="#step4-生成token" aria-hidden="true">#</a> step4.生成token</h3><p>上面的token是为了在触发actions自动部署时，action<strong>有权限去切换到gh-pages分支并更新其内容</strong>，所以是必要的！</p><h4 id="配置1-生成token" tabindex="-1"><a class="header-anchor" href="#配置1-生成token" aria-hidden="true">#</a> 配置1 生成token</h4><p>点击github右上角头像--<code>settings</code>--<code>developer settings</code>--<code>personal access tokens</code>--<code>token(classic)</code>--<code>generate new token</code>--<code>generate new token(classic)</code></p><figure><img src="`+h+'" alt="image-20230311142430423" tabindex="0" loading="lazy"><figcaption>image-20230311142430423</figcaption></figure><ul><li><p>输入密码弹出页面</p><p>输入Note名称为<code>ACCESS_TOKEN</code> 对应上面workflows脚本的那个值</p><p>设定token到期时间、</p><p>勾选token作用范围 repo即可</p></li></ul><figure><img src="'+k+'" alt="image-20230311142714721" tabindex="0" loading="lazy"><figcaption>image-20230311142714721</figcaption></figure><ul><li>点击<code>generate token</code> 生成秘钥</li><li>保存复制一串数字+字母组合，如<code>ghp_vzoGj02I0dqwueykhflwZv6Cq4r05q4aN</code>后面会用到</li></ul><h4 id="配置2-在仓库配置" tabindex="-1"><a class="header-anchor" href="#配置2-在仓库配置" aria-hidden="true">#</a> 配置2 在仓库配置</h4><ul><li>如图，新建一个secret，命名为<code>ACCESS_TOKEN</code>，值为上面的一串神秘组合</li></ul><figure><img src="'+b+'" alt="image-20230311143235520" tabindex="0" loading="lazy"><figcaption>image-20230311143235520</figcaption></figure><ul><li><p>操作完后就会生成一个secret</p><figure><img src="'+f+'" alt="image-20230311143502963" tabindex="0" loading="lazy"><figcaption>image-20230311143502963</figcaption></figure></li></ul><h3 id="step5-额外配置" tabindex="-1"><a class="header-anchor" href="#step5-额外配置" aria-hidden="true">#</a> step5.额外配置</h3><p>仓库的settings--<code>Actions</code>--<code>General</code></p><p>如图，修改两个选项为workflows增加操作仓库的权限，修改完记得分部点下save</p><figure><img src="'+_+'" alt="image-20230311143938914" tabindex="0" loading="lazy"><figcaption>image-20230311143938914</figcaption></figure><hr><hr><hr><h3 id="step6-测试一下" tabindex="-1"><a class="header-anchor" href="#step6-测试一下" aria-hidden="true">#</a> step6.测试一下</h3><p>至此，完成了博客的自动部署配置，可以本地修改某个md文件内容，上传到远端master分支，看看有没有自动出发pages自动更新网站内容呢？actions触发成功会显示为绿色，失败也会有相应的日志可以查看。</p><figure><img src="'+y+'" alt="image-20230311144241070" tabindex="0" loading="lazy"><figcaption>image-20230311144241070</figcaption></figure><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>初次尝试搭建博客，过程中有其它问题也欢迎交流，可以通过github提出issue~</p>',42);function K(V,B){const e=o("ExternalLinkIcon");return p(),l("div",null,[w,n("p",null,[s("官网有"),n("a",z,[s("小白教程"),i(e)]),s("可以大致参考，多余的不再重复~~")]),N,n("ul",null,[n("li",null,[n("p",null,[s("意外情况：输入y出现报错，这个极有可能是vuepress-theme-hope的版本问题，解决方式就是指定该项目的"),n("a",C,[s("版本号"),i(e)])]),E])]),q,n("ul",null,[j,n("li",null,[n("p",null,[n("a",S,[s("项目中添加部署脚本deploy.sh"),i(e)])]),A]),O,I]),T])}const G=t(x,[["render",K],["__file","关于博客.html.vue"]]);export{G as default};

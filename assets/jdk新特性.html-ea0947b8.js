const e=JSON.parse('{"key":"v-e2b942a2","path":"/tech/java/jdk%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"jdk8新特性","lang":"zh-CN","frontmatter":{"title":"jdk8新特性","date":"2022-02-02T00:00:00.000Z","category":"java","description":"学习资料 https://blog.csdn.net/LXYDSF/article/details/125919046 一、Stream新特性 Stream概念 java.util.stream包 Stream 是Java8 中处理集合的关键抽象概念，它可以对集合执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询。 Stream API 提供了一种高效且易于使用的处理数据的方式。 Stream 和Collection 集合的区别：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算。 集合讲的是数据，关注的是数据的存储，与内存打交道 Stream 讲的是计算，关注的是对数据的运算，与CPU打交道 Stream是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 Stream 自己不会存储元素。 Stream 不会改变源对象。相反，他们会返回一个持有结果的新 Stream 。 Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/tech/java/jdk%E6%96%B0%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"Mr.Ru"}],["meta",{"property":"og:title","content":"jdk8新特性"}],["meta",{"property":"og:description","content":"学习资料 https://blog.csdn.net/LXYDSF/article/details/125919046 一、Stream新特性 Stream概念 java.util.stream包 Stream 是Java8 中处理集合的关键抽象概念，它可以对集合执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询。 Stream API 提供了一种高效且易于使用的处理数据的方式。 Stream 和Collection 集合的区别：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算。 集合讲的是数据，关注的是数据的存储，与内存打交道 Stream 讲的是计算，关注的是对数据的运算，与CPU打交道 Stream是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 Stream 自己不会存储元素。 Stream 不会改变源对象。相反，他们会返回一个持有结果的新 Stream 。 Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-02-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jdk8新特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":1,"title":"一、Stream新特性","slug":"一、stream新特性","link":"#一、stream新特性","children":[{"level":2,"title":"Stream概念","slug":"stream概念","link":"#stream概念","children":[]},{"level":2,"title":"Stream操作","slug":"stream操作","link":"#stream操作","children":[{"level":3,"title":"1 操作步骤","slug":"_1-操作步骤","link":"#_1-操作步骤","children":[]},{"level":3,"title":"2 创建","slug":"_2-创建","link":"#_2-创建","children":[]},{"level":3,"title":"3 中间操作","slug":"_3-中间操作","link":"#_3-中间操作","children":[]},{"level":3,"title":"4 终止操作","slug":"_4-终止操作","link":"#_4-终止操作","children":[]}]}]},{"level":1,"title":"二、Lambda表达式","slug":"二、lambda表达式","link":"#二、lambda表达式","children":[]},{"level":1,"title":"三、函数式接口","slug":"三、函数式接口","link":"#三、函数式接口","children":[{"level":2,"title":"1 函数式接口概念","slug":"_1-函数式接口概念","link":"#_1-函数式接口概念","children":[]},{"level":2,"title":"2 Java内置的函数式接口","slug":"_2-java内置的函数式接口","link":"#_2-java内置的函数式接口","children":[{"level":3,"title":"2.1 消费型接口 Consumer< T>     void accept(T t)","slug":"_2-1-消费型接口-consumer-t-void-accept-t-t","link":"#_2-1-消费型接口-consumer-t-void-accept-t-t","children":[]},{"level":3,"title":"2.2 生产型接口 Supplier< T>      T get()","slug":"_2-2-生产型接口-supplier-t-t-get","link":"#_2-2-生产型接口-supplier-t-t-get","children":[]},{"level":3,"title":"2.3 函数型接口 Function<T, R>      R  apply(T t)","slug":"_2-3-函数型接口-function-t-r-r-apply-t-t","link":"#_2-3-函数型接口-function-t-r-r-apply-t-t","children":[]},{"level":3,"title":"2.4 断定型接口 Predicate< T>       boolean   test(T t)","slug":"_2-4-断定型接口-predicate-t-boolean-test-t-t","link":"#_2-4-断定型接口-predicate-t-boolean-test-t-t","children":[]}]}]},{"level":1,"title":"四、方法引用与构造器引用","slug":"四、方法引用与构造器引用","link":"#四、方法引用与构造器引用","children":[{"level":2,"title":"4.2","slug":"_4-2","link":"#_4-2","children":[{"level":3,"title":"1 方法引用","slug":"_1-方法引用","link":"#_1-方法引用","children":[]},{"level":3,"title":"2 构造器引用","slug":"_2-构造器引用","link":"#_2-构造器引用","children":[]}]}]},{"level":1,"title":"五、Optional类","slug":"五、optional类","link":"#五、optional类","children":[{"level":3,"title":"1 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":3,"title":"2 创建optional实例","slug":"_2-创建optional实例","link":"#_2-创建optional实例","children":[]},{"level":3,"title":"3 访问对象的值","slug":"_3-访问对象的值","link":"#_3-访问对象的值","children":[]},{"level":3,"title":"4 返回默认值","slug":"_4-返回默认值","link":"#_4-返回默认值","children":[]},{"level":3,"title":"5.map()方法","slug":"_5-map-方法","link":"#_5-map-方法","children":[]}]}],"git":{},"readingTime":{"minutes":11.98,"words":3594},"filePathRelative":"tech/java/jdk新特性.md","localizedDate":"2022年2月2日","excerpt":"<p>学习资料 <a href=\\"https://blog.csdn.net/LXYDSF/article/details/125919046\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://blog.csdn.net/LXYDSF/article/details/125919046</a></p>\\n<h1> 一、Stream新特性</h1>\\n<h2> Stream概念</h2>\\n<p>java.util.stream包</p>\\n<ul>\\n<li>\\n<p>Stream 是Java8 中<strong>处理集合</strong>的关键抽象概念，它可以对集合执行非常复杂的查找、过滤和映射数据等操作。<strong>使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询</strong>。</p>\\n</li>\\n<li>\\n<p>Stream API 提供了一种高效且易于使用的处理数据的方式。</p>\\n<ul>\\n<li><strong>Stream 和Collection 集合的区别</strong>：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><mark>集合讲的是数据，关注的是数据的存储，与内存打交道</mark></strong></p>\\n</li>\\n<li>\\n<p><strong><mark>Stream 讲的是计算，关注的是对数据的运算，与CPU打交道</mark></strong></p>\\n</li>\\n<li>\\n<p>Stream是<mark>数据渠道</mark>，用于操作数据源（集合、数组等）所生成的元素序列。</p>\\n<ul>\\n<li>Stream 自己不会存储元素。</li>\\n<li>Stream 不会改变源对象。相反，他们会<em>返回一个持有结果的新 Stream</em> 。</li>\\n<li>Stream 操作是延迟执行的。这意味着他们会等到<em>需要结果的时候才执行</em>。</li>\\n</ul>\\n</li>\\n</ul>","copyright":{},"autoDesc":true}');export{e as data};

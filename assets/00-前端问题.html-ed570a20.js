import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as e,C as l}from"./framework-715d567f.js";const i={},u=e(`<h1 id="_4月-填报组件" tabindex="-1"><a class="header-anchor" href="#_4月-填报组件" aria-hidden="true">#</a> 4月 填报组件</h1><h2 id="_1-本地启动前后端" tabindex="-1"><a class="header-anchor" href="#_1-本地启动前后端" aria-hidden="true">#</a> 1.本地启动前后端</h2><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>spring.cloud.config.label=estate;spring.profiles.active=dev;spring.cloud.config.uri=http://10.20.1.55:7001/;spring.application.name=estate-fill-ruyb;server.servlet.context-path=/estate-fill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>webpack.module.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> buildModule <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@coral/coral-web-toolchain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> server<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token literal-property property">nodeModulesDir</span><span class="token operator">:</span> moduleDir<span class="token punctuation">,</span> appName<span class="token punctuation">,</span> <span class="token operator">...</span>context <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./context&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./entry.config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> blackList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;forget&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>context<span class="token punctuation">,</span>
    moduleDir<span class="token punctuation">,</span>
    entry<span class="token punctuation">,</span>
    blackList<span class="token punctuation">,</span>
    <span class="token literal-property property">app</span><span class="token operator">:</span> appName<span class="token punctuation">,</span>
    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> server<span class="token punctuation">,</span>
      port<span class="token punctuation">,</span>
      <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">// 使用RegExp可以自动匹配appName,但是字符串中转义符需要使用 \\\\</span>
      <span class="token literal-property property">matcher</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(^\\\\/(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>appName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)\\\\/)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;gi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 需要本地调试前端策略或其他文件时,可以另外添加目录</span>
      <span class="token comment">// matcher: new RegExp(\`(^\\\\/(\${appName}|config)\\\\/)\`, &#39;gi&#39;)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> defaultConfig <span class="token operator">=</span> <span class="token function">buildModule</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  defaultConfig<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>defaultConfig<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//配置处理 css文件的第三方loader规则</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sass-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//配置处理 css文件的第三方loader</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  defaultConfig<span class="token punctuation">.</span>devServer<span class="token punctuation">.</span>proxy <span class="token operator">=</span>  <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/estate-fill&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://localhost:8501</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>defaultConfig<span class="token punctuation">.</span>devServer<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> defaultConfig<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以再module.js文件修改路由，这样请求会打到自己在本地启动后端的服务</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304101714023.png" alt="image-20230410171402961" loading="lazy"></p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304101714364.png" alt="image-20230410171455337" loading="lazy"></p><h2 id="_2-前端配置模块的整体路由" tabindex="-1"><a class="header-anchor" href="#_2-前端配置模块的整体路由" aria-hidden="true">#</a> 2.前端配置模块的整体路由</h2><p>写好某个模块的代码后，如fill_web</p><h3 id="_1-超级后台配置模块" tabindex="-1"><a class="header-anchor" href="#_1-超级后台配置模块" aria-hidden="true">#</a> 1.超级后台配置模块</h3><ul><li><code>moduleCode</code>就是模块编码</li><li><code>fill_web/FillFormPreview</code> 去匹配boot.js</li><li>扩展数据中可以放一些需要用到的数据，这里是预置了<code>fillTemplateCode</code></li></ul><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061044127.png" alt="image-20230406104436083" loading="lazy"></p><h3 id="_2-配置内测服务器的boot-js" tabindex="-1"><a class="header-anchor" href="#_2-配置内测服务器的boot-js" aria-hidden="true">#</a> 2.配置内测服务器的boot.js</h3><ul><li><code>key</code>对应的就是上面配置的路径</li><li><code>baseUrl</code>对应的是fill_web服务打包后的根路径</li><li>路由转发到 <code>域名 + fill_web/daily + FillFormPreview</code></li></ul>`,15),r={href:"https://geek.glodon.com/projects/ESTATEPRODUCTPLATFORM/repos/coral-bootstrap/browse/config/dev/boot.js",target:"_blank",rel:"noopener noreferrer"},d=e(`<p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061047181.png" alt="image-20230406104750157" loading="lazy"></p><ul><li><code>FillFormPreview</code>对应到fill_web服务的入口类</li></ul><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061059385.png" alt="image-20230406105920345" loading="lazy"></p><h3 id="_3-加载newmain-js文件" tabindex="-1"><a class="header-anchor" href="#_3-加载newmain-js文件" aria-hidden="true">#</a> 3.加载newMain.js文件</h3><h3 id="_4-拿到模块管理预置的扩展数据" tabindex="-1"><a class="header-anchor" href="#_4-拿到模块管理预置的扩展数据" aria-hidden="true">#</a> 4.拿到模块管理预置的扩展数据</h3><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202304061102011.png" alt="image-20230406110241967" loading="lazy"></p><h2 id="_3-hooks用法汇总" tabindex="-1"><a class="header-anchor" href="#_3-hooks用法汇总" aria-hidden="true">#</a> 3.hooks用法汇总</h2><p>初步理解：hooks让函数式组件(Function)更高效，代码更加简洁</p><h3 id="_3-0-视图更新" tabindex="-1"><a class="header-anchor" href="#_3-0-视图更新" aria-hidden="true">#</a> 3.0 视图更新</h3><p>state发生了变化，就重新渲染视图；实际上通过<code>虚拟DOM 配合 Diff 算法</code>达到部分更新</p><p>执行过程</p><ol><li>初次渲染时，React会根据初始化的state（model），创建一个<code>虚拟DOM对象（树）</code></li><li>根据虚拟DOM生成真正的DOM，渲染到页面</li><li>当数据变化后(setState())，会重新根据新的数据，创建新的虚拟DOM对象（树）</li><li>与上一次得到的虚拟DOM对象，使用<code>Diff算法</code>比对（找不同），得到需要更新的内容</li><li>最终，React只将<code>变化的内容</code>更新（patch）到DOM中，重新渲染到页面</li></ol><h3 id="_3-1-usestate-状态管理" tabindex="-1"><a class="header-anchor" href="#_3-1-usestate-状态管理" aria-hidden="true">#</a> 3.1 useState 状态管理</h3><p><code>useState</code>使普通函数组件也有了状态管理的能力</p><ul><li>使用时建议<strong>只存储跟组件渲染相关的数据</strong></li><li>setState是一个函数，它接收一个新的 state 值并将组件的一次重新渲染加入队列</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//左侧数组部分为ES6的解构赋值</span>
<span class="token comment">//数组第1个参数为状态值(用于控制页面的展示和逻辑处理)，第2个参数是更改值的方法</span>
<span class="token comment">//useState方法需要一个参数，这个参数就是状态值的默认值</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>setState是异步的，不会立即更新，是收集所有setState后，再进行视图更新</li></ul><hr><ul><li>当我们设置状态为数组或对象且只想改变其中一项属性时，正确方法是使用解构赋值或是深浅拷贝的形式，这样才能改变info的指针指向，才能够刷新视图</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">let</span> setInfo <span class="token operator">=</span> info<span class="token punctuation">;</span>
setInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>setInfo<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-useeffect-副作用" tabindex="-1"><a class="header-anchor" href="#_3-2-useeffect-副作用" aria-hidden="true">#</a> 3.2 useEffect 副作用</h3><p><code>useEffect</code>主要用于监听依赖项，执行副作用函数</p><p>useEffect方法有两个参数，第1个参数是<strong>要执行的函数</strong>，第2个参数是一个<strong>依赖项数组</strong>(根据具体需要监听什么<strong>状态值</strong>来决定数组内要填写什么)。</p><blockquote><p>不传递参数时，<code>每次渲染都会运行useEffect</code></p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;使用useEffect&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 所有更新都执行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>传递空数组，<code>仅在挂载和卸载的时候执行</code></p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;使用useEffect&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 仅在挂载和卸载的时候执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>传递非空数组，在监听值更新时才会触发</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// count更新时执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-usememo-状态缓存-提升性能" tabindex="-1"><a class="header-anchor" href="#_3-3-usememo-状态缓存-提升性能" aria-hidden="true">#</a> 3.3 useMemo 状态缓存，提升性能</h3><p><code>useMemo</code>是以<strong>缓存状态</strong>的形式来对渲染上进行性能优化的手段</p><ul><li>存在问题：父组件重新渲染会触发子组件渲染，避免子组件的非必要渲染（子组件的状态没变化就不要重新渲染子组件啦）</li></ul><p>父组件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;名称&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>content<span class="token punctuation">,</span>setContent<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;内容&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">name</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setContent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">content</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件 Button</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&#39;改变name的方法&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> otherName <span class="token operator">=</span> <span class="token function">changeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> 
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>otherName<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>期望只有当name发生改变时候，才触发子组件的changeName方法。但当我们改变content时，也触发了changeName。因为<strong>父组件的重新渲染也重新渲染了子组件</strong></p><p>优化子组件 使用useMemo<strong>对状态name进行缓存</strong>，只有改变的时候才触发相应方法</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;xiaoling&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&#39;改变name的方法&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> otherName <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">changeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>otherName<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-usecallback-方法缓存" tabindex="-1"><a class="header-anchor" href="#_3-4-usecallback-方法缓存" aria-hidden="true">#</a> 3.4 useCallBack 方法缓存</h3><h3 id="_3-5-useref-最新指向" tabindex="-1"><a class="header-anchor" href="#_3-5-useref-最新指向" aria-hidden="true">#</a> 3.5 useRef 最新指向</h3><p>useRef返回一个可变的ref对象，其.current属性被初始化为传入的参数(<code>initialValue</code>)。返回的ref对象<strong>在组件的整个生命周期内不变</strong></p><ul><li>用ref对象的.current去赋值和使用，总是能拿到最新的值</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> isShow <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">changeCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
isShow<span class="token punctuation">.</span>current <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>changeCount<span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">addCount</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>isShow<span class="token punctuation">.</span>current <span class="token operator">?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>showCount<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-usecontext-跨组件通信" tabindex="-1"><a class="header-anchor" href="#_3-6-usecontext-跨组件通信" aria-hidden="true">#</a> 3.6 useContext 跨组件通信</h3><p><code>useContext</code>主要用于父子组件之间状态的<strong>跨级传递</strong>，实现了状态的共享类似于Vue的Vuex。</p><p>在认识useContext之前，与<strong>孙组件</strong>的状态传递是通过props。</p><p>父组件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> CountContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span>setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">useContext点击我</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text"> 了次</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setCount</span><span class="token punctuation">(</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">点击我</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            //使用Provider
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CountContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CountContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子孙组件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CountContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./父组件位置&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// 使用父组件的count参数</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>CountContext<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-公共组件的抽提" tabindex="-1"><a class="header-anchor" href="#_4-公共组件的抽提" aria-hidden="true">#</a> 4.公共组件的抽提</h2><p>通常，在多个页面重复使用或表现形式相似的地方可以考虑抽提为公共组件，进行复用</p><p>填报组件中对react简单公共组件的抽提，可以简单学习<code>HeaderContent.js</code>文件</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111523083.png" alt="image-20230511152349013" loading="lazy"></p><p>对应页面长这样：</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111524697.png" alt="image-20230511152436645" loading="lazy"></p><p>这个页面右侧的三个按钮是定义的prop中的<code>RenderRDom</code>，通过父组件传递函数来渲染的</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202305111527399.png" alt="image-20230511152753351" loading="lazy"></p><h2 id="_5-前端antd组件数据回显" tabindex="-1"><a class="header-anchor" href="#_5-前端antd组件数据回显" aria-hidden="true">#</a> 5.前端antd组件数据回显</h2><p>注意value和onChange</p><h1 id="_5月-填报组件" tabindex="-1"><a class="header-anchor" href="#_5月-填报组件" aria-hidden="true">#</a> 5月 填报组件</h1><h2 id="_1-json解析顺序改变" tabindex="-1"><a class="header-anchor" href="#_1-json解析顺序改变" aria-hidden="true">#</a> 1.json解析顺序改变</h2><p>问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JSONObject</span> detailInfo <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>flDocDetail<span class="token punctuation">.</span><span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JSONObject</span> detailInfo <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>flDocDetail<span class="token punctuation">.</span><span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Feature<span class="token punctuation">.</span>OrderedField</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_6月-前端发版" tabindex="-1"><a class="header-anchor" href="#_6月-前端发版" aria-hidden="true">#</a> 6月 前端发版</h1><p>以填报前端发标准版saas生产为例：</p><h2 id="_1-发版分支打tag-v1-0-2-后-触发对应jenkins-prod-fill-web的构建到pre" tabindex="-1"><a class="header-anchor" href="#_1-发版分支打tag-v1-0-2-后-触发对应jenkins-prod-fill-web的构建到pre" aria-hidden="true">#</a> 1.发版分支打Tag(v1.0.2)后，触发对应jenkins--prod--fill-web的构建到pre</h2>`,71),k={href:"http://jenkins.glodon.com/job/esplatform/job/coral-customize-project/job/coral-customize-project-prod/job/estate-field-fill-web/",target:"_blank",rel:"noopener noreferrer"},g=e('<p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202307051006891.png" alt="image-20230616160739023" loading="lazy"></p><ul><li><p>其中构建参数这里，可以看到选中了<code>prod</code>命令，触发fill-web服务的<code>package.json</code>中的命令</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161610590.png" alt="image-20230616161020548" loading="lazy"></p></li><li><p>jenkin构建中，prod命令</p><p><code>yarn run build:prod --tag=v1.0.2</code></p><p><code>node automate/webpack.build_prod.js --tag=v1.0.2</code></p></li></ul><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161613299.png" alt="image-20230616161336248" loading="lazy"></p><ul><li><p>执行<code>change_version_and_built</code>方法：维护了static.config.js的版本号、执行真正的编译命令</p></li><li><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161620127.png" alt="image-20230616162025072" loading="lazy"></p></li><li><p>执行到<code>package.json中</code>真正的编译命令</p></li><li><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161622632.png" alt="image-20230616162211592" loading="lazy"></p></li></ul><h2 id="_2-编译过程-把fill-web编译打包后的文件夹拷贝到pre机器中的pre和bak-当前日期目录下" tabindex="-1"><a class="header-anchor" href="#_2-编译过程-把fill-web编译打包后的文件夹拷贝到pre机器中的pre和bak-当前日期目录下" aria-hidden="true">#</a> 2.编译过程，把fill_web编译打包后的文件夹拷贝到pre机器中的pre和bak/当前日期目录下</h2><p><code>通过内网跳板机[jsf_10.0.169.46]部署至远程跳板机[root@47.93.14.96:/home/deploy/bridge]，再部署至目标服务器[root@172.16.16.81:/usr/share/nginx/pre]</code></p>',6),m={href:"https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161636028.png",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"_3-pre部署到prod",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-pre部署到prod","aria-hidden":"true"},"#"),s(" 3.pre部署到prod")],-1),b={href:"http://jenkins.glodon.com/job/esplatform/job/deploy-pre-to-prod/job/estate-field-web/",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161641091.png" alt="image-20230616164148055" loading="lazy"></p><h3 id="_3-1-第一步什么都不选-先点下build-刷新下当前日期的目录-如20230616" tabindex="-1"><a class="header-anchor" href="#_3-1-第一步什么都不选-先点下build-刷新下当前日期的目录-如20230616" aria-hidden="true">#</a> 3.1 第一步什么都不选，先点下build，刷新下当前日期的目录，如20230616</h3><h3 id="_3-2-第二步选中deploy-to-prod按钮-选中当前日期的目录-再点build-才会真正部署到生产机器上" tabindex="-1"><a class="header-anchor" href="#_3-2-第二步选中deploy-to-prod按钮-选中当前日期的目录-再点build-才会真正部署到生产机器上" aria-hidden="true">#</a> 3.2 第二步选中deploy_to_prod按钮，选中当前日期的目录，再点build，才会真正部署到生产机器上</h3><h1 id="_7月-填报优化" tabindex="-1"><a class="header-anchor" href="#_7月-填报优化" aria-hidden="true">#</a> 7月 填报优化</h1><h2 id="_1-search的下拉选项逻辑" tabindex="-1"><a class="header-anchor" href="#_1-search的下拉选项逻辑" aria-hidden="true">#</a> 1.Search的下拉选项逻辑</h2><p>关于搜索字段在列表时的下拉选项的应用逻辑：</p><ol><li>自定义模板的<code>搜索字段</code>，其下拉选项内容来自<code>数据库配置的baseFieldsInfo</code></li><li>自定义模板的<code>confirm点击事件</code>， <ul><li>baseFieldsInfo中字段的<code>dataUrl</code>和<code>options</code>有值的话，会同步到<code>search_field_info</code></li><li>baseFieldsInfo中字段的<code>dataUrl</code>和<code>options</code>没值的话，先会取模板的<code>baseForm</code>中的dataUrl和options，然后再取<code>detailForm</code>中的dataUrl和options，同步到<code>search_field_info</code></li></ul></li><li>Search.jsx文件会先取<code>search_field_info</code>中的<code>ops</code>作为dataSource，再取<code>dataUrl</code>的数据源字典覆盖dataSource</li></ol><p>综上优先级是</p><p><strong>baseFieldsInfo配置的值&gt;baseForm的值&gt;detailForm的值，然后整体是dataUrl&gt;options</strong></p><h2 id="_2-search的日期控件" tabindex="-1"><a class="header-anchor" href="#_2-search的日期控件" aria-hidden="true">#</a> 2.Search的日期控件</h2><p>日期字段，如果要支持范围搜索的话，</p><p>1.首先是日期控件，且ID是内置的标准字段，控件配置中的格式只能选择<strong>日期和日期时间</strong></p><ul><li>开发注意：<strong>base_field_info要注意添加format为between</strong>，<strong>type和formType为date</strong>，才能在显示出搜索框</li></ul><p>2.该标准字段对应到后端entity和dto的字段类型只能为<strong>LocalDateTime</strong></p><p>3.搜索结果是start的00:00:00，到end的23:59:59范围内的</p><hr><ul><li></li></ul><h1 id="_8月-一户一档" tabindex="-1"><a class="header-anchor" href="#_8月-一户一档" aria-hidden="true">#</a> 8月 一户一档</h1><h1 id="_10月-填报优化" tabindex="-1"><a class="header-anchor" href="#_10月-填报优化" aria-hidden="true">#</a> 10月 填报优化</h1><h2 id="_1-搜索框日期控件的使用和效果" tabindex="-1"><a class="header-anchor" href="#_1-搜索框日期控件的使用和效果" aria-hidden="true">#</a> 1 搜索框日期控件的使用和效果</h2><p>模板中search_field_info各属性说明</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>isExt：
	1.判断字段是否属于标准字段，false代表是标准字段,true代表是扩展字段；
	2.区分的目的是后端使用该字段进行标准和扩展字段不同的搜索逻辑；
format：
	1.指定日期控件的日期格式是什么，构建搜索参数filterParams时用来判断如果是date和dateTime，
	那么搜索类型searchType就是between，传到后端的fieldType分别是DATE、DATETIME；
	2.DATE在搜索时会取~前后直接搜索，如”2023-10-26“和“2023-10-27”
	3.DATETIME
		3.1 在标准字段搜索时，会转为LocalDateTime
		3.2 在扩展字段搜索时，会拼接&quot; 00:00:00&quot;和&quot; 23:59:59&quot;字符串进行搜索
type：
	1.标识搜索框展示成什么类型的,type为date类型且format为data或dateTime，就展示为日期范围搜索；
	2.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果type是date类型的 <ul><li>如果是标准字段，<mark>且字段没有绑定控件，需手动指定format</mark>，<mark>例如updateTime和creatTime</mark><ul><li>当字段存储为时间格式 <strong>年月日T时分秒</strong> 时，指定<strong>format为dateTime</strong></li><li>当字段存储为字符串格式<strong>年-月-日</strong>时，指定<strong>format为date</strong></li></ul></li><li>如果是标准字段，且字段绑定了控件，无需指定format（根据控件选择配置项格式决定），后端该字段类型统一为<mark>LocalDateTime</mark></li><li>如果是扩展字段，指定配置项格式即可</li></ul></li></ul><p>模板配置好后，实现的效果是：</p><ul><li>如果配置项格式为<strong>日期、日期时间</strong>的话，那么搜索框显示出<strong>日期范围搜索</strong><ul><li>搜索结果是start的00:00:00，到end的23:59:59范围内的</li></ul></li><li>如果配置项格式为<strong>月、周、时间</strong>的话，那么搜索框展示的是<strong>指定字符串搜索</strong></li></ul><h2 id="_2-搜索框扩展字段使用" tabindex="-1"><a class="header-anchor" href="#_2-搜索框扩展字段使用" aria-hidden="true">#</a> 2 搜索框扩展字段使用</h2><h3 id="_2-1-扩展字段在弹窗页面使用" tabindex="-1"><a class="header-anchor" href="#_2-1-扩展字段在弹窗页面使用" aria-hidden="true">#</a> 2.1 扩展字段在弹窗页面使用</h3><p>直接拖拽控件，那么就可以在保存模板时，搜索字段展示下拉选到！</p><h3 id="_2-2-扩展字段在web页面使用" tabindex="-1"><a class="header-anchor" href="#_2-2-扩展字段在web页面使用" aria-hidden="true">#</a> 2.2 扩展字段在web页面使用</h3><ol><li>将web页面的控件id命名为<strong>standardInfo_xxx</strong>；</li><li>拖动<strong>同一类型，同一配置项</strong>的控件在弹窗页面，格式选中为<strong>hidden</strong>，控件id命名为<strong>xxx</strong>；</li><li>保存模板时，下拉搜索字段选中弹窗的控件即可；</li></ol>`,30);function f(x,y){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("https://geek.glodon.com/projects/ESTATEPRODUCTPLATFORM/repos/coral-bootstrap/browse/config/dev/boot.js"),t(a)])]),d,n("p",null,[s("jenkins-fill-web地址："),n("a",k,[s("http://jenkins.glodon.com/job/esplatform/job/coral-customize-project/job/coral-customize-project-prod/job/estate-field-fill-web/"),t(a)])]),g,n("p",null,[n("a",m,[s("https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202306161636028.png"),t(a)])]),v,n("p",null,[s("Jenkins-fill-web-pre地址"),n("a",b,[s("http://jenkins.glodon.com/job/esplatform/job/deploy-pre-to-prod/job/estate-field-web/"),t(a)])]),h])}const j=p(i,[["render",f],["__file","00-前端问题.html.vue"]]);export{j as default};

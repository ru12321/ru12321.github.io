const n=JSON.parse('{"key":"v-aaece862","path":"/tech/web_framework/vue.html","title":"Vue","lang":"zh-CN","frontmatter":{"title":"Vue","date":"2024-01-17T00:00:00.000Z","category":"javascript & vue","description":"小知识 Vue标配 //定义局部组件对象 const login = { template:`&lt;div&gt; xxx + {{msg}}&lt;/div&gt;`, data(){ return{ msg:\\"局部组件msg\\", } }, methods:{}, computed:{}, created(){}, } //定义Vue实例 根组件对象 const app = new Vue({ el: \\"#app\\", \\t//定义vue实例的作用范围 data: {\\t\\t\\t//定义vue的数据、变量 msg:\\"Vue实例根组件msg\\" }, methods: {\\t\\t//定义一系列方法 \\t }, computed:{\\t\\t//定义计算属性 login,\\t\\t//注册局部组件 }, created(){}, \\t//定义生命周期函数 components:{},\\t//定义局部组件 }) js的加载是从代码上面一直到代码下面的，vue实例部分建议写在最下面！ js中 字符串 null 和 \\"\\" 和布尔值false相等 &lt; a &gt;标签中href=\\"javascript:;\\"表示什么都不执行 vue data中的数组lists[] 方法 push(元素) 添加元素到lists中 splice(start,delCount)，从start开始，删除数组delCount个元素 v-model 代替了标签的value属性，常见于 input 或表单等标签 总价格： totalPrice().toFixed(2) {{ }}里面可以调用方法，显示的是vue实例方法的返回值，toFixed(2)保留两位小数的意思 &lt;a href=\\"baidu.com\\" @click=\\"test\\" 点击a标签会先触发@click，再触发href @CrossOrigin解决跨域问题 加在Controller类上 @RequestBody的作用其实是将json格式的数据转为java对象，在axios发送post请求时，传过来的就是json数据，要在Controller的方法参数上加上@requestbody html中 创建表格 &lt;table border=\\"1\\" width=\\"100%\\"&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;工资&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;tr style=\\"text-align: center\\"&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;老王&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;12345&lt;/td&gt; &lt;td&gt;&lt;a href=\\"\\"&gt;删除&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=\\"\\"&gt;修改&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; easy code插件 直接从数据库生成一系列entity dao mapper service serviceimpl controller 生成后==在dao类上面添加@mapper注释（不是@service那一类的）==或者在启动类上添加MapperScan(\\"com.mrru.dao\\") @Mapper注解是Mybatis框架的注解，使用这个注解我们的接口就可以被Mybatis框架加载，然后动态代理生成实体类，然后就将实体类放到了spring容器中。 可以修改模板 中 dao类添加注释@Mapper，mapper.xml存放目录改为com/mrru/mapper , Controller类添加注释@CrossOrigin, 在axios中，==不能直接用this代表vue实例，==可以在外部声明一个var变量_this代表this，在axios中使用 _this代替即可 删除前提示框 if (window.confirm(\\"您确定要删除吗？\\") “./”：代表目前所在的目录 “../”：代表上一层目录 vue中 style标签加入scoped的话 会影响全局的样式，不加scoped只影响自己的样式，因此所有公共的样式加在App.Vue中 Vue-cli前端开发 src下 新建views目录，在里面构建组件。components里面放公共组件 vue router切换到同一个页面会报错 const VueRouterPush = VueRouter.prototype.push VueRouter.prototype.push = function push (to) { return VueRouterPush.call(this, to).catch(err =&gt; err) }","head":[["meta",{"property":"og:url","content":"http://gotuyi.top/tech/web_framework/vue.html"}],["meta",{"property":"og:site_name","content":"Mr.Ru"}],["meta",{"property":"og:title","content":"Vue"}],["meta",{"property":"og:description","content":"小知识 Vue标配 //定义局部组件对象 const login = { template:`&lt;div&gt; xxx + {{msg}}&lt;/div&gt;`, data(){ return{ msg:\\"局部组件msg\\", } }, methods:{}, computed:{}, created(){}, } //定义Vue实例 根组件对象 const app = new Vue({ el: \\"#app\\", \\t//定义vue实例的作用范围 data: {\\t\\t\\t//定义vue的数据、变量 msg:\\"Vue实例根组件msg\\" }, methods: {\\t\\t//定义一系列方法 \\t }, computed:{\\t\\t//定义计算属性 login,\\t\\t//注册局部组件 }, created(){}, \\t//定义生命周期函数 components:{},\\t//定义局部组件 }) js的加载是从代码上面一直到代码下面的，vue实例部分建议写在最下面！ js中 字符串 null 和 \\"\\" 和布尔值false相等 &lt; a &gt;标签中href=\\"javascript:;\\"表示什么都不执行 vue data中的数组lists[] 方法 push(元素) 添加元素到lists中 splice(start,delCount)，从start开始，删除数组delCount个元素 v-model 代替了标签的value属性，常见于 input 或表单等标签 总价格： totalPrice().toFixed(2) {{ }}里面可以调用方法，显示的是vue实例方法的返回值，toFixed(2)保留两位小数的意思 &lt;a href=\\"baidu.com\\" @click=\\"test\\" 点击a标签会先触发@click，再触发href @CrossOrigin解决跨域问题 加在Controller类上 @RequestBody的作用其实是将json格式的数据转为java对象，在axios发送post请求时，传过来的就是json数据，要在Controller的方法参数上加上@requestbody html中 创建表格 &lt;table border=\\"1\\" width=\\"100%\\"&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;工资&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;tr style=\\"text-align: center\\"&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;老王&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;12345&lt;/td&gt; &lt;td&gt;&lt;a href=\\"\\"&gt;删除&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=\\"\\"&gt;修改&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; easy code插件 直接从数据库生成一系列entity dao mapper service serviceimpl controller 生成后==在dao类上面添加@mapper注释（不是@service那一类的）==或者在启动类上添加MapperScan(\\"com.mrru.dao\\") @Mapper注解是Mybatis框架的注解，使用这个注解我们的接口就可以被Mybatis框架加载，然后动态代理生成实体类，然后就将实体类放到了spring容器中。 可以修改模板 中 dao类添加注释@Mapper，mapper.xml存放目录改为com/mrru/mapper , Controller类添加注释@CrossOrigin, 在axios中，==不能直接用this代表vue实例，==可以在外部声明一个var变量_this代表this，在axios中使用 _this代替即可 删除前提示框 if (window.confirm(\\"您确定要删除吗？\\") “./”：代表目前所在的目录 “../”：代表上一层目录 vue中 style标签加入scoped的话 会影响全局的样式，不加scoped只影响自己的样式，因此所有公共的样式加在App.Vue中 Vue-cli前端开发 src下 新建views目录，在里面构建组件。components里面放公共组件 vue router切换到同一个页面会报错 const VueRouterPush = VueRouter.prototype.push VueRouter.prototype.push = function push (to) { return VueRouterPush.call(this, to).catch(err =&gt; err) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-17T06:09:27.000Z"}],["meta",{"property":"article:published_time","content":"2024-01-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-17T06:09:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-17T06:09:27.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":1,"title":"小知识","slug":"小知识","link":"#小知识","children":[]},{"level":1,"title":"Vue2","slug":"vue2","link":"#vue2","children":[{"level":2,"title":"1. Vue 引言","slug":"_1-vue-引言","link":"#_1-vue-引言","children":[]},{"level":2,"title":"2. Vue入门","slug":"_2-vue入门","link":"#_2-vue入门","children":[{"level":3,"title":"2.1\\t下载Vuejs","slug":"_2-1下载vuejs","link":"#_2-1下载vuejs","children":[]},{"level":3,"title":"2.2 Vue第一个入门应用","slug":"_2-2-vue第一个入门应用","link":"#_2-2-vue第一个入门应用","children":[]}]},{"level":2,"title":"3. v-text和v-html","slug":"_3-v-text和v-html","link":"#_3-v-text和v-html","children":[{"level":3,"title":"3.1 v-text","slug":"_3-1-v-text","link":"#_3-1-v-text","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":3,"title":"3.2 v-html","slug":"_3-2-v-html","link":"#_3-2-v-html","children":[]}]},{"level":2,"title":"4.vue中事件绑定(v-on)","slug":"_4-vue中事件绑定-v-on","link":"#_4-vue中事件绑定-v-on","children":[{"level":3,"title":"4.1 绑定事件基本语法","slug":"_4-1-绑定事件基本语法","link":"#_4-1-绑定事件基本语法","children":[]},{"level":3,"title":"总结:","slug":"总结-2","link":"#总结-2","children":[]},{"level":3,"title":"4.2 Vue中事件的简化语法","slug":"_4-2-vue中事件的简化语法","link":"#_4-2-vue中事件的简化语法","children":[]},{"level":3,"title":"4.3 Vue方法的简化写法","slug":"_4-3-vue方法的简化写法","link":"#_4-3-vue方法的简化写法","children":[]},{"level":3,"title":"4.4 Vue事件参数传递","slug":"_4-4-vue事件参数传递","link":"#_4-4-vue事件参数传递","children":[]}]},{"level":2,"title":"5.v-show v-if v-bind","slug":"_5-v-show-v-if-v-bind","link":"#_5-v-show-v-if-v-bind","children":[{"level":3,"title":"5.1 v-show","slug":"_5-1-v-show","link":"#_5-1-v-show","children":[]},{"level":3,"title":"5.2 v-if","slug":"_5-2-v-if","link":"#_5-2-v-if","children":[]},{"level":3,"title":"5.3 v-bind","slug":"_5-3-v-bind","link":"#_5-3-v-bind","children":[]},{"level":3,"title":"5.4 v-bind 简化写法","slug":"_5-4-v-bind-简化写法","link":"#_5-4-v-bind-简化写法","children":[]}]},{"level":2,"title":"6.v-for的使用","slug":"_6-v-for的使用","link":"#_6-v-for的使用","children":[]},{"level":2,"title":"7 .v-model 双向绑定","slug":"_7-v-model-双向绑定","link":"#_7-v-model-双向绑定","children":[]},{"level":2,"title":"vue基本内容回顾","slug":"vue基本内容回顾","link":"#vue基本内容回顾","children":[]},{"level":2,"title":"vue实例的computed计算属性","slug":"vue实例的computed计算属性","link":"#vue实例的computed计算属性","children":[]},{"level":2,"title":"8. 事件修饰符","slug":"_8-事件修饰符","link":"#_8-事件修饰符","children":[{"level":3,"title":"8.1 stop事件修饰符","slug":"_8-1-stop事件修饰符","link":"#_8-1-stop事件修饰符","children":[]},{"level":3,"title":"8.2 prevent 事件修饰符","slug":"_8-2-prevent-事件修饰符","link":"#_8-2-prevent-事件修饰符","children":[]},{"level":3,"title":"8.3 self 事件修饰符","slug":"_8-3-self-事件修饰符","link":"#_8-3-self-事件修饰符","children":[]},{"level":3,"title":"8.4 once 事件修饰符","slug":"_8-4-once-事件修饰符","link":"#_8-4-once-事件修饰符","children":[]}]},{"level":2,"title":"9. 按键修饰符","slug":"_9-按键修饰符","link":"#_9-按键修饰符","children":[{"level":3,"title":"9.1 enter 回车键","slug":"_9-1-enter-回车键","link":"#_9-1-enter-回车键","children":[]},{"level":3,"title":"9.2 tab 键","slug":"_9-2-tab-键","link":"#_9-2-tab-键","children":[]}]},{"level":2,"title":"10. Axios 基本使用","slug":"_10-axios-基本使用","link":"#_10-axios-基本使用","children":[{"level":3,"title":"10.1 引言","slug":"_10-1-引言","link":"#_10-1-引言","children":[]},{"level":3,"title":"10.2 Axios 第一个程序","slug":"_10-2-axios-第一个程序","link":"#_10-2-axios-第一个程序","children":[]},{"level":3,"title":"10.3 axios中的拦截器 intercept","slug":"_10-3-axios中的拦截器-intercept","link":"#_10-3-axios中的拦截器-intercept","children":[]}]},{"level":2,"title":"11. Vue 生命周期","slug":"_11-vue-生命周期","link":"#_11-vue-生命周期","children":[]},{"level":2,"title":"ES6基本用法","slug":"es6基本用法","link":"#es6基本用法","children":[]},{"level":2,"title":"12. Vue中组件(component)","slug":"_12-vue中组件-component","link":"#_12-vue中组件-component","children":[{"level":3,"title":"12.1 组件作用","slug":"_12-1-组件作用","link":"#_12-1-组件作用","children":[]},{"level":3,"title":"12.2 组件使用","slug":"_12-2-组件使用","link":"#_12-2-组件使用","children":[]},{"level":3,"title":"12.2 组件中定义data、methods、computed、生命周期函数","slug":"_12-2-组件中定义data、methods、computed、生命周期函数","link":"#_12-2-组件中定义data、methods、computed、生命周期函数","children":[]},{"level":3,"title":"12.3 Prop机制的使用","slug":"_12-3-prop机制的使用","link":"#_12-3-prop机制的使用","children":[]},{"level":3,"title":"12.4 组件中定义数据和事件使用","slug":"_12-4-组件中定义数据和事件使用","link":"#_12-4-组件中定义数据和事件使用","children":[]},{"level":3,"title":"12.5 向子组件中传递事件并在子组件中调用该事件","slug":"_12-5-向子组件中传递事件并在子组件中调用该事件","link":"#_12-5-向子组件中传递事件并在子组件中调用该事件","children":[]},{"level":3,"title":"12.6 组件插槽slot","slug":"_12-6-组件插槽slot","link":"#_12-6-组件插槽slot","children":[]}]},{"level":2,"title":"13.Vue中路由 (Vue Router)","slug":"_13-vue中路由-vue-router","link":"#_13-vue中路由-vue-router","children":[]},{"level":2,"title":"14. Vue CLI 脚手架","slug":"_14-vue-cli-脚手架","link":"#_14-vue-cli-脚手架","children":[{"level":3,"title":"14.1 什么是CLI","slug":"_14-1-什么是cli","link":"#_14-1-什么是cli","children":[]},{"level":3,"title":"14.2 什么是Vue CLI  <====>  (maven 项目构建工具)","slug":"_14-2-什么是vue-cli-maven-项目构建工具","link":"#_14-2-什么是vue-cli-maven-项目构建工具","children":[]},{"level":3,"title":"14.3 Vue CLI优势","slug":"_14-3-vue-cli优势","link":"#_14-3-vue-cli优势","children":[]},{"level":3,"title":"14.4 Vue CLI安装","slug":"_14-4-vue-cli安装","link":"#_14-4-vue-cli安装","children":[]}]},{"level":2,"title":"15.在脚手架中使用axios","slug":"_15-在脚手架中使用axios","link":"#_15-在脚手架中使用axios","children":[{"level":3,"title":"15.1 安装axios","slug":"_15-1-安装axios","link":"#_15-1-安装axios","children":[]}]},{"level":2,"title":"16.Vue Cli脚手架项目部署","slug":"_16-vue-cli脚手架项目部署","link":"#_16-vue-cli脚手架项目部署","children":[]},{"level":2,"title":"17.VueX 状态管理","slug":"_17-vuex-状态管理","link":"#_17-vuex-状态管理","children":[{"level":3,"title":"17.1 简介&安装","slug":"_17-1-简介-安装","link":"#_17-1-简介-安装","children":[]},{"level":3,"title":"17.2 state属性","slug":"_17-2-state属性","link":"#_17-2-state属性","children":[]},{"level":3,"title":"17.3 mutations 属性","slug":"_17-3-mutations-属性","link":"#_17-3-mutations-属性","children":[]},{"level":3,"title":"17.4 getters 属性","slug":"_17-4-getters-属性","link":"#_17-4-getters-属性","children":[]}]}]},{"level":1,"title":"Vue3","slug":"vue3","link":"#vue3","children":[]}],"git":{"createdTime":1705470774000,"updatedTime":1705471767000,"contributors":[{"name":"ruyb","email":"ruyb@glodon.com","commits":2}]},"readingTime":{"minutes":41.18,"words":12354},"filePathRelative":"tech/web_framework/vue.md","localizedDate":"2024年1月17日","excerpt":"<h1> 小知识</h1>\\n<ul>\\n<li>\\n<p>Vue标配</p>\\n<ul>\\n<li>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//定义局部组件对象</span>\\n<span class=\\"token keyword\\">const</span> login <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">&lt;div&gt; xxx + {{msg}}&lt;/div&gt;</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">data</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">msg</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"局部组件msg\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">methods</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">computed</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">created</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//定义Vue实例 根组件对象</span>\\n<span class=\\"token keyword\\">const</span> app <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Vue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">el</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"#app\\"</span><span class=\\"token punctuation\\">,</span> \\t<span class=\\"token comment\\">//定义vue实例的作用范围</span>\\n    <span class=\\"token literal-property property\\">data</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\t\\t\\t<span class=\\"token comment\\">//定义vue的数据、变量</span>\\n        <span class=\\"token literal-property property\\">msg</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"Vue实例根组件msg\\"</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">methods</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\t\\t<span class=\\"token comment\\">//定义一系列方法</span>\\n \\t\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">computed</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span>\\t\\t<span class=\\"token comment\\">//定义计算属性</span>\\n        login<span class=\\"token punctuation\\">,</span>\\t\\t<span class=\\"token comment\\">//注册局部组件</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">created</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> \\t<span class=\\"token comment\\">//定义生命周期函数</span>\\n    <span class=\\"token literal-property property\\">components</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\t<span class=\\"token comment\\">//定义局部组件</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><mark>js的加载是从代码上面一直到代码下面的，vue实例部分建议写在最下面！</mark></p>\\n</li>\\n<li>\\n<p><mark>js中 字符串 null 和 \\"\\"  和布尔值false相等</mark></p>\\n</li>\\n<li>\\n<p>&lt; a &gt;标签中href=\\"javascript:;\\"表示什么都不执行</p>\\n</li>\\n<li>\\n<p>vue data中的数组lists[] 方法</p>\\n<ul>\\n<li>push(元素)  添加元素到lists中</li>\\n<li>splice(start,delCount)，从start开始，删除数组delCount个元素</li>\\n</ul>\\n</li>\\n<li>\\n<p>v-model   代替了标签的value属性，常见于 input 或表单等标签</p>\\n</li>\\n<li>\\n<p>总价格： totalPrice().toFixed(2)     {{ }}里面可以调用方法，显示的是vue实例方法的返回值，toFixed(2)保留两位小数的意思</p>\\n</li>\\n<li>\\n<p>&lt;a  href=\\"<a href=\\"http://baidu.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">baidu.com</a>\\" @click=\\"test\\"  点击a标签会先触发@click，再触发href</p>\\n</li>\\n<li>\\n<p>@CrossOrigin解决跨域问题  加在Controller类上</p>\\n</li>\\n<li>\\n<p><mark>@RequestBody的作用其实是将json格式的数据转为java对象</mark>，在axios发送post请求时，传过来的就是json数据，要在Controller的方法参数上加上@requestbody</p>\\n</li>\\n<li>\\n<p>html中 创建表格</p>\\n</li>\\n<li>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>table</span> <span class=\\"token attr-name\\">border</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>1<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">width</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>100%<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>tr</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>编号<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>姓名<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>年龄<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>工资<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>操作<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>th</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>tr</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>tr</span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">style</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value css language-css\\"><span class=\\"token property\\">text-align</span><span class=\\"token punctuation\\">:</span> center</span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>老王<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>15<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>12345<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>a</span> <span class=\\"token attr-name\\">href</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>删除<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>a</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token entity named-entity\\" title=\\"&nbsp;\\">&amp;nbsp;</span><span class=\\"token entity named-entity\\" title=\\"&nbsp;\\">&amp;nbsp;</span><span class=\\"token entity named-entity\\" title=\\"&nbsp;\\">&amp;nbsp;</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>a</span> <span class=\\"token attr-name\\">href</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>修改<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>a</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>tr</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>table</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>easy code插件 直接从数据库生成一系列entity dao mapper  service serviceimpl controller 生成后==在dao类上面添加@mapper注释（不是@service那一类的）==或者在启动类上添加MapperScan(\\"com.mrru.dao\\")</p>\\n<ul>\\n<li>@Mapper注解是<mark>Mybatis框架的注解</mark>，使用这个注解我们的接口就可以被Mybatis框架加载，然后<mark>动态代理生成实体类，然后就将实体类放到了spring容器中。</mark></li>\\n<li>可以修改模板 中 dao类添加注释@Mapper，mapper.xml存放目录改为com/mrru/mapper   ,  Controller类添加注释@CrossOrigin,</li>\\n</ul>\\n</li>\\n<li>\\n<p><mark>在axios中</mark>，==不能直接用this代表vue实例，==可以在外部声明一个var变量_this代表this，在axios中使用 _this代替即可</p>\\n</li>\\n<li 点击确定后要执行的东西=\\"\\">\\n<p>删除前提示框 if (window.confirm(\\"您确定要删除吗？\\")</p>\\n</li>\\n<li>\\n<p>“./”：代表目前所在的目录</p>\\n</li>\\n<li>\\n<p>“../”：代表上一层目录</p>\\n</li>\\n<li>\\n<p>vue中 style标签加入scoped的话 会影响全局的样式，不加scoped只影响自己的样式，因此所有公共的样式加在App.Vue中</p>\\n</li>\\n<li>\\n<p>Vue-cli前端开发</p>\\n</li>\\n<li>\\n<p>src下 新建views目录，在里面构建组件。components里面放公共组件</p>\\n</li>\\n<li>\\n<p>vue router切换到同一个页面会报错</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> VueRouterPush <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">VueRouter</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span>push\\n<span class=\\"token class-name\\">VueRouter</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">push</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">push</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">to</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">VueRouterPush</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> to<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span> <span class=\\"token operator\\">=&gt;</span> err<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","copyright":{},"autoDesc":true}');export{n as data};

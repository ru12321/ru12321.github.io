import{_ as p,W as i,X as l,Y as n,Z as s,$ as e,a0 as t,C as c}from"./framework-715d567f.js";const o={},u=n("h2",{id:"什么是微服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是微服务","aria-hidden":"true"},"#"),s(" 什么是微服务")],-1),r={href:"https://www.martinfowler.com/articles/microservices.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>In short, the microservice architectural(架构) style is an approach to developing a single application as <code>a suite(系列) of small services</code>, each <code>running in its own process(进程)</code> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <code>built around business(业务) capabilities(单元)</code> and <code>independently(独立) deployable(部署)</code> by fully automated deployment machinery. <code>There is a bare(基于) minimum of centralized(集中) management(管理) of these services</code>, which may be written in different programming languages and use different data storage technologies. -----[摘自官网]</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">-</span> a suite of small services                      				
<span class="token list punctuation">-</span> 一系列微小服务
<span class="token list punctuation">-</span> running in its own process                                    
<span class="token list punctuation">-</span> 运行在自己的进程里
<span class="token list punctuation">-</span> built around business capabilities                            
<span class="token list punctuation">-</span> 围绕自己的业务开发
<span class="token list punctuation">-</span> independently deployable                                      
<span class="token list punctuation">-</span> 独立部署
<span class="token list punctuation">-</span> bare minimum of centralized management of these services      
<span class="token list punctuation">-</span> 基于分布式管理
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>官方定义:<strong>微服务就是由一系列围绕自己业务开发的微小服务构成,他们独立部署运行在自己的进程里,基于分布式的管理</strong></li><li>通俗定义:<strong>微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。</strong></li></ul><hr><h2 id="为什么是微服务" tabindex="-1"><a class="header-anchor" href="#为什么是微服务" aria-hidden="true">#</a> 为什么是微服务?</h2><h3 id="单体应用" tabindex="-1"><a class="header-anchor" href="#单体应用" aria-hidden="true">#</a> 单体应用</h3><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515958.png" alt="image-20200708224716035" loading="lazy"></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.优点</span>
<span class="token list punctuation">-</span>	单一架构模式在项目初期很小的时候开发方便，测试方便，部署方便，运行良好。
<span class="token title important"><span class="token punctuation">#</span> 2.缺点</span>
<span class="token list punctuation">-</span> 应用随着时间的推进，加入的功能越来越多，最终会变得巨大，一个项目中很有可能数百万行的代码，互相之间繁琐的jar包。
<span class="token list punctuation">-</span> 久而久之，开发效率低，代码维护困难
<span class="token list punctuation">-</span> 还有一个如果想整体应用采用新的技术，新的框架或者语言，那是不可能的。
<span class="token list punctuation">-</span> 任意模块的漏洞或者错误都会影响这个应用，降低系统的可靠性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="微服务架构应用" tabindex="-1"><a class="header-anchor" href="#微服务架构应用" aria-hidden="true">#</a> 微服务架构应用</h3><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515962.png" alt="image-20200723155352063" loading="lazy"></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.优点</span>
<span class="token list punctuation">-</span> 将服务拆分成多个单一职责的小的服务，进行单独部署，服务之间通过网络进行通信
<span class="token list punctuation">-</span> 每个服务应该有自己单独的管理团队，高度自治
<span class="token list punctuation">-</span> 服务各自有自己单独的职责，服务之间松耦合，避免因一个模块的问题导致服务崩溃
<span class="token title important"><span class="token punctuation">#</span> 2.缺点</span>
<span class="token list punctuation">-</span> 开发人员要处理分布式系统的复杂性
<span class="token list punctuation">-</span> 多服务运维难度，随着服务的增加，运维的压力也在增大
<span class="token list punctuation">-</span> 服务治理 和 服务监控 关键
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="架构的演变" tabindex="-1"><a class="header-anchor" href="#架构的演变" aria-hidden="true">#</a> 架构的演变</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.架构的演变过程</span>
<span class="token list punctuation">-</span> [单一应用架构] <span class="token code-snippet code keyword">\`===&gt;\`</span> [垂直应用架构] <span class="token code-snippet code keyword">\`===&gt;\`</span> [分布式服务架构] <span class="token code-snippet code keyword">\`===&gt;\`</span> [流动计算架构]||[微服务架构] <span class="token code-snippet code keyword">\`===&gt;\`</span> [未知]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),k={href:"http://dubbo.apache.org/zh-cn/docs/user/preface/background.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515966.png" alt="image-20200318082336122" loading="lazy"></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1. All in One Application 	单一架构</span>
<span class="token list punctuation">-</span> 起初当网站流量很小时,将所有功能都写在一个应用里面,对整个应用进行部署,以减少部署节点和成本。对于这个架构简化增删改查的工作量的数据访问框架（ORM）是关键。

<span class="token title important"><span class="token punctuation">#</span> 2. Vertical Application 		垂直架构</span>
<span class="token list punctuation">-</span> 当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。

<span class="token title important"><span class="token punctuation">#</span> 3. Distributed Service    	分布式服务架构</span>
<span class="token list punctuation">-</span> 当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。

<span class="token title important"><span class="token punctuation">#</span> 4. Elastic Computing				流动计算架构即微服务架构</span>
<span class="token list punctuation">-</span> 当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>好的架构并不是设计出来的,一定是进化来的</strong></p><hr><h2 id="微服务的解决方案" tabindex="-1"><a class="header-anchor" href="#微服务的解决方案" aria-hidden="true">#</a> 微服务的解决方案</h2><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.Dubbo (阿里系)</span>
<span class="token list punctuation">-</span> 初出茅庐:2011年末，阿里巴巴在GitHub上开源了基于Java的分布式服务治理框架Dubbo，之后它成为了国内该类开源项目的佼佼者，许多开发者对其表示青睐。同时，先后有不少公司在实践中基于Dubbo进行分布式系统架构，目前在GitHub上，它的fork、star数均已破万。Dubbo致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案，使得应用可通过高性能RPC实现服务的输出、输入功能和Spring框架无缝集成。Dubbo包含远程通讯、集群容错和自动发现三个核心部分。

<span class="token list punctuation">-</span> 停止维护:从2012年10月23日Dubbo 2.5.3发布后，在Dubbo开源将满一周年之际，阿里基本停止了对Dubbo的主要升级。只在之后的2013年和2014年更新过2次对Dubbo 2.4的维护版本，然后停止了所有维护工作。Dubbo对Srping的支持也停留在了Spring 2.5.6版本上。

<span class="token list punctuation">-</span> 死而复生:多年漫长的等待，随着微服务的火热兴起，在国内外开发者对阿里不再升级维护Dubbo的吐槽声中，阿里终于开始重新对Dubbo的升级和维护工作。在2017年9月7日，阿里发布了Dubbo的2.5.4版本，距离上一个版本2.5.3发布已经接近快5年时间了。在随后的几个月中，阿里Dubbo开发团队以差不多每月一版本的速度开始快速升级迭代，修补了Dubbo老版本多年来存在的诸多bug，并对Spring等组件的支持进行了全面升级。

<span class="token list punctuation">-</span> 2018年1月8日，Dubbo创始人之一梁飞在Dubbo交流群里透露了Dubbo 3.0正在动工的消息。Dubbo 3.0内核与Dubbo 2.0完全不同，但兼容Dubbo 2.0。Dubbo 3.0将以Streaming为内核，不再是Dubbo 时代的RPC，但是RPC会在Dubbo 3.0中变成远程Streaming对接的一种可选形态。从Dubbo新版本的路线规划上可以看出，新版本的Dubbo在原有服务治理的功能基础上，将全面拥抱微服务解决方案。

<span class="token list punctuation">-</span> 结论:当前由于RPC协议、注册中心元数据不匹配等问题，在面临微服务基础框架选型时Dubbo与Spring Cloud是只能二选一，这也是为什么大家总是拿Dubbo和Spring Cloud做对比的原因之一。Dubbo之后会积极寻求适配到Spring Cloud生态，比如作为Spring Cloud的二进制通信方案来发挥Dubbo的性能优势，或者Dubbo通过模块化以及对http的支持适配到Spring Cloud。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515979.png" alt="image-20200724143456045" loading="lazy"></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> Spring Cloud:</span>
<span class="token list punctuation">-</span> Spring Cloud NetFlix  
	基于美国Netflix公司开源的组件进行封装,提供了微服务一栈式的解决方案。

<span class="token list punctuation">-</span> Spring Cloud alibaba
	在Spring cloud netflix基础上封装了阿里巴巴的微服务解决方案。
	
<span class="token list punctuation">-</span> Spring Cloud Spring
	目前spring官方趋势正在逐渐吸收Netflix组件的精华,并在此基础进行二次封装优化,打造spring专有的解决方案
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是springcloud" tabindex="-1"><a class="header-anchor" href="#什么是springcloud" aria-hidden="true">#</a> 什么是SpringCloud</h2><h3 id="官方定义" tabindex="-1"><a class="header-anchor" href="#官方定义" aria-hidden="true">#</a> 官方定义</h3>`,10),m={href:"https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/",target:"_blank",rel:"noopener noreferrer"},g=t(`<p><strong>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems</strong> (e.g. <code>configuration management</code>,<code> service discovery</code>, <code>circuit breakers, intelligent routing, micro-proxy, control bus</code>). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. -------[摘自官网]</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.翻译</span>
<span class="token list punctuation">-</span> springcloud为开发人员提供了在分布式系统中快速构建一些通用模式的工具（例如配置管理、服务发现、断路器、智能路由、微代理、控制总线）。分布式系统的协调导致了锅炉板模式，使用springcloud开发人员可以快速地建立实现这些模式的服务和应用程序。

<span class="token title important"><span class="token punctuation">#</span> 2.通俗理解</span>
<span class="token list punctuation">-</span> springcloud是一个涵盖多个子项目的开发工具集,集合了众多的开源框架,他利用了Spring Boot开发的便利性实现了很多功能,如服务注册,服务注册发现,负载均衡等.SpringCloud在整合过程中主要是针对Netflix(耐非)开源组件的封装.SpringCloud的出现真正的简化了分布式架构的开发。NetFlix 是美国的一个在线视频网站,微服务业的翘楚,他是公认的大规模生产级微服务的杰出实践者,NetFlix的开源组件已经在他大规模分布式微服务环境中经过多年的生产实战验证,因此Spring Cloud中很多组件都是基于NetFlix

spring netflix 维护  闭源
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心架构及其组件" tabindex="-1"><a class="header-anchor" href="#核心架构及其组件" aria-hidden="true">#</a> 核心架构及其组件</h3>`,3),b={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.核心组件说明</span>
<span class="token list punctuation">-</span> eureka、consul、nacos  	         服务注册中心组件
<span class="token list punctuation">-</span> rabbion &amp; openfeign  			  服务负载均衡 和 服务调用组件
<span class="token list punctuation">-</span> hystrix &amp; hystrix dashboard     服务断路器  和  服务监控组件
<span class="token list punctuation">-</span> zuul、gateway 					 服务网关组件
<span class="token list punctuation">-</span> config 						  统一配置中心组件
<span class="token list punctuation">-</span> bus                             消息总线组件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>各组件架构图</mark></p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201515983.png" alt="image-20200724161314786" loading="lazy"></p><h2 id="注册中心" tabindex="-1"><a class="header-anchor" href="#注册中心" aria-hidden="true">#</a> 注册中心</h2><p>所谓服务注册中心就是在整个的微服务架构中单独提出一个服务，这个服务<strong>不完成系统的任何的业务功能</strong>，仅仅用来完成对整个微服务系统的<strong>服务注册</strong>和<strong>服务发现</strong>，以及对服务**健康状态的监控（心跳检查）**和管理功能。</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.CAP定理</span>
<span class="token list punctuation">-</span> CAP定理：CAP定理又称CAP原则，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。
	\`一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）
	\`可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）
	\`分区容忍性（P），就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）
	
<span class="token title important"><span class="token punctuation">#</span> 2.Eureka特点</span>
<span class="token list punctuation">-</span> Eureka中没有使用任何的数据强一致性算法保证不同集群间的Server的数据一致，仅通过数据拷贝的方式争取注册中心数据的最终一致性，虽然放弃数据强一致性但是换来了Server的可用性，降低了注册的代价，提高了集群运行的健壮性。

<span class="token title important"><span class="token punctuation">#</span> 3.Consul特点</span>
<span class="token list punctuation">-</span> 基于Raft算法，Consul提供强一致性的注册中心服务，但是由于Leader节点承担了所有的处理工作，势必加大了注册和发现的代价，降低了服务的可用性。通过Gossip协议，Consul可以很好地监控Consul集群的运行，同时可以方便通知各类事件，如Leader选择发生、Server地址变更等。

<span class="token title important"><span class="token punctuation">#</span> 4.zookeeper特点</span>
<span class="token list punctuation">-</span> 基于Zab协议，Zookeeper可以用于构建具备数据强一致性的服务注册与发现中心，而与此相对地牺牲了服务的可用性和提高了注册需要的时间。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201601873.png" alt="image-20230320160102818" loading="lazy"></p><h2 id="pom-xml" tabindex="-1"><a class="header-anchor" href="#pom-xml" aria-hidden="true">#</a> pom.xml</h2><p>parent</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!--自定义properties属性--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--定义springcloud使用版本号  父项目管理版本号--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud-version</span><span class="token punctuation">&gt;</span></span>2021.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud-version</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--定义springboot   使用版本号  父项目管理版本号--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.boot-version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.boot-version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--仅仅是声明版本，还没有引入，子项目需要引入依赖--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--springcloud--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.cloud-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!--pom表示导入的是父模块--&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--springboot--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.boot-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--lombok--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eureka-注册中心" tabindex="-1"><a class="header-anchor" href="#eureka-注册中心" aria-hidden="true">#</a> Eureka 注册中心</h2><h3 id="用法-server端" tabindex="-1"><a class="header-anchor" href="#用法-server端" aria-hidden="true">#</a> 用法-Server端</h3><h4 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入 eureka server--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token comment">#Eureka server 端口号</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#关闭eureka client立即注册</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#让当前应用仅仅是服务注册中心</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment"># 指定服务注册中心地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka

  <span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token comment"># enable-self-preservation: false #关闭自我保护</span>
    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment">#每3秒扫描一次</span>
<span class="token comment"># 指定服务名称，</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eurekaserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaServerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自我保护机制" tabindex="-1"><a class="header-anchor" href="#自我保护机制" aria-hidden="true">#</a> 自我保护机制</h4><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201525482.png" alt="image-20230320152556436" loading="lazy"></p><p><strong>周期是15 分钟，server要判断15分钟之内是否低于 85%</strong></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.自我保护机制</span>
<span class="token list punctuation">-</span> 官网地址: https://github.com/Netflix/eureka/wiki/Server-Self-Preservation-Mode
<span class="token list punctuation">-</span> 默认情况下，如果Eureka Server在一定时间内（默认90秒）没有接收到某个微服务实例的心跳，Eureka Server将会移除该实例。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，而微服务本身是正常运行的，此时不应该移除这个微服务，所以引入了自我保护机制。Eureka Server在运行期间会去统计心跳成功比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期。这种设计的哲学原理就是&quot;宁可信其有不可信其无!&quot;。自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法-client端" tabindex="-1"><a class="header-anchor" href="#用法-client端" aria-hidden="true">#</a> 用法-Client端</h3><h4 id="依赖-1" tabindex="-1"><a class="header-anchor" href="#依赖-1" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入eureka client--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1" aria-hidden="true">#</a> 配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8989</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span><span class="token number">8991</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment">#指定注册中心地址</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">#用来修改eureka server默认接受心跳的最大时间（超过这个时间，移除改客户端） 默认是90s</span>
    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">#指定客户端多久向eureka server发送一次心跳 默认是30s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解-1" tabindex="-1"><a class="header-anchor" href="#注解-1" aria-hidden="true">#</a> 注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Eurekaclient8888Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Eurekaclient8888Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="consul-注册中心" tabindex="-1"><a class="header-anchor" href="#consul-注册中心" aria-hidden="true">#</a> Consul 注册中心</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> consul 简介</span>
<span class="token list punctuation">-</span> https://www.consul.io
<span class="token list punctuation">-</span> consul是一个可以提供服务发现，健康检查，多数据中心，Key/Value存储等功能的分布式服务框架，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，使用起来也较为简单。Consul用Golang实现，因此具有天然可移植性(支持Linux、Windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法-server端-1" tabindex="-1"><a class="header-anchor" href="#用法-server端-1" aria-hidden="true">#</a> 用法-Server端</h3><p>使用Consul可以直接安装启动，<strong>不需要手动开发这个注册中心</strong>，这一点区别于Eureka</p><p>consul默认服务端口是<strong>8500</strong></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.下载consul  windows-amd64</span>
<span class="token list punctuation">-</span> https://www.consul.io/downloads

<span class="token title important"><span class="token punctuation">#</span> 2.安装consul </span>
<span class="token list punctuation">-</span> 1.解压之后发现consul只有一个脚本文件 consul.exe （不是双击执行）

<span class="token title important"><span class="token punctuation">#</span> 3.根据解压缩目录配置环境变量</span>
<span class="token list punctuation">-</span> 根据安装目录进行环境变量配置

<span class="token title important"><span class="token punctuation">#</span> 4.查看consul环境变量是否配置成功,执行命令出现如下信息代表成功</span>
<span class="token list punctuation">-</span> consul -v

<span class="token title important"><span class="token punctuation">#</span> 5.启动consul服务</span>
<span class="token list punctuation">-</span> consul agent -dev

<span class="token title important"><span class="token punctuation">#</span> 6.访问consul的web服务端口</span>
<span class="token list punctuation">-</span> http://localhost:8500
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法-client端-1" tabindex="-1"><a class="header-anchor" href="#用法-client端-1" aria-hidden="true">#</a> 用法-Client端</h3><h4 id="依赖-2" tabindex="-1"><a class="header-anchor" href="#依赖-2" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token comment">&lt;!--引入consul依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 
- 开启consul健康监控
- 默认情况consul监控健康是开启的,但是必须依赖健康监控依赖才能正确监控健康状态所以直接启动会显示错误,引入健康监控依赖之后服务正常
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-2" tabindex="-1"><a class="header-anchor" href="#配置-2" aria-hidden="true">#</a> 配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost <span class="token comment">#注册consul服务的主机</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span> <span class="token comment">#注册consul服务的端口号</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> heihei <span class="token comment">#指定注册的服务名称 默认就是应用名</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> consulClient
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解-2" tabindex="-1"><a class="header-anchor" href="#注解-2" aria-hidden="true">#</a> 注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CousulClientApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CousulClientApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ribbon-负载均衡" tabindex="-1"><a class="header-anchor" href="#ribbon-负载均衡" aria-hidden="true">#</a> Ribbon 负载均衡</h2>`,44),y={href:"http://c.biancheng.net/springcloud/ribbon.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>在springcloud中服务间调用方式主要是使用 <code>http restful</code>方式进行服务间调用；</p><p>目前主流的负载方案分为以下两种：</p><ul><li><p><strong>集中式</strong>负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如Nginx）</p></li><li><p><strong>客户端</strong>根据自己的请求情况做负载均衡，Ribbon 就属于客户端自己做负载均衡</p></li></ul><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 0.说明</span>
<span class="token list punctuation">-</span> 官方网址: https://github.com/Netflix/ribbon
<span class="token list punctuation">-</span> Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，它基于Netflix Ribbon实现。通过Spring Cloud的封装，可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡的服务调用。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过Load Balancer获取到服务提供的所有机器实例，Ribbon会自动基于某种规则(轮询，随机)去调用这些服务</p><h3 id="依赖-3" tabindex="-1"><a class="header-anchor" href="#依赖-3" aria-hidden="true">#</a> 依赖</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.项目中引入依赖</span>
<span class="token list punctuation">-</span> 说明: 
	1.如果使用的是eureka client、consul client、Nacos无须引入依赖,因为在eureka,consul中默认集成了ribbon组件
	2.如果使用的client中没有ribbon依赖需要显式引入如下依赖
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入ribbon依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-3" tabindex="-1"><a class="header-anchor" href="#配置-3" aria-hidden="true">#</a> 配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 1.修改服务默认随机策略</span>
<span class="token punctuation">-</span> 服务id.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
\`下面的product为服务的唯一标识\`
	
<span class="token comment"># 使用配置文件的方式修改ribbon默认的负载均衡算法      </span>
<span class="token key atrule">product</span><span class="token punctuation">:</span> 
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.整合restTemplate + ribbon</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//2.调用服务位置注入RestTemplate</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

<span class="token comment">//3.调用</span>
<span class="token class-name">String</span> forObject <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://服务ID/hello/hello?name=&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="负载均衡策略" tabindex="-1"><a class="header-anchor" href="#负载均衡策略" aria-hidden="true">#</a> 负载均衡策略</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 1.ribbon负载均衡算法</span>
<span class="token list punctuation">-</span> RoundRobinRule         		轮询策略	按顺序循环选择 Server
<span class="token list punctuation">-</span> RandomRule             		随机策略	随机选择 Server
<span class="token list punctuation">-</span> AvailabilityFilteringRule 可用过滤策略
 	\`会先过滤由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问
<span class="token list punctuation">-</span> WeightedResponseTimeRule  响应时间加权策略   
	\`根据平均响应的时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高，刚启动时如果统计信息不足，则使用RoundRobinRule策略，等统计信息足够会切换到
<span class="token list punctuation">-</span> RetryRule                 重试策略          
	\`先按照RoundRobinRule的策略获取服务，如果获取失败则在制定时间内进行重试，获取可用的服务。
<span class="token list punctuation">-</span> BestAviableRule           最低并发策略     
	\`会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="openfeign-服务调用" tabindex="-1"><a class="header-anchor" href="#openfeign-服务调用" aria-hidden="true">#</a> OpenFeign 服务调用</h2><h3 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2" aria-hidden="true">#</a> 概念</h3><p>OpenFeign 全称 Spring Cloud OpenFeign，它是 Spring 官方推出的一种<strong>声明式服务调用与负载均衡组件</strong>，它的出现就是为了替代进入停更维护状态的 Feign</p><p>Feign 对<strong>Ribbon进行了集成</strong>，它在 <strong>RestTemplate 的基础上做了进一步的封装</strong>。通过 Feign，我们只需要声明一个接口并通过注解进行简单的配置（类似于 Dao 接口上面的 Mapper 注解一样）即可实现对 HTTP 接口的绑定。</p><p>通过 Feign，我们可以像调用本地方法一样来调用远程服务，而完全感觉不到这是在进行远程调用。</p><h4 id="依赖-4" tabindex="-1"><a class="header-anchor" href="#依赖-4" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--Open Feign依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-4" tabindex="-1"><a class="header-anchor" href="#配置-4" aria-hidden="true">#</a> 配置</h3><p>超时控制和日志级别</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 0.说明</span>
<span class="token list punctuation">-</span> 往往在服务调用时我们需要详细展示feign的日志,默认feign在调用是并不是最详细日志输出,因此在调试程序时应该开启feign的详细日志展示。feign对日志的处理非常灵活可为每个feign客户端指定日志记录策略，每个客户端都会创建一个logger默认情况下logger的名称是feign的全限定名需要注意的是，feign日志的打印只会DEBUG级别做出响应。
<span class="token list punctuation">-</span> 我们可以为feign客户端配置各自的logger.lever对象，告诉feign记录那些日志logger.lever有以下的几种值
	\`NONE  不记录任何日志
	\`BASIC 仅仅记录请求方法，url，响应状态代码及执行时间
	\`HEADERS 记录Basic级别的基础上，记录请求和响应的header
	\`FULL 记录请求和响应的header，body和元数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8991</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> OPENFEIGN

<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.mrru.feignclients</span><span class="token punctuation">:</span> debug  <span class="token comment">#指定feign调用客户端对象所在包,必须是debug级别</span>

<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token comment"># PRODUCTS 也可以替换default为指定服务名称</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>  <span class="token comment">#建立连接所用的时间，适用于网络状况正常的情况下，两端两端连接所用的时间</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">6000</span>      <span class="token comment">#建立连接后，服务器读取到可用资源的时间</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解-3" tabindex="-1"><a class="header-anchor" href="#注解-3" aria-hidden="true">#</a> 注解</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Users9999Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Users9999Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1" aria-hidden="true">#</a> 用法</h3><p>在编写服务绑定接口时，需要注意以下 2 点：</p>`,30),x=n("strong",null,"服务提供者的服务名",-1),w={href:"http://spring.application.name",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,[s("接口中定义的每个方法都与"),n("strong",null,"服务提供者中 Controller 定义的服务方法"),s("对应。")],-1),C=t(`<p>Spring Cloud 应用在启动时，<code>OpenFeign 会扫描标有 @FeignClient 注解的接口生成代理，并注人到 Spring 容器中</code>。</p><hr><ol><li>创建一个客户端调用接口（前提是PRODUCTS有相应的controller接口）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//value属性用来指定:服务提供者的服务名</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;PRODUCTS&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/product/findAll&quot;</span><span class="token punctuation">)</span> <span class="token comment">//书写服务调用路径</span>
    <span class="token class-name">String</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/product/save&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传递字符串</span>
    
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/product/saveProduct&quot;</span><span class="token punctuation">)</span> 
  	<span class="token class-name">String</span> <span class="token function">saveProduct</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Product</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传递对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用feignClient客户端对象调用服务</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//注入客户端对象</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ProductClient</span> productClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/findAllFeignClient&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findAllFeignClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;通过使用OpenFeign组件调用商品服务...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> msg <span class="token operator">=</span> productClient<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hystrix-服务熔断、服务降级" tabindex="-1"><a class="header-anchor" href="#hystrix-服务熔断、服务降级" aria-hidden="true">#</a> Hystrix 服务熔断、服务降级</h2>`,7),q={href:"http://c.biancheng.net/springcloud/hystrix.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<h3 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3" aria-hidden="true">#</a> 概念</h3><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统中，许多依赖不可避免的会调用失败，超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障(服务雪崩现象)，提高分布式系统的弹性。</p><p>Spring Cloud Hystrix 是基于 Netflix 公司的开源组件 Hystrix 实现的，它提供了熔断器功能，能够有效地阻止分布式微服务系统中出现联动故障，以提高微服务系统的弹性。Spring Cloud Hystrix 具有服务降级、服务熔断、线程隔离、请求缓存、请求合并以及实时故障监控等强大功能。</p><blockquote><p>Hystrix [hɪst&#39;rɪks]，中文含义是豪猪，豪猪的背上长满了棘刺，使它拥有了强大的自我保护能力。而 Spring Cloud Hystrix 作为一个服务容错与保护组件，也可以让服务拥有自我保护的能力，因此也有人将其戏称为“豪猪哥”。</p></blockquote><p>在微服务系统中，Hystrix 能够帮助我们实现以下目标：</p><ul><li><strong>保护线程资源</strong>：防止单个服务的故障耗尽系统中的所有线程资源。</li><li><strong>快速失败机制</strong>：当某个服务发生了故障，不让服务调用方一直等待，而是直接返回请求失败。</li><li><strong>提供降级（FallBack）方案</strong>：在请求失败后，提供一个设计好的降级方案，通常是一个兜底方法，当请求失败后即调用该方法。</li><li><strong>防止故障扩散</strong>：使用熔断机制，防止故障扩散到其他服务。</li><li><strong>监控功能</strong>：提供熔断器故障监控组件 Hystrix Dashboard，随时监控熔断器的状态。</li></ul><h3 id="服务雪崩-服务级联故障" tabindex="-1"><a class="header-anchor" href="#服务雪崩-服务级联故障" aria-hidden="true">#</a> 服务雪崩-服务级联故障</h3><p>在微服务之间进行服务调用是由于某一个服务故障，导致级联服务故障的现象，称为雪崩效应。雪崩效应描述的是提供方不可用，导致消费方不可用并将不可用逐渐放大的过程。</p><p>如图存在如下调用链路:</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201731187.png" alt="image-20230320173125136" loading="lazy"></p><p>而此时，Service A的流量波动很大，流量经常会突然性增加！那么在这种情况下，就算Service A能扛得住请求，Service B和Service C未必能扛得住这突发的请求。此时，如果Service C因为抗不住请求，变得不可用。那么Service B的请求也会阻塞，慢慢耗尽Service B的线程资源，Service B就会变得不可用。紧接着，Service A也会不可用，这一过程如下图所示</p><p><strong>每个请求都是tomcat启动的线程，当服务器C不断有请求线程过来却没有被释放，线程资源占用越来越多，服务就会不可用</strong></p><h3 id="服务熔断-自我熔断" tabindex="-1"><a class="header-anchor" href="#服务熔断-自我熔断" aria-hidden="true">#</a> 服务熔断-自我熔断</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 服务熔断</span>
<span class="token list punctuation">-</span> “熔断器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器(hystrix)的故障监控，某个异常条件被触发，直接熔断整个服务。向调用方法返回一个符合预期的、可处理的备选响应(FallBack),而不是长时间的等待或者抛出调用方法无法处理的异常，就保证了服务调用方的线程不会被长时间占用，避免故障在分布式系统中蔓延，乃至雪崩。如果目标服务情况好转则恢复调用。服务熔断是解决服务雪崩的重要手段。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>熔断机制：每个微服务都<strong>引入自己服务的监控器</strong>Hystrix，<strong>监控到异常后会返回一个fallBack</strong></p><h4 id="依赖-5" tabindex="-1"><a class="header-anchor" href="#依赖-5" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入hystrix--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解-4" tabindex="-1"><a class="header-anchor" href="#注解-4" aria-hidden="true">#</a> 注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableHystrix</span>  <span class="token comment">//用来开启断路器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Products9998Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Products9998Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用法-2" tabindex="-1"><a class="header-anchor" href="#用法-2" aria-hidden="true">#</a> 用法</h4><p>使用HystrixCommand注解实现断路</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;demoFallBack&quot;</span><span class="token punctuation">)</span> <span class="token comment">//一旦该方法失败并抛出了异常信息后，会自动调用  @HystrixCommand 注解标注的 fallbackMethod 指定的方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;服务失效了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hystrix demo ok&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//方法命名有要求,除了名字其它都一样</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demoFallBack</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;服务熔断了~&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="断路器打开条件" tabindex="-1"><a class="header-anchor" href="#断路器打开条件" aria-hidden="true">#</a> 断路器打开条件</h4><p>当满足Hystrix的条件后，熔断器会打开（请求走到熔断器条件），但是一会后熔断器又会关闭（请求恢复正常），说明它状态的打开关闭有条件：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 原文翻译之后,总结打开关闭的条件:</span>
<span class="token list punctuation">-</span> 1、  当满足一定的阀值的时候（默认10秒内超过20个请求次数）
<span class="token list punctuation">-</span> 2、  当失败率达到一定的时候（默认10秒内超过50%的请求失败）
<span class="token list punctuation">-</span> 3、  到达以上阀值，断路器将会开启
<span class="token list punctuation">-</span> 4、  当开启的时候，该服务的所有请求都不会进行转发
<span class="token list punctuation">-</span> 5、  一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5。

<span class="token title important"><span class="token punctuation">#</span> 面试重点问题: 断路器流程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201802972.png" alt="image-20230320180230891" loading="lazy"></p><h3 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级" aria-hidden="true">#</a> 服务降级</h3>`,27),R={href:"https://www.jianshu.com/p/fcb8b26b12a5",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>服务降级：在服务器压力陡增的情况下，利用有限资源，根据当前业务情况，关闭某些服务接口或者页面，以此释放服务器资源以保证核心任务的正常运行。</p><p>降级：服务分优先级，牺牲非核心服务（不可用），导致整体的服务下降，保证核心服务稳定；</p><p>流量控制本质上是减小访问量，而服务处理能力不变；而服务降级本质上是<strong>降低了部分服务的处理能力，增强另一部分服务处理能力，而访问量不变</strong></p><h4 id="配置-5" tabindex="-1"><a class="header-anchor" href="#配置-5" aria-hidden="true">#</a> 配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 开启降级feign.hystrix</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解-5" tabindex="-1"><a class="header-anchor" href="#注解-5" aria-hidden="true">#</a> 注解</h4><p>在openfeign客户端中加如Hystrix</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;PRODUCTS&quot;</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">ProductFallBack</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/product/hystrix&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">testHystrix</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductFallBack</span> <span class="token keyword">implements</span> <span class="token class-name">ProductClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHystrix</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;我是客户端的Hystrix服务实现!!!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异同点总结" tabindex="-1"><a class="header-anchor" href="#异同点总结" aria-hidden="true">#</a> 异同点总结</h3><ul><li><p>服务熔断一般是<strong>某个服务</strong>（下游服务）故障引起，而服务降级一般是从<strong>整体负荷</strong>考虑</p></li><li><p>熔断其实是一个<strong>框架级</strong>的处理，每个微服务都需要（无层级之分），而降级一般需要<strong>对业务有层级之分</strong>（比如降级一般是从最外围服务开始）</p></li></ul><h2 id="gateway-服务网关" tabindex="-1"><a class="header-anchor" href="#gateway-服务网关" aria-hidden="true">#</a> Gateway 服务网关</h2><h3 id="概念-4" tabindex="-1"><a class="header-anchor" href="#概念-4" aria-hidden="true">#</a> 概念</h3><p>网关统一服务入口，对微服务的一切请求进行路由转发，并提供横切关注点</p><p>客户端向Spring Cloud Gateway发送请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。此处理程序通过特定于请求的过滤器链运行请求。用虚线分隔过滤器的原因是<strong>过滤器可以在发送代理请求之前和之后运行逻辑</strong>。执行所有预过滤逻辑。然后发出代理请求。发出代理请求后，运行post filter逻辑</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303201846934.png" alt="spring_cloud_gateway_diagram" loading="lazy"></p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><ol><li>统一所有微服务的全局入口</li><li><strong>路由转发</strong>（接收一切外界请求，转发到后端的微服务上去） + <strong>过滤器</strong>（权限控制，流量监控，限流）</li><li>实现负载均衡</li></ol><h3 id="用法-3" tabindex="-1"><a class="header-anchor" href="#用法-3" aria-hidden="true">#</a> 用法</h3><h4 id="依赖-6" tabindex="-1"><a class="header-anchor" href="#依赖-6" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入gateway网关依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--引入springboot 网关中不能使用spring mvc的模型--&gt;</span>
<span class="token comment">&lt;!--&lt;dependency&gt;--&gt;</span>
<span class="token comment">&lt;!--    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span>
<span class="token comment">&lt;!--    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span>
<span class="token comment">&lt;!--&lt;/dependency&gt;--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-6" tabindex="-1"><a class="header-anchor" href="#配置-6" aria-hidden="true">#</a> 配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7979</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> GATEWAY
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> category_router <span class="token comment"># 路由对象唯一标识，随便写</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CATEGORY  <span class="token comment"># 负载均衡处理</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>         <span class="token comment"># 断言，用来配置路由规则</span>
            <span class="token punctuation">-</span> Path=/category/*

        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> product_router 
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//PRODUCT
          <span class="token comment"># predicate使用</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        
            <span class="token punctuation">-</span> Path=/product/*
            <span class="token punctuation">-</span> After=2023<span class="token punctuation">-</span>03<span class="token punctuation">-</span>13T14<span class="token punctuation">:</span>07<span class="token punctuation">:</span>53.714+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> AddRequestHeader=User<span class="token punctuation">-</span>Name<span class="token punctuation">,</span> ruyb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见路由predicate-断言、验证" tabindex="-1"><a class="header-anchor" href="#常见路由predicate-断言、验证" aria-hidden="true">#</a> 常见路由predicate （断言、验证）</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">-</span> After=2020-07-21T11:33:33.993+08:00[Asia/Shanghai]  			\`指定日期之后的请求进行路由
<span class="token list punctuation">-</span> Before=2020-07-21T11:33:33.993+08:00[Asia/Shanghai]       \`指定日期之前的请求进行路由
<span class="token list punctuation">-</span> Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]
<span class="token list punctuation">-</span> Cookie=username,chenyn		\`基于指定cookie的请求进行路由
<span class="token list punctuation">-</span> Cookie=username,[A-Za-z0-9]+   \`基于指定cookie的请求进行路由	
	\`curl http://localhost:8989/user/findAll --cookie &quot;username=zhangsna&quot;
<span class="token list punctuation">-</span> Header=X-Request-Id, \\d+		\`\`基于请求头中的指定属性的正则匹配路由(这里全是整数)
	\`curl http://localhost:8989/user/findAll -H &quot;X-Request-Id:11&quot;
<span class="token list punctuation">-</span> Method=GET,POST			\`\`基于指定的请求方式请求进行路由
<span class="token list punctuation">-</span> 官方更多: https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#the-cookie-route-predicate-factory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见过滤器" tabindex="-1"><a class="header-anchor" href="#常见过滤器" aria-hidden="true">#</a> 常见过滤器</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">-</span> AddRequestHeader=X-Request-red, blue					<span class="token code-snippet code keyword">\`增加请求头的filter\`</span>
<span class="token list punctuation">-</span> AddRequestParameter=red, blue							<span class="token code-snippet code keyword">\`增加请求参数的filterr\`</span>
<span class="token list punctuation">-</span> AddResponseHeader=X-Response-Red, AAA					<span class="token code-snippet code keyword">\`增加响应头filter\`</span>
<span class="token list punctuation">-</span> PrefixPath=/emp										<span class="token code-snippet code keyword">\`增加前缀的filter\`</span>
<span class="token list punctuation">-</span> StripPrefix=2											<span class="token code-snippet code keyword">\`去掉前缀的filter 去掉2级的\`</span> /xx/ss 去掉ss
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="config-配置中心" tabindex="-1"><a class="header-anchor" href="#config-配置中心" aria-hidden="true">#</a> Config 配置中心</h2>`,29),A={href:"http://c.biancheng.net/springcloud/config.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<h3 id="概念-5" tabindex="-1"><a class="header-anchor" href="#概念-5" aria-hidden="true">#</a> 概念</h3><p>微服务系统中服务的统一管理组件</p><p>类似Eureka一样，Server端集中管理配置文件，Client端拉取使用配置文件</p><ul><li><p>服务注册中心：统一管理微服务信息</p></li><li><p>统一配置中心：统一管理微服务的配置信息</p></li></ul><p>Spring Cloud Config 包含以下两个部分：</p><ul><li>Config Server：也被称为分布式配置中心，它是一个独立运行的微服务应用，用来<strong>连接配置仓库并为客户端提供获取配置信息</strong>、加密信息和解密信息的访问<strong>接口</strong>。</li><li>Config Client：指的是微服务架构中的各个微服务，它们通过 Config Server 对配置进行管理，并<strong>从 Config Sever 中获取和加载配置信息</strong></li></ul><hr><p>微服务启动时会从Server端（即配置中心）拉取配置文件，为了提高config的高可用，当Server端集群部署时，如何实现一个Server节点的修改同步到其它Server节点呢？所以Spring和奈飞设计Config组件作为临时的配置文件中转，而不是作为终端提供者。</p><p>当配置文件经常修改，就需要去进行版本管理，自然想到Git，借助其git仓库管理配置文件。那么如何连接git仓库和每一个微服务呢？config配置中心就可以通过uri拉取git仓库到本地（即自身Server端），其它微服务作为Config Client端进行访问</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303151018819.png" alt="image-20230315101818765" loading="lazy"></p><p><strong>当git仓库配置发生变化，Config Server检测到后，就从git仓库同步拉取最新配置文件并缓存一份到本地</strong>（安全考虑git仓库可能宕机，所以缓存一份）；其它微服务重新启动时读取到的就是最新的配置文件了</p><h3 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h3><p>将配置统一管理，在日后大规模集群部署服务应用时相同的服务配置一致，日后只需要统一修改配置全部同步，不需要一个一个服务手动维护</p><h3 id="git仓库" tabindex="-1"><a class="header-anchor" href="#git仓库" aria-hidden="true">#</a> git仓库</h3><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303151514206.png" alt="image-20230315151427158" loading="lazy"></p><h3 id="用法-server端-2" tabindex="-1"><a class="header-anchor" href="#用法-server端-2" aria-hidden="true">#</a> 用法-Server端</h3><h4 id="依赖-7" tabindex="-1"><a class="header-anchor" href="#依赖-7" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入统一配置中心--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-7" tabindex="-1"><a class="header-anchor" href="#配置-7" aria-hidden="true">#</a> 配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> CONFIG
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token comment"># server对应的git仓库地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/ru12321/springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>server.git
          <span class="token comment"># 仓库分支</span>
          <span class="token key atrule">default-label</span><span class="token punctuation">:</span> master
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解-6" tabindex="-1"><a class="header-anchor" href="#注解-6" aria-hidden="true">#</a> 注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@EnableConfigServer</span> <span class="token comment">// 开启统一配置中心服务</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><p>Spring Cloud Config 规定了一套配置文件访问规则，如下表</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303210930865.png" alt="image-20230321093053816" loading="lazy"></p><p>可以通过访问localhost:7999/configclient-dev.yml来查看配置文件；</p><p>同时后台会有缓存配置文件的本地目录路径；</p><h3 id="用法-client端-2" tabindex="-1"><a class="header-anchor" href="#用法-client端-2" aria-hidden="true">#</a> 用法-Client端</h3><h4 id="依赖-8" tabindex="-1"><a class="header-anchor" href="#依赖-8" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--config 客户端--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--Spring Cloud 新版本默认将Bootstrap禁用，需要引入--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-8" tabindex="-1"><a class="header-anchor" href="#配置-8" aria-hidden="true">#</a> 配置</h4><p>为了能够提前从Server端拉取到配置文件，再以拉取到的配置加载启动config client。因此，需要将config client的配置写到<mark>bootstrap.yml</mark>中</p><blockquote><p>注意：bootstrap中一定要指明与注册中心有关的配置。如该client服务名称、注册中心地址、端口</p></blockquote><p><mark>bootstrap.yml</mark>，注意这里，可不是application.yml哦</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token comment"># 开启服务发现</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token comment"># 指定Config Server的ID</span>
        <span class="token key atrule">service-id</span><span class="token punctuation">:</span> CONFIGSERVER
      <span class="token comment"># 获取Server端哪个分支哪个环境的哪个服务的配置文件</span>
      <span class="token comment"># 如：master分支的 configclient-dev.yml</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master
      <span class="token key atrule">name</span><span class="token punctuation">:</span> configclient
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev
    <span class="token comment"># 是必要的，注册中心的配置，不可以放在远程git</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
  <span class="token comment"># 是必要的，注册中心要用到，不可以放在远程git</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> CONFIGCLIENTBOOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="用法-4" tabindex="-1"><a class="header-anchor" href="#用法-4" aria-hidden="true">#</a> 用法</h4><p>使用client的controller测试，读取到的值应该是bootstrap.yml中指定的文件中的name值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;config client okk : &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：client同时也会加载公共配置中的值，比如在configclient中指定了port为8000，后续在bootstrap.yml和虚拟机选项中再指定port不会生效</p><hr><p>需要注意的是，当配置更新后，config client端如果不重启是</p><ul><li>配置更新后，Spring Cloud Config 服务端（Server）可以直接从 Git 仓库中获取最新的配置。</li><li>除非重启 Spring Cloud Config 客户端（Client），否则无法通过 Spring Cloud Config 服务端获取最新的配置信息。</li></ul><h3 id="手动配置刷新" tabindex="-1"><a class="header-anchor" href="#手动配置刷新" aria-hidden="true">#</a> 手动配置刷新</h3><h4 id="依赖-9" tabindex="-1"><a class="header-anchor" href="#依赖-9" aria-hidden="true">#</a> 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--监控模块--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-9" tabindex="-1"><a class="header-anchor" href="#配置-9" aria-hidden="true">#</a> 配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 开启所有web端点暴露</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>   <span class="token comment"># * 在yaml 文件属于关键字，所以需要加引号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解-7" tabindex="-1"><a class="header-anchor" href="#注解-7" aria-hidden="true">#</a> 注解</h4><p>需要刷新代码的类中加入刷新配置的注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取配置中心指定配置文件的内容，并展示到页面</span>
<span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//为了让动态（手动）的获取最新的git 配置，在添加 actuator 监控加载 RefreshScope，</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.info}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.version}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configVersion<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/getConfig&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;info：&quot;</span> <span class="token operator">+</span> configInfo <span class="token operator">+</span> <span class="token string">&quot;&lt;br/&gt; version：&quot;</span> <span class="token operator">+</span> configVersion <span class="token operator">+</span> <span class="token string">&quot;&lt;br/&gt;port：&quot;</span> <span class="token operator">+</span> serverPort<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手动调用" tabindex="-1"><a class="header-anchor" href="#手动调用" aria-hidden="true">#</a> <strong>手动调用</strong></h4><p>发送一个 POST 请求刷新Config客户端，通知客户端配置文件已经修改，需要重新拉去配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:9099/actuator/refresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>问题接踵而至：</p><p>只要配置仓库中的配置发生改变，就需要我们<strong>挨个向 Config 客户端手动发送 POST 请求</strong>，通知它们重新拉取配置。</p><p>显然不科学，辣么多微服务，我疯了吗？</p><h2 id="bus-消息总线" tabindex="-1"><a class="header-anchor" href="#bus-消息总线" aria-hidden="true">#</a> Bus 消息总线</h2><h3 id="概念-6" tabindex="-1"><a class="header-anchor" href="#概念-6" aria-hidden="true">#</a> 概念</h3><p><code>Spring Cloud Bus</code> 又被称为消息总线，它能够通过轻量级的消息代理（例如 RabbitMQ、Kafka 等）将微服务架构中的各个服务连接起来，实现广播状态更改、事件推送等功能，还可以实现微服务之间的通信功能。</p><p>bus称之为springcloud中消息总线，主要用来在微服务系统中<strong>实现远端配置更新时通过广播形式通知所有客户端刷新配置信息</strong>，避免手动重启服务的工作</p><h3 id="动态配置刷新" tabindex="-1"><a class="header-anchor" href="#动态配置刷新" aria-hidden="true">#</a> 动态配置刷新</h3><p>Spring Cloud Config + Spring Cloud Bus 实现 一次通知，处处生效</p><p>当 Git 仓库中的配置发生了改变，我们只需要向某一个服务（既可以是 Config 服务端，也可以是 Config 客户端）发送一个 POST 请求，Spring Cloud Bus 就可以通过消息代理通知其他服务重新拉取最新配置，以实现配置的动态刷新。</p><p><img src="https://typora-imgbed-mrru.oss-cn-chengdu.aliyuncs.com/ruyb/202303211120116.png" alt="101942GY-11" loading="lazy"></p><p>​ 根据图上 ，利用 Spring Cloud Bus 实现配置的动态刷新需要以下步骤:</p><ol><li>当 Git 仓库中的配置发生改变后，运维人员向 Config 服务端发送一个 POST 请求，请求路径为“/actuator/refresh”。</li><li>Config 服务端接收到请求后，会将该请求转发给服务总线 Spring Cloud Bus。</li><li>Spring Cloud Bus 接到消息后，会通知给所有 Config 客户端。</li><li>Config 客户端接收到通知，请求 Config 服务端拉取最新配置。</li><li>所有 Config 客户端都获取到最新的配置。</li></ol><h3 id="安装rabbitmq" tabindex="-1"><a class="header-anchor" href="#安装rabbitmq" aria-hidden="true">#</a> 安装rabbitmq</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取rabbitmq的镜像</span>
<span class="token function">docker</span> pull rabbitmq

<span class="token comment"># 运行mq容器 指定容器名称为rabbitmq_ru，映射端口到宿主机</span>
<span class="token comment"># hostname：指定主机名</span>
<span class="token comment"># 15672：控制台Web端口号</span>
<span class="token comment"># 5672：应用访问端口</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> my_rabbitmq <span class="token parameter variable">--name</span> rabbitmq_ru <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 rabbitmq

<span class="token comment"># 启动容器rabbitmq_ru的webUI界面</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq_ru rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法-5" tabindex="-1"><a class="header-anchor" href="#用法-5" aria-hidden="true">#</a> 用法</h3><h4 id="依赖-10" tabindex="-1"><a class="header-anchor" href="#依赖-10" aria-hidden="true">#</a> 依赖</h4><p>server和client端都添加</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--添加消息总线（Bus）对 RabbitMQ 的支持--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--添加Spring Boot actuator 监控模块的依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-10" tabindex="-1"><a class="header-anchor" href="#配置-10" aria-hidden="true">#</a> 配置</h4><p>server和client端都添加</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
<span class="token comment"># Spring Boot 2.50对 actuator 监控屏蔽了大多数的节点，只暴露了 heath 节点，本段配置（*）就是为了开启所有的节点</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解-8" tabindex="-1"><a class="header-anchor" href="#注解-8" aria-hidden="true">#</a> 注解</h4><p>一定要加这个注解<code>@RefreshScope</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取配置中心指定配置文件的内容，并展示到页面</span>
<span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//为了让动态（手动）的获取最新的git 配置，在添加 actuator 监控加载 RefreshScope，</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.info}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.version}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configVersion<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/getConfig&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;info：&quot;</span> <span class="token operator">+</span> configInfo <span class="token operator">+</span> <span class="token string">&quot;&lt;br/&gt; version：&quot;</span> <span class="token operator">+</span> configVersion <span class="token operator">+</span> <span class="token string">&quot;&lt;br/&gt;port：&quot;</span> <span class="token operator">+</span> serverPort<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用法-6" tabindex="-1"><a class="header-anchor" href="#用法-6" aria-hidden="true">#</a> 用法</h4><p>手动触发一下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -X POST http://localhost:7999/actuator/busrefresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,83);function j(E,D){const a=c("ExternalLinkIcon");return i(),l("div",null,[u,n("ul",null,[n("li",null,[s("官网: "),n("a",r,[s("https://www.martinfowler.com/articles/microservices.html"),e(a)])])]),d,n("ul",null,[n("li",null,[s("dubbo官网:"),n("a",k,[s("http://dubbo.apache.org/zh-cn/docs/user/preface/background.html"),e(a)])])]),v,n("ul",null,[n("li",null,[s("官方网址: "),n("a",m,[s("https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/"),e(a)])])]),g,n("p",null,[s("官网地址:"),n("a",b,[s("https://spring.io/projects/spring-cloud"),e(a)])]),h,n("blockquote",null,[n("p",null,[s("精品文章："),n("a",y,[s("http://c.biancheng.net/springcloud/ribbon.html"),e(a)])])]),f,n("ul",null,[n("li",null,[s("在 @FeignClient 注解中，value 属性的取值为："),x,s("，即服务提供者配置文件（application.yml）中 "),n("a",w,[s("spring.application.name"),e(a)]),s(" 的取值。")]),S]),C,n("blockquote",null,[n("p",null,[s("精品文章："),n("a",q,[s("http://c.biancheng.net/springcloud/hystrix.html"),e(a)])])]),I,n("blockquote",null,[n("p",null,[s("精品文章："),n("a",R,[s("https://www.jianshu.com/p/fcb8b26b12a5"),e(a)])])]),_,n("blockquote",null,[n("p",null,[s("精品文章："),n("a",A,[s("http://c.biancheng.net/springcloud/config.html"),e(a)])])]),P])}const T=p(o,[["render",j],["__file","SpringCloud.html.vue"]]);export{T as default};

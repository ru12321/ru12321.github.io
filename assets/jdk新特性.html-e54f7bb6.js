import{_ as e,W as o,X as c,Y as n,Z as s,$ as t,a0 as p,C as l}from"./framework-52f8fb67.js";const i={},u={href:"https://blog.csdn.net/LXYDSF/article/details/125919046",target:"_blank",rel:"noopener noreferrer"},r=p(`<h1 id="一、stream新特性" tabindex="-1"><a class="header-anchor" href="#一、stream新特性" aria-hidden="true">#</a> 一、Stream新特性</h1><h2 id="stream概念" tabindex="-1"><a class="header-anchor" href="#stream概念" aria-hidden="true">#</a> Stream概念</h2><p>java.util.stream包</p><ul><li><p>Stream 是Java8 中<strong>处理集合</strong>的关键抽象概念，它可以对集合执行非常复杂的查找、过滤和映射数据等操作。<strong>使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询</strong>。</p></li><li><p>Stream API 提供了一种高效且易于使用的处理数据的方式。</p><ul><li><strong>Stream 和Collection 集合的区别</strong>：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算。</li></ul></li><li><p><strong><mark>集合讲的是数据，关注的是数据的存储，与内存打交道</mark></strong></p></li><li><p><strong><mark>Stream 讲的是计算，关注的是对数据的运算，与CPU打交道</mark></strong></p></li><li><p>Stream是<mark>数据渠道</mark>，用于操作数据源（集合、数组等）所生成的元素序列。</p><ul><li>Stream 自己不会存储元素。</li><li>Stream 不会改变源对象。相反，他们会<em>返回一个持有结果的新 Stream</em> 。</li><li>Stream 操作是延迟执行的。这意味着他们会等到<em>需要结果的时候才执行</em>。</li></ul></li></ul><h2 id="stream操作" tabindex="-1"><a class="header-anchor" href="#stream操作" aria-hidden="true">#</a> Stream操作</h2><h3 id="_1-操作步骤" tabindex="-1"><a class="header-anchor" href="#_1-操作步骤" aria-hidden="true">#</a> 1 操作步骤</h3><ol><li>创建 Stream 一个数据源（如：集合、数组），获取一个</li><li>中间操作（<strong>非必要</strong>） 一个中间操作链，对数据源的数据进行处理</li><li>终止操作 一旦执行 终止操作， 就 执行中间操作链 ，并产生结果 。之后，不会再被使用</li></ol><h3 id="_2-创建" tabindex="-1"><a class="header-anchor" href="#_2-创建" aria-hidden="true">#</a> 2 创建</h3><h4 id="_2-1-通过集合" tabindex="-1"><a class="header-anchor" href="#_2-1-通过集合" aria-hidden="true">#</a> <strong>2.1 通过集合</strong></h4><p>最常见！ 集合.stream()</p><p>Java8中的 Collection 接口被扩展，提供了两个获取流的方法<code>.stream()</code>，<code>.parallelStream()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">default</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>返回一个顺序流
<span class="token keyword">default</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>返回一个并行流
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建方式一：通过集合 stream()、parallelStream()</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees<span class="token operator">=</span><span class="token class-name">EmployeeTestData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Collection接口：返回基于元素的顺序流</span>
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> stream<span class="token operator">=</span>employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Collection接口：返回一个并行流，多线程，只能用线程安全的集合</span>
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employeeStream<span class="token operator">=</span>employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-arrays-stream" tabindex="-1"><a class="header-anchor" href="#_2-2-arrays-stream" aria-hidden="true">#</a> 2.2 Arrays.stream()</h4><p>Java8中的 Arrays 的静态方法 <code>Arrays.stream()</code> 可以获取数组流：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>array<span class="token punctuation">)</span><span class="token operator">:</span>返回一个流
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重载形式，能够处理对应基本类型的数组：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IntStream</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>array<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LongStream</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span>array<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DoubleStream</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span>array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建方式二：通过数组 调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span> stream<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Employee</span> employee1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">&quot;ccdd&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">846</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Employee</span> employee2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">&quot;ccdd&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">846</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr2<span class="token operator">=</span><span class="token punctuation">{</span>employee1<span class="token punctuation">,</span>employee2<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> stream1<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-stream-of" tabindex="-1"><a class="header-anchor" href="#_2-3-stream-of" aria-hidden="true">#</a> 2.3 Stream.of()</h4><p>可以调用Stream 类静态方法<code>Stream.of()</code> , 通过显示值创建一个流。它可以接收任意数量的参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token operator">:</span>返回一个流
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建方式三：通过Stream的of()</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream<span class="token operator">=</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-无限流" tabindex="-1"><a class="header-anchor" href="#_2-4-无限流" aria-hidden="true">#</a> 2.4 无限流</h4><p>可以使用Stream 类静态方法<code>Stream.iterate()</code> 和 <code>Stream.generate()</code>，创建无限流。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> seed<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span><span class="token comment">//迭代</span>
<span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> s<span class="token punctuation">)</span><span class="token comment">//生成</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建方式四：创建无限流</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//对于seed，执行一元函数f，生成有序元素无限流</span>
        <span class="token comment">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token operator">-&gt;</span>t<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//根据s函数，生成无序元素无限流</span>
        <span class="token comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-中间操作" tabindex="-1"><a class="header-anchor" href="#_3-中间操作" aria-hidden="true">#</a> 3 中间操作</h3><p>多个<strong>中间操作</strong> 可以连接起来形成一个 <strong>流水线</strong> ，除非流水线上触发终止操作，否则 <strong>中间操作不会执行任何的处理</strong> ！而在 <mark><em>终止操作时一次性全部处理</em></mark>，称为“惰性求值” 。</p><h4 id="_3-1-筛选与切片" tabindex="-1"><a class="header-anchor" href="#_3-1-筛选与切片" aria-hidden="true">#</a> 3.1 筛选与切片</h4><ul><li><p><strong>filter(Predicate p)：接收Lambda ，获得满足条件P（断定型接口 返回Boolean值）的元素</strong></p></li><li><p><strong>distinct()：去除重复元素（同一个内存地址的）</strong></p></li><li><p><strong>limit(long maxSize)：截断流，使其元素不超过给定数量</strong></p></li><li><p>skip(long n)：跳过元素，返回一个扔掉了前n 个元素的流。若流中元素不足n 个，则返回一个空流。与<code>limit(n)</code>互补</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees<span class="token operator">=</span><span class="token class-name">EmployeeTestData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</span>
        <span class="token comment">//练习：查询员工表中薪资大于7000的员工信息</span>
        employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>employee<span class="token operator">-&gt;</span>employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//只要前三个元素</span>
        employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//不要前三个元素</span>
        employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//去重</span>
        employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-映射" tabindex="-1"><a class="header-anchor" href="#_3-2-映射" aria-hidden="true">#</a> 3.2 映射</h4><ul><li><strong>map(Function f)：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</strong></li><li>mapToDouble(ToDoubleFunction f)：接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream。</li><li>mapToInt(ToIntFunction f)：接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream。</li><li>mapToLong(ToLongFunction f)：接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream。</li><li>flatMap(Function f)：接收一个函数作为参数，将流中的每个值都换成另一个流，<strong>然后把所有流连接成一个流</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;dd&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;vv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//每个元素 过一遍 map中的函数计算</span>
        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str<span class="token operator">-&gt;</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-排序" tabindex="-1"><a class="header-anchor" href="#_3-3-排序" aria-hidden="true">#</a> 3.3 排序</h4><ul><li><strong>sorted()：产生一个新流，其中按自然顺序排序</strong></li><li>sorted(Comparator com)：产生一个新流，其中按比较器顺序排序</li></ul><h3 id="_4-终止操作" tabindex="-1"><a class="header-anchor" href="#_4-终止操作" aria-hidden="true">#</a> 4 终止操作</h3><ul><li><p><mark>流不一定需要中间操作，可以直接创建--&gt;终止操作</mark></p></li><li><p>终端操作<strong>会从流的流水线生成结果</strong>。其结果可以是任何不是流的值，例如：List、Integer，甚至是void 。</p></li><li><p>流进行了终止操作后，不能再次使用。</p></li></ul><h4 id="_4-1-匹配与查找" tabindex="-1"><a class="header-anchor" href="#_4-1-匹配与查找" aria-hidden="true">#</a> 4.1 匹配与查找</h4><ul><li><p>allMatch(Predicate p)：检查是否匹配所有元素</p></li><li><p><strong>anyMatch(Predicate p)：检查是否至少匹配一个元素</strong></p></li><li><p>noneMatch(Predicate p)：检查是否没有匹配所有元素</p></li><li><p><strong>findFirst()：返回第一个元素</strong></p></li><li><p>findAny()：返回当前流中的任意元素</p></li><li><p>count()：返回流中元素总数</p></li><li><p>max(Comparator c)：返回流中最大值。参数是比较器，比如Comparator.comparing(String::length)</p></li><li><p>min(Comparator c)：返回流中最小值。</p></li><li><p><strong>forEach(Consumer c)：内部迭代</strong></p></li></ul><h4 id="_4-2-reduce-归约" tabindex="-1"><a class="header-anchor" href="#_4-2-reduce-归约" aria-hidden="true">#</a> 4.2 reduce 归约</h4><p>归约：将一个Stream中的所有元素反复结合起来,得到一个结果</p><p>备注：map 和reduce 的连接通常称为map-reduce 模式，因Google 用它来进行网络搜索而出名。</p><ul><li>reduce(T iden, BinaryOperator b)：可以将流中元素反复结合起来，得到一个值。返回T</li><li>reduce(BinaryOperator b)：参数是二元函数。可以将流中元素反复结合起来，得到一个值。<mark>返回Optional对象</mark>，</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream<span class="token operator">=</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-&gt;</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a = &quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b = &quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token comment">/*
a = 1
b = 3
a = 4
b = 5
a = 9
b = 7
a = 16
b = 9
25
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-收集" tabindex="-1"><a class="header-anchor" href="#_4-3-收集" aria-hidden="true">#</a> 4.3 收集</h4><ul><li>collect(Collector c)：将流转换为<mark>其他形式（如List 、 Set 、Map等）</mark>。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</li></ul><p>Collector接口中方法的实现决定了如何对流执行收集的操作 如收集到 List 、 Set 、Map。</p><p>另外，Collectors 实用类提供了很多<strong>静态方法</strong>，可以方便地创建常见收集器实例</p><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/c81e2dc254feb1fa57c25a8ebca2d414.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://picbed-for-mrru-mdfile.oss-cn-chengdu.aliyuncs.com/mrru-glodon/8e5d1e8c2f0db698fba9dd82f0eec84c.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="二、lambda表达式" tabindex="-1"><a class="header-anchor" href="#二、lambda表达式" aria-hidden="true">#</a> 二、Lambda表达式</h1><p>Lambda 是一个匿名函数，我们可以把Lambda 表达式理解为是一段可以传递的代码（<mark>将代码像数据一样进行传递</mark>）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p><ul><li>好处：避免匿名内部类定义过多，可以让代码简洁紧凑，留下核心的逻辑</li></ul><ul><li><p>Lambda表达式特征</p><ul><li>**可选类型声明：**不需要声明参数类型，编译器可以统一识别参数值。</li><li>**可选的参数圆括号：**一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li>**可选的大括号：**如果主体包含了一个语句，就不需要使用大括号。</li><li>**可选的返回关键字：**如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li></ul></li><li><p>注意：lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p></li></ul><h1 id="三、函数式接口" tabindex="-1"><a class="header-anchor" href="#三、函数式接口" aria-hidden="true">#</a> 三、函数式接口</h1><h2 id="_1-函数式接口概念" tabindex="-1"><a class="header-anchor" href="#_1-函数式接口概念" aria-hidden="true">#</a> 1 函数式接口概念</h2><ul><li><p>定义：<mark>只包含一个抽象方法的接口</mark></p></li><li><p>使用 <code>@FunctionalInterface</code> 注解<strong>用来测试用</strong>，如果不是函数式接口，那么会报错；</p><ul><li>只要满足函数式接口的定义，<em>这个注解写不写无所谓</em></li></ul></li><li><p>可以通过 <code>Lambda </code>表达式来创建该接口的对象</p></li></ul><ul><li><p>java 不但可以支持 OOP 还可以支持 OOF （面向函数编程），<mark>将函数作为参数，进行传递</mark></p></li><li><p>在 Java8 中， <code>Lambda</code> 表达式就是一个函数式接口的实例</p></li></ul><h2 id="_2-java内置的函数式接口" tabindex="-1"><a class="header-anchor" href="#_2-java内置的函数式接口" aria-hidden="true">#</a> 2 Java内置的函数式接口</h2><blockquote><p><strong>一定要注意这些函数参数类型什么，返回类型是什么</strong></p></blockquote><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td><code>Consumer&lt;T&gt;</code></td><td><mark>T</mark></td><td><mark>void</mark></td><td>对类型为T的对象应用操作，包含方法：<code>void accept(T t)</code></td></tr><tr><td><code>Supplier&lt;T&gt;</code></td><td><mark>无</mark></td><td><mark>T</mark></td><td>返回类型为T的对象，包含方法：<code>T get()</code></td></tr><tr><td><code>Function&lt;T, R&gt;</code></td><td><mark>T</mark></td><td><mark>R</mark></td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：<code>R apply(T t)</code></td></tr><tr><td><code>Predicate&lt;T&gt;</code></td><td><mark>T</mark></td><td><mark>boolean</mark></td><td>确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法：<code>boolean test(T t)</code></td></tr></tbody></table><p>总结：<strong>遇到方法参数类型为以上接口时，可以使用lambda表达式进行优化</strong></p><h3 id="_2-1-消费型接口-consumer-t-void-accept-t-t" tabindex="-1"><a class="header-anchor" href="#_2-1-消费型接口-consumer-t-void-accept-t-t" aria-hidden="true">#</a> 2.1 消费型接口 Consumer&lt; T&gt; void accept(T t)</h3><ul><li><mark><strong>在lambda中使用：T类型参数，无需返回数据</strong></mark></li></ul><p><strong>消费一个指定泛型的数据</strong>（至于具体怎么消费(使用), 需要自定义(输出，计算…） 其数据类型由泛型决定。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//将函数作为method的参数，进行传递</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//函数有一个参数哦</span>
        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Consumer接口的lambda使用
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;我是Consumer的参数&quot;</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-生产型接口-supplier-t-t-get" tabindex="-1"><a class="header-anchor" href="#_2-2-生产型接口-supplier-t-t-get" aria-hidden="true">#</a> 2.2 生产型接口 Supplier&lt; T&gt; T get()</h3><ul><li><p><mark><strong>在lambda中使用：无参，返回T类型数据 即可</strong></mark></p></li><li><p>生产型接口，指定接口的泛型是什么类型，那么接口中的get方法<strong>就会生产什么类型的数据</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义一个方法，方法的参数传递Supplier，泛型使用Integer</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sup<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//调用getMax方法，方法的参数Supplier是一个函数式接口，所以可以传递Lambda表达式</span>
        <span class="token keyword">int</span> maxValue<span class="token operator">=</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> max<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-函数型接口-function-t-r-r-apply-t-t" tabindex="-1"><a class="header-anchor" href="#_2-3-函数型接口-function-t-r-r-apply-t-t" aria-hidden="true">#</a> 2.3 函数型接口 Function&lt;T, R&gt; R apply(T t)</h3><ul><li><mark><strong>在lambda中使用：T类型参数，返回R类型数据 即可</strong></mark></li></ul><p>来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">functional</span><span class="token punctuation">(</span><span class="token class-name">Double</span> salary<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> function<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">functional</span><span class="token punctuation">(</span><span class="token number">60.0</span><span class="token punctuation">,</span>sa<span class="token operator">-&gt;</span>sa<span class="token operator">+</span><span class="token string">&quot;薪水&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token comment">//20.0薪水</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-断定型接口-predicate-t-boolean-test-t-t" tabindex="-1"><a class="header-anchor" href="#_2-4-断定型接口-predicate-t-boolean-test-t-t" aria-hidden="true">#</a> 2.4 断定型接口 Predicate&lt; T&gt; boolean test(T t)</h3><p><mark><strong>在lambda中使用：T类型参数，返回boolean类型数据 即可</strong></mark></p><p><strong>对某种类型的数据进行判断</strong>，得到一个boolean值结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Predicate函数作为参数进行传递
 * <span class="token keyword">@param</span> <span class="token parameter">user</span>
 * <span class="token keyword">@param</span> <span class="token parameter">predicate</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">predicate</span><span class="token punctuation">(</span><span class="token class-name">String</span> user<span class="token punctuation">,</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> test<span class="token operator">=</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token operator">+</span><span class="token string">&quot;的密码: &quot;</span><span class="token operator">+</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Predict接口的lambda使用
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//lambda的原始写法</span>
        <span class="token function">predicate</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb&quot;</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//lambda的简便写法</span>
        <span class="token function">predicate</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb&quot;</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;ruyb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、方法引用与构造器引用" tabindex="-1"><a class="header-anchor" href="#四、方法引用与构造器引用" aria-hidden="true">#</a> 四、方法引用与构造器引用</h1><h2 id="_4-2" tabindex="-1"><a class="header-anchor" href="#_4-2" aria-hidden="true">#</a> 4.2</h2><h3 id="_1-方法引用" tabindex="-1"><a class="header-anchor" href="#_1-方法引用" aria-hidden="true">#</a> 1 方法引用</h3><ul><li><p>使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p></li><li><p><strong>通过方法的名字来指向一个方法</strong>，可以认为是Lambda表达式的一个语法糖</p></li><li><p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</p></li><li><p>格式：<code>类(或对象) :: 方法名</code></p></li><li><p>如下三种主要使用情况：</p><ul><li>对象 :: 实例方法名</li><li>类 :: 静态方法名</li><li>类 :: 实例方法名</li></ul></li></ul><h3 id="_2-构造器引用" tabindex="-1"><a class="header-anchor" href="#_2-构造器引用" aria-hidden="true">#</a> 2 构造器引用</h3><p>格式：ClassName :: new //构造器引用</p><p>格式：type[] :: new //数组引用</p><h1 id="五、optional类" tabindex="-1"><a class="header-anchor" href="#五、optional类" aria-hidden="true">#</a> 五、Optional类</h1>`,87),k={href:"https://www.runoob.com/java/java8-optional-class.html",target:"_blank",rel:"noopener noreferrer"},d=p(`<h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1 概述</h3><ul><li><p>本质上，这是一个<mark>包含有可选值</mark>的包装类</p></li><li><p>Optional 类是一个<strong>可以为null的容器对象</strong>。<mark><strong>如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</strong></mark></p></li><li><p>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就<strong>不用显式进行空值检测</strong>。Optional 类的引入很好的解决空指针异常（NullPointerException）。</p></li></ul><h3 id="_2-创建optional实例" tabindex="-1"><a class="header-anchor" href="#_2-创建optional实例" aria-hidden="true">#</a> 2 创建optional实例</h3><ul><li>使用静态方法<strong>empty()<strong>创建一个</strong>空的Optional对象</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenCreateEmptyOptional_thenNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> emptyOpt<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emptyOpt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>明确对象不为null</strong> 的时候使用<strong>of()</strong>，<strong>包含值</strong>的对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenCreateOfEmptyOptional_thenNullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> opt<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果对象即<strong>可能是null也可能是非 null</strong>，你就应该使用**ofNullable()**方法，<strong>包含值</strong>的对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> opt<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-访问对象的值" tabindex="-1"><a class="header-anchor" href="#_3-访问对象的值" aria-hidden="true">#</a> 3 访问对象的值</h3><ul><li><strong>get()方法</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenCreateOfNullableOptional_thenOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> opt<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>opt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>检查是否有值的另一个选择是 ifPresent()方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenCheckIfPresent_thenOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;john@gmail.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> opt<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertEquals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>opt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-返回默认值" tabindex="-1"><a class="header-anchor" href="#_4-返回默认值" aria-hidden="true">#</a> 4 返回默认值</h3><ul><li><strong>orElse()</strong>：如果有值则返回该值user，否则返回传递给它的参数值user2</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenEmptyValue_thenReturnDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;anna@gmail.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> result<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里user对象是空的，所以返回了作为默认值的user2。</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>orElseGet()—— 其行为略有不同。这个方法会在有值的时候返回值，如果没有值，它会执行作为参数传入的**Supplier(供应者)**函数式接口，并将返回其执行结果：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> result<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-map-方法" tabindex="-1"><a class="header-anchor" href="#_5-map-方法" aria-hidden="true">#</a> 5.map()方法</h3>`,20);function m(v,b){const a=l("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[s("学习资料 "),n("a",u,[s("https://blog.csdn.net/LXYDSF/article/details/125919046"),t(a)])]),r,n("p",null,[n("a",k,[s("https://www.runoob.com/java/java8-optional-class.html"),t(a)])]),d])}const h=e(i,[["render",m],["__file","jdk新特性.html.vue"]]);export{h as default};
